// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_sql.proto

package com.mysql.cj.mysqlx.protobuf;

public final class MysqlxSql {
  private MysqlxSql() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.Row)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
     */
    java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any> 
        getFieldList();
    /**
     * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
     */
    com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any getField(int index);
    /**
     * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
     */
    int getFieldCount();
    /**
     * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
     */
    java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder> 
        getFieldOrBuilderList();
    /**
     * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
     */
    com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder getFieldOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.Row}
   *
   * <pre>
   * Row in a Resultset
   * a row is a set of fields. Each field may have :protobuf:msg:`Mysqlx.Datatypes::Any` value.
   * </pre>
   */
  public static final class Row extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.Row)
      RowOrBuilder {
    // Use Row.newBuilder() to construct.
    private Row(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Row(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Row defaultInstance;
    public static Row getDefaultInstance() {
      return defaultInstance;
    }

    public Row getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Row(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                field_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any>();
                mutable_bitField0_ |= 0x00000001;
              }
              field_.add(input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          field_ = java.util.Collections.unmodifiableList(field_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_Row_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_Row_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder.class);
    }

    public static com.google.protobuf.Parser<Row> PARSER =
        new com.google.protobuf.AbstractParser<Row>() {
      public Row parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Row(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Row> getParserForType() {
      return PARSER;
    }

    public static final int FIELD_FIELD_NUMBER = 1;
    private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any> field_;
    /**
     * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
     */
    public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any> getFieldList() {
      return field_;
    }
    /**
     * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
     */
    public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder> 
        getFieldOrBuilderList() {
      return field_;
    }
    /**
     * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
     */
    public int getFieldCount() {
      return field_.size();
    }
    /**
     * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
     */
    public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any getField(int index) {
      return field_.get(index);
    }
    /**
     * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
     */
    public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder getFieldOrBuilder(
        int index) {
      return field_.get(index);
    }

    private void initFields() {
      field_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getFieldCount(); i++) {
        if (!getField(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < field_.size(); i++) {
        output.writeMessage(1, field_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < field_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, field_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.Row}
     *
     * <pre>
     * Row in a Resultset
     * a row is a set of fields. Each field may have :protobuf:msg:`Mysqlx.Datatypes::Any` value.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.Row)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_Row_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_Row_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFieldFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (fieldBuilder_ == null) {
          field_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          fieldBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_Row_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row(this);
        int from_bitField0_ = bitField0_;
        if (fieldBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            field_ = java.util.Collections.unmodifiableList(field_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.field_ = field_;
        } else {
          result.field_ = fieldBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.getDefaultInstance()) return this;
        if (fieldBuilder_ == null) {
          if (!other.field_.isEmpty()) {
            if (field_.isEmpty()) {
              field_ = other.field_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFieldIsMutable();
              field_.addAll(other.field_);
            }
            onChanged();
          }
        } else {
          if (!other.field_.isEmpty()) {
            if (fieldBuilder_.isEmpty()) {
              fieldBuilder_.dispose();
              fieldBuilder_ = null;
              field_ = other.field_;
              bitField0_ = (bitField0_ & ~0x00000001);
              fieldBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFieldFieldBuilder() : null;
            } else {
              fieldBuilder_.addAllMessages(other.field_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getFieldCount(); i++) {
          if (!getField(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any> field_ =
        java.util.Collections.emptyList();
      private void ensureFieldIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          field_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any>(field_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder> fieldBuilder_;

      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any> getFieldList() {
        if (fieldBuilder_ == null) {
          return java.util.Collections.unmodifiableList(field_);
        } else {
          return fieldBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public int getFieldCount() {
        if (fieldBuilder_ == null) {
          return field_.size();
        } else {
          return fieldBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any getField(int index) {
        if (fieldBuilder_ == null) {
          return field_.get(index);
        } else {
          return fieldBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public Builder setField(
          int index, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any value) {
        if (fieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldIsMutable();
          field_.set(index, value);
          onChanged();
        } else {
          fieldBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public Builder setField(
          int index, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder builderForValue) {
        if (fieldBuilder_ == null) {
          ensureFieldIsMutable();
          field_.set(index, builderForValue.build());
          onChanged();
        } else {
          fieldBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public Builder addField(com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any value) {
        if (fieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldIsMutable();
          field_.add(value);
          onChanged();
        } else {
          fieldBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public Builder addField(
          int index, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any value) {
        if (fieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldIsMutable();
          field_.add(index, value);
          onChanged();
        } else {
          fieldBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public Builder addField(
          com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder builderForValue) {
        if (fieldBuilder_ == null) {
          ensureFieldIsMutable();
          field_.add(builderForValue.build());
          onChanged();
        } else {
          fieldBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public Builder addField(
          int index, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder builderForValue) {
        if (fieldBuilder_ == null) {
          ensureFieldIsMutable();
          field_.add(index, builderForValue.build());
          onChanged();
        } else {
          fieldBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public Builder addAllField(
          java.lang.Iterable<? extends com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any> values) {
        if (fieldBuilder_ == null) {
          ensureFieldIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, field_);
          onChanged();
        } else {
          fieldBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public Builder clearField() {
        if (fieldBuilder_ == null) {
          field_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          fieldBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public Builder removeField(int index) {
        if (fieldBuilder_ == null) {
          ensureFieldIsMutable();
          field_.remove(index);
          onChanged();
        } else {
          fieldBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder getFieldBuilder(
          int index) {
        return getFieldFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder getFieldOrBuilder(
          int index) {
        if (fieldBuilder_ == null) {
          return field_.get(index);  } else {
          return fieldBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder> 
           getFieldOrBuilderList() {
        if (fieldBuilder_ != null) {
          return fieldBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(field_);
        }
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder addFieldBuilder() {
        return getFieldFieldBuilder().addBuilder(
            com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.getDefaultInstance());
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder addFieldBuilder(
          int index) {
        return getFieldFieldBuilder().addBuilder(
            index, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.getDefaultInstance());
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any field = 1;</code>
       */
      public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder> 
           getFieldBuilderList() {
        return getFieldFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder> 
          getFieldFieldBuilder() {
        if (fieldBuilder_ == null) {
          fieldBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder>(
                  field_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          field_ = null;
        }
        return fieldBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.Row)
    }

    static {
      defaultInstance = new Row(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.Row)
  }

  public interface StmtExecuteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.StmtExecute)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string namespace = 3 [default = "sql"];</code>
     */
    boolean hasNamespace();
    /**
     * <code>optional string namespace = 3 [default = "sql"];</code>
     */
    java.lang.String getNamespace();
    /**
     * <code>optional string namespace = 3 [default = "sql"];</code>
     */
    com.google.protobuf.ByteString
        getNamespaceBytes();

    /**
     * <code>required string stmt = 1;</code>
     */
    boolean hasStmt();
    /**
     * <code>required string stmt = 1;</code>
     */
    java.lang.String getStmt();
    /**
     * <code>required string stmt = 1;</code>
     */
    com.google.protobuf.ByteString
        getStmtBytes();

    /**
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any> 
        getArgsList();
    /**
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any getArgs(int index);
    /**
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    int getArgsCount();
    /**
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder> 
        getArgsOrBuilderList();
    /**
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder getArgsOrBuilder(
        int index);

    /**
     * <code>optional bool compact_metadata = 4;</code>
     */
    boolean hasCompactMetadata();
    /**
     * <code>optional bool compact_metadata = 4;</code>
     */
    boolean getCompactMetadata();
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.StmtExecute}
   *
   * <pre>
   * execute a statement without preparing it
   * .. uml::
   *   client -&gt; server: StmtExecute
   *   loop has more resultsets
   *   loop has more columns
   *   server --&gt; client: ColumnMetaData
   *   end
   *   loop has more rows
   *   server --&gt; client: Row
   *   end
   *   alt has more resultsets
   *   server --&gt; client: CursorFetchDoneMoreResultsets
   *   else
   *   server --&gt; client: CursorFetchDone
   *   end
   *   end
   *   server --&gt; client: StmtExecuteOk
   * Notices:
   *   This message may generate a notice containing WARNINGs generated by its execution.
   *   This message may generate a notice containing INFO messages generated by its execution.
   * :param namespace: namespace of the statement to be executed
   * :param stmt: statement that shall be executed.
   * :param args: values for wildcard replacements
   * :param compact_metadata: send only type information for ColumnMetadata, skipping names and others
   * :returns:
   *    * :protobuf:msg:`Mysqlx.Sql::StmtExecuteOk` or
   *    * a resultset-set starting with :protobuf:msg:`Mysqlx.Sql::ColumnMetaData` 
   *    * followed by :protobuf:msg:`Mysqlx.Sql::StmtExecuteOk`
   * </pre>
   */
  public static final class StmtExecute extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.StmtExecute)
      StmtExecuteOrBuilder {
    // Use StmtExecute.newBuilder() to construct.
    private StmtExecute(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private StmtExecute(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final StmtExecute defaultInstance;
    public static StmtExecute getDefaultInstance() {
      return defaultInstance;
    }

    public StmtExecute getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private StmtExecute(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              stmt_ = bs;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                args_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any>();
                mutable_bitField0_ |= 0x00000004;
              }
              args_.add(input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              namespace_ = bs;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              compactMetadata_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          args_ = java.util.Collections.unmodifiableList(args_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_StmtExecute_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_StmtExecute_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute.Builder.class);
    }

    public static com.google.protobuf.Parser<StmtExecute> PARSER =
        new com.google.protobuf.AbstractParser<StmtExecute>() {
      public StmtExecute parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StmtExecute(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<StmtExecute> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NAMESPACE_FIELD_NUMBER = 3;
    private java.lang.Object namespace_;
    /**
     * <code>optional string namespace = 3 [default = "sql"];</code>
     */
    public boolean hasNamespace() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string namespace = 3 [default = "sql"];</code>
     */
    public java.lang.String getNamespace() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          namespace_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string namespace = 3 [default = "sql"];</code>
     */
    public com.google.protobuf.ByteString
        getNamespaceBytes() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        namespace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STMT_FIELD_NUMBER = 1;
    private java.lang.Object stmt_;
    /**
     * <code>required string stmt = 1;</code>
     */
    public boolean hasStmt() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string stmt = 1;</code>
     */
    public java.lang.String getStmt() {
      java.lang.Object ref = stmt_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          stmt_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string stmt = 1;</code>
     */
    public com.google.protobuf.ByteString
        getStmtBytes() {
      java.lang.Object ref = stmt_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stmt_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ARGS_FIELD_NUMBER = 2;
    private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any> args_;
    /**
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any> getArgsList() {
      return args_;
    }
    /**
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder> 
        getArgsOrBuilderList() {
      return args_;
    }
    /**
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any getArgs(int index) {
      return args_.get(index);
    }
    /**
     * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
     */
    public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder getArgsOrBuilder(
        int index) {
      return args_.get(index);
    }

    public static final int COMPACT_METADATA_FIELD_NUMBER = 4;
    private boolean compactMetadata_;
    /**
     * <code>optional bool compact_metadata = 4;</code>
     */
    public boolean hasCompactMetadata() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool compact_metadata = 4;</code>
     */
    public boolean getCompactMetadata() {
      return compactMetadata_;
    }

    private void initFields() {
      namespace_ = "sql";
      stmt_ = "";
      args_ = java.util.Collections.emptyList();
      compactMetadata_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStmt()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getArgsCount(); i++) {
        if (!getArgs(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(1, getStmtBytes());
      }
      for (int i = 0; i < args_.size(); i++) {
        output.writeMessage(2, args_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(3, getNamespaceBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(4, compactMetadata_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getStmtBytes());
      }
      for (int i = 0; i < args_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, args_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getNamespaceBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, compactMetadata_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.StmtExecute}
     *
     * <pre>
     * execute a statement without preparing it
     * .. uml::
     *   client -&gt; server: StmtExecute
     *   loop has more resultsets
     *   loop has more columns
     *   server --&gt; client: ColumnMetaData
     *   end
     *   loop has more rows
     *   server --&gt; client: Row
     *   end
     *   alt has more resultsets
     *   server --&gt; client: CursorFetchDoneMoreResultsets
     *   else
     *   server --&gt; client: CursorFetchDone
     *   end
     *   end
     *   server --&gt; client: StmtExecuteOk
     * Notices:
     *   This message may generate a notice containing WARNINGs generated by its execution.
     *   This message may generate a notice containing INFO messages generated by its execution.
     * :param namespace: namespace of the statement to be executed
     * :param stmt: statement that shall be executed.
     * :param args: values for wildcard replacements
     * :param compact_metadata: send only type information for ColumnMetadata, skipping names and others
     * :returns:
     *    * :protobuf:msg:`Mysqlx.Sql::StmtExecuteOk` or
     *    * a resultset-set starting with :protobuf:msg:`Mysqlx.Sql::ColumnMetaData` 
     *    * followed by :protobuf:msg:`Mysqlx.Sql::StmtExecuteOk`
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.StmtExecute)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_StmtExecute_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_StmtExecute_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getArgsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        namespace_ = "sql";
        bitField0_ = (bitField0_ & ~0x00000001);
        stmt_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          argsBuilder_.clear();
        }
        compactMetadata_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_StmtExecute_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.namespace_ = namespace_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.stmt_ = stmt_;
        if (argsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            args_ = java.util.Collections.unmodifiableList(args_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.args_ = args_;
        } else {
          result.args_ = argsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.compactMetadata_ = compactMetadata_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute.getDefaultInstance()) return this;
        if (other.hasNamespace()) {
          bitField0_ |= 0x00000001;
          namespace_ = other.namespace_;
          onChanged();
        }
        if (other.hasStmt()) {
          bitField0_ |= 0x00000002;
          stmt_ = other.stmt_;
          onChanged();
        }
        if (argsBuilder_ == null) {
          if (!other.args_.isEmpty()) {
            if (args_.isEmpty()) {
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureArgsIsMutable();
              args_.addAll(other.args_);
            }
            onChanged();
          }
        } else {
          if (!other.args_.isEmpty()) {
            if (argsBuilder_.isEmpty()) {
              argsBuilder_.dispose();
              argsBuilder_ = null;
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000004);
              argsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getArgsFieldBuilder() : null;
            } else {
              argsBuilder_.addAllMessages(other.args_);
            }
          }
        }
        if (other.hasCompactMetadata()) {
          setCompactMetadata(other.getCompactMetadata());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasStmt()) {
          
          return false;
        }
        for (int i = 0; i < getArgsCount(); i++) {
          if (!getArgs(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecute) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object namespace_ = "sql";
      /**
       * <code>optional string namespace = 3 [default = "sql"];</code>
       */
      public boolean hasNamespace() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string namespace = 3 [default = "sql"];</code>
       */
      public java.lang.String getNamespace() {
        java.lang.Object ref = namespace_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            namespace_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string namespace = 3 [default = "sql"];</code>
       */
      public com.google.protobuf.ByteString
          getNamespaceBytes() {
        java.lang.Object ref = namespace_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          namespace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string namespace = 3 [default = "sql"];</code>
       */
      public Builder setNamespace(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        namespace_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string namespace = 3 [default = "sql"];</code>
       */
      public Builder clearNamespace() {
        bitField0_ = (bitField0_ & ~0x00000001);
        namespace_ = getDefaultInstance().getNamespace();
        onChanged();
        return this;
      }
      /**
       * <code>optional string namespace = 3 [default = "sql"];</code>
       */
      public Builder setNamespaceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        namespace_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object stmt_ = "";
      /**
       * <code>required string stmt = 1;</code>
       */
      public boolean hasStmt() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string stmt = 1;</code>
       */
      public java.lang.String getStmt() {
        java.lang.Object ref = stmt_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stmt_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string stmt = 1;</code>
       */
      public com.google.protobuf.ByteString
          getStmtBytes() {
        java.lang.Object ref = stmt_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stmt_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string stmt = 1;</code>
       */
      public Builder setStmt(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        stmt_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string stmt = 1;</code>
       */
      public Builder clearStmt() {
        bitField0_ = (bitField0_ & ~0x00000002);
        stmt_ = getDefaultInstance().getStmt();
        onChanged();
        return this;
      }
      /**
       * <code>required string stmt = 1;</code>
       */
      public Builder setStmtBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        stmt_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any> args_ =
        java.util.Collections.emptyList();
      private void ensureArgsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          args_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any>(args_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder> argsBuilder_;

      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any> getArgsList() {
        if (argsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(args_);
        } else {
          return argsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public int getArgsCount() {
        if (argsBuilder_ == null) {
          return args_.size();
        } else {
          return argsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any getArgs(int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);
        } else {
          return argsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder setArgs(
          int index, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.set(index, value);
          onChanged();
        } else {
          argsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder setArgs(
          int index, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.set(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder addArgs(com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(value);
          onChanged();
        } else {
          argsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder addArgs(
          int index, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(index, value);
          onChanged();
        } else {
          argsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder addArgs(
          com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder addArgs(
          int index, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder addAllArgs(
          java.lang.Iterable<? extends com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any> values) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, args_);
          onChanged();
        } else {
          argsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder clearArgs() {
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          argsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public Builder removeArgs(int index) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.remove(index);
          onChanged();
        } else {
          argsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder getArgsBuilder(
          int index) {
        return getArgsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder getArgsOrBuilder(
          int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);  } else {
          return argsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder> 
           getArgsOrBuilderList() {
        if (argsBuilder_ != null) {
          return argsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(args_);
        }
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder addArgsBuilder() {
        return getArgsFieldBuilder().addBuilder(
            com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.getDefaultInstance());
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder addArgsBuilder(
          int index) {
        return getArgsFieldBuilder().addBuilder(
            index, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.getDefaultInstance());
      }
      /**
       * <code>repeated .Mysqlx.Datatypes.Any args = 2;</code>
       */
      public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder> 
           getArgsBuilderList() {
        return getArgsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder> 
          getArgsFieldBuilder() {
        if (argsBuilder_ == null) {
          argsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.Any.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.AnyOrBuilder>(
                  args_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          args_ = null;
        }
        return argsBuilder_;
      }

      private boolean compactMetadata_ ;
      /**
       * <code>optional bool compact_metadata = 4;</code>
       */
      public boolean hasCompactMetadata() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool compact_metadata = 4;</code>
       */
      public boolean getCompactMetadata() {
        return compactMetadata_;
      }
      /**
       * <code>optional bool compact_metadata = 4;</code>
       */
      public Builder setCompactMetadata(boolean value) {
        bitField0_ |= 0x00000008;
        compactMetadata_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool compact_metadata = 4;</code>
       */
      public Builder clearCompactMetadata() {
        bitField0_ = (bitField0_ & ~0x00000008);
        compactMetadata_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.StmtExecute)
    }

    static {
      defaultInstance = new StmtExecute(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.StmtExecute)
  }

  public interface StmtExecuteOkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.StmtExecuteOk)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint64 rows_affected = 1;</code>
     */
    boolean hasRowsAffected();
    /**
     * <code>optional uint64 rows_affected = 1;</code>
     */
    long getRowsAffected();

    /**
     * <code>optional uint64 last_insert_id = 2;</code>
     */
    boolean hasLastInsertId();
    /**
     * <code>optional uint64 last_insert_id = 2;</code>
     */
    long getLastInsertId();
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.StmtExecuteOk}
   *
   * <pre>
   * statement executed successful
   * :param rows_affected: number of rows that were affected by the operation (such as inserted, deleted, updated etc)
   * :param last_insert_id: if the operation was an insert on a relational table with an AUTO_INCREMENT column, this will contain the value that was used
   * </pre>
   */
  public static final class StmtExecuteOk extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.StmtExecuteOk)
      StmtExecuteOkOrBuilder {
    // Use StmtExecuteOk.newBuilder() to construct.
    private StmtExecuteOk(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private StmtExecuteOk(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final StmtExecuteOk defaultInstance;
    public static StmtExecuteOk getDefaultInstance() {
      return defaultInstance;
    }

    public StmtExecuteOk getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private StmtExecuteOk(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              rowsAffected_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              lastInsertId_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_StmtExecuteOk_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_StmtExecuteOk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk.Builder.class);
    }

    public static com.google.protobuf.Parser<StmtExecuteOk> PARSER =
        new com.google.protobuf.AbstractParser<StmtExecuteOk>() {
      public StmtExecuteOk parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StmtExecuteOk(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<StmtExecuteOk> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ROWS_AFFECTED_FIELD_NUMBER = 1;
    private long rowsAffected_;
    /**
     * <code>optional uint64 rows_affected = 1;</code>
     */
    public boolean hasRowsAffected() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint64 rows_affected = 1;</code>
     */
    public long getRowsAffected() {
      return rowsAffected_;
    }

    public static final int LAST_INSERT_ID_FIELD_NUMBER = 2;
    private long lastInsertId_;
    /**
     * <code>optional uint64 last_insert_id = 2;</code>
     */
    public boolean hasLastInsertId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint64 last_insert_id = 2;</code>
     */
    public long getLastInsertId() {
      return lastInsertId_;
    }

    private void initFields() {
      rowsAffected_ = 0L;
      lastInsertId_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, rowsAffected_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, lastInsertId_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, rowsAffected_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, lastInsertId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.StmtExecuteOk}
     *
     * <pre>
     * statement executed successful
     * :param rows_affected: number of rows that were affected by the operation (such as inserted, deleted, updated etc)
     * :param last_insert_id: if the operation was an insert on a relational table with an AUTO_INCREMENT column, this will contain the value that was used
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.StmtExecuteOk)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_StmtExecuteOk_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_StmtExecuteOk_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        rowsAffected_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        lastInsertId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_StmtExecuteOk_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.rowsAffected_ = rowsAffected_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.lastInsertId_ = lastInsertId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk.getDefaultInstance()) return this;
        if (other.hasRowsAffected()) {
          setRowsAffected(other.getRowsAffected());
        }
        if (other.hasLastInsertId()) {
          setLastInsertId(other.getLastInsertId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.StmtExecuteOk) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long rowsAffected_ ;
      /**
       * <code>optional uint64 rows_affected = 1;</code>
       */
      public boolean hasRowsAffected() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 rows_affected = 1;</code>
       */
      public long getRowsAffected() {
        return rowsAffected_;
      }
      /**
       * <code>optional uint64 rows_affected = 1;</code>
       */
      public Builder setRowsAffected(long value) {
        bitField0_ |= 0x00000001;
        rowsAffected_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 rows_affected = 1;</code>
       */
      public Builder clearRowsAffected() {
        bitField0_ = (bitField0_ & ~0x00000001);
        rowsAffected_ = 0L;
        onChanged();
        return this;
      }

      private long lastInsertId_ ;
      /**
       * <code>optional uint64 last_insert_id = 2;</code>
       */
      public boolean hasLastInsertId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint64 last_insert_id = 2;</code>
       */
      public long getLastInsertId() {
        return lastInsertId_;
      }
      /**
       * <code>optional uint64 last_insert_id = 2;</code>
       */
      public Builder setLastInsertId(long value) {
        bitField0_ |= 0x00000002;
        lastInsertId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 last_insert_id = 2;</code>
       */
      public Builder clearLastInsertId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        lastInsertId_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.StmtExecuteOk)
    }

    static {
      defaultInstance = new StmtExecuteOk(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.StmtExecuteOk)
  }

  public interface PrepareStmtOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.PrepareStmt)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 stmt_id = 1;</code>
     */
    boolean hasStmtId();
    /**
     * <code>required uint32 stmt_id = 1;</code>
     */
    int getStmtId();

    /**
     * <code>required string stmt = 2;</code>
     */
    boolean hasStmt();
    /**
     * <code>required string stmt = 2;</code>
     */
    java.lang.String getStmt();
    /**
     * <code>required string stmt = 2;</code>
     */
    com.google.protobuf.ByteString
        getStmtBytes();
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.PrepareStmt}
   *
   * <pre>
   * prepare stmt for repeated execution
   * ``stmt_id`` has to be unique to the session and not refer to an active prepared statement
   * :param stmt_id: unique, not in use statement-id
   * :Returns: :protobuf:msg:`Mysqlx.Sql::PrepareStmtOk` or :protobuf:msg:`Mysqlx::Error`
   * </pre>
   */
  public static final class PrepareStmt extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.PrepareStmt)
      PrepareStmtOrBuilder {
    // Use PrepareStmt.newBuilder() to construct.
    private PrepareStmt(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PrepareStmt(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PrepareStmt defaultInstance;
    public static PrepareStmt getDefaultInstance() {
      return defaultInstance;
    }

    public PrepareStmt getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PrepareStmt(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              stmtId_ = input.readUInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              stmt_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PrepareStmt_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PrepareStmt_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt.Builder.class);
    }

    public static com.google.protobuf.Parser<PrepareStmt> PARSER =
        new com.google.protobuf.AbstractParser<PrepareStmt>() {
      public PrepareStmt parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PrepareStmt(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PrepareStmt> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int STMT_ID_FIELD_NUMBER = 1;
    private int stmtId_;
    /**
     * <code>required uint32 stmt_id = 1;</code>
     */
    public boolean hasStmtId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 stmt_id = 1;</code>
     */
    public int getStmtId() {
      return stmtId_;
    }

    public static final int STMT_FIELD_NUMBER = 2;
    private java.lang.Object stmt_;
    /**
     * <code>required string stmt = 2;</code>
     */
    public boolean hasStmt() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string stmt = 2;</code>
     */
    public java.lang.String getStmt() {
      java.lang.Object ref = stmt_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          stmt_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string stmt = 2;</code>
     */
    public com.google.protobuf.ByteString
        getStmtBytes() {
      java.lang.Object ref = stmt_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stmt_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      stmtId_ = 0;
      stmt_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStmtId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStmt()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, stmtId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getStmtBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, stmtId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getStmtBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.PrepareStmt}
     *
     * <pre>
     * prepare stmt for repeated execution
     * ``stmt_id`` has to be unique to the session and not refer to an active prepared statement
     * :param stmt_id: unique, not in use statement-id
     * :Returns: :protobuf:msg:`Mysqlx.Sql::PrepareStmtOk` or :protobuf:msg:`Mysqlx::Error`
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.PrepareStmt)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PrepareStmt_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PrepareStmt_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        stmtId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        stmt_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PrepareStmt_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.stmtId_ = stmtId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.stmt_ = stmt_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt.getDefaultInstance()) return this;
        if (other.hasStmtId()) {
          setStmtId(other.getStmtId());
        }
        if (other.hasStmt()) {
          bitField0_ |= 0x00000002;
          stmt_ = other.stmt_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasStmtId()) {
          
          return false;
        }
        if (!hasStmt()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmt) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int stmtId_ ;
      /**
       * <code>required uint32 stmt_id = 1;</code>
       */
      public boolean hasStmtId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 stmt_id = 1;</code>
       */
      public int getStmtId() {
        return stmtId_;
      }
      /**
       * <code>required uint32 stmt_id = 1;</code>
       */
      public Builder setStmtId(int value) {
        bitField0_ |= 0x00000001;
        stmtId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 stmt_id = 1;</code>
       */
      public Builder clearStmtId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stmtId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object stmt_ = "";
      /**
       * <code>required string stmt = 2;</code>
       */
      public boolean hasStmt() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string stmt = 2;</code>
       */
      public java.lang.String getStmt() {
        java.lang.Object ref = stmt_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stmt_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string stmt = 2;</code>
       */
      public com.google.protobuf.ByteString
          getStmtBytes() {
        java.lang.Object ref = stmt_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stmt_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string stmt = 2;</code>
       */
      public Builder setStmt(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        stmt_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string stmt = 2;</code>
       */
      public Builder clearStmt() {
        bitField0_ = (bitField0_ & ~0x00000002);
        stmt_ = getDefaultInstance().getStmt();
        onChanged();
        return this;
      }
      /**
       * <code>required string stmt = 2;</code>
       */
      public Builder setStmtBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        stmt_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.PrepareStmt)
    }

    static {
      defaultInstance = new PrepareStmt(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.PrepareStmt)
  }

  public interface PrepareStmtOkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.PrepareStmtOk)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.PrepareStmtOk}
   *
   * <pre>
   * result of a prepared statement
   * .. todo::
   *   check if we want to send back number of wildcards and their types
   *   all the time as ``COM_PREPARE_STMT-ok`` does
   * </pre>
   */
  public static final class PrepareStmtOk extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.PrepareStmtOk)
      PrepareStmtOkOrBuilder {
    // Use PrepareStmtOk.newBuilder() to construct.
    private PrepareStmtOk(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PrepareStmtOk(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PrepareStmtOk defaultInstance;
    public static PrepareStmtOk getDefaultInstance() {
      return defaultInstance;
    }

    public PrepareStmtOk getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PrepareStmtOk(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PrepareStmtOk_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PrepareStmtOk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk.Builder.class);
    }

    public static com.google.protobuf.Parser<PrepareStmtOk> PARSER =
        new com.google.protobuf.AbstractParser<PrepareStmtOk>() {
      public PrepareStmtOk parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PrepareStmtOk(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PrepareStmtOk> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.PrepareStmtOk}
     *
     * <pre>
     * result of a prepared statement
     * .. todo::
     *   check if we want to send back number of wildcards and their types
     *   all the time as ``COM_PREPARE_STMT-ok`` does
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.PrepareStmtOk)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PrepareStmtOk_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PrepareStmtOk_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PrepareStmtOk_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.PrepareStmtOk) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.PrepareStmtOk)
    }

    static {
      defaultInstance = new PrepareStmtOk(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.PrepareStmtOk)
  }

  public interface PreparedStmtExecuteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.PreparedStmtExecute)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 stmt_id = 1;</code>
     */
    boolean hasStmtId();
    /**
     * <code>required uint32 stmt_id = 1;</code>
     */
    int getStmtId();

    /**
     * <code>required uint32 cursor_id = 2;</code>
     */
    boolean hasCursorId();
    /**
     * <code>required uint32 cursor_id = 2;</code>
     */
    int getCursorId();

    /**
     * <code>optional .Mysqlx.Sql.Row row = 3;</code>
     */
    boolean hasRow();
    /**
     * <code>optional .Mysqlx.Sql.Row row = 3;</code>
     */
    com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row getRow();
    /**
     * <code>optional .Mysqlx.Sql.Row row = 3;</code>
     */
    com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder getRowOrBuilder();
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.PreparedStmtExecute}
   *
   * <pre>
   * execute a prepared statement
   * execute a prepared statement and create cursor on success
   * * ``cursor_id`` has to be unique to the session and not refer to an active cursor
   * * ``stmt_id`` has to refer to an active prepared statement
   * :param stmt_id: id of an active prepared statement
   * :param cursor_id: session unique, not in use id of the to be created cursor
   * :param row: values for the placeholders of the prepared statement ``stmt_id`` refers to
   * :Returns: :protobuf:msg:`Mysqlx.Sql::PreparedStmtExecuteOk` or :protobuf:msg:`Mysqlx::Error`
   * </pre>
   */
  public static final class PreparedStmtExecute extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.PreparedStmtExecute)
      PreparedStmtExecuteOrBuilder {
    // Use PreparedStmtExecute.newBuilder() to construct.
    private PreparedStmtExecute(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PreparedStmtExecute(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PreparedStmtExecute defaultInstance;
    public static PreparedStmtExecute getDefaultInstance() {
      return defaultInstance;
    }

    public PreparedStmtExecute getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PreparedStmtExecute(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              stmtId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              cursorId_ = input.readUInt32();
              break;
            }
            case 26: {
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = row_.toBuilder();
              }
              row_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(row_);
                row_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtExecute_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtExecute_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute.Builder.class);
    }

    public static com.google.protobuf.Parser<PreparedStmtExecute> PARSER =
        new com.google.protobuf.AbstractParser<PreparedStmtExecute>() {
      public PreparedStmtExecute parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PreparedStmtExecute(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PreparedStmtExecute> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int STMT_ID_FIELD_NUMBER = 1;
    private int stmtId_;
    /**
     * <code>required uint32 stmt_id = 1;</code>
     */
    public boolean hasStmtId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 stmt_id = 1;</code>
     */
    public int getStmtId() {
      return stmtId_;
    }

    public static final int CURSOR_ID_FIELD_NUMBER = 2;
    private int cursorId_;
    /**
     * <code>required uint32 cursor_id = 2;</code>
     */
    public boolean hasCursorId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 cursor_id = 2;</code>
     */
    public int getCursorId() {
      return cursorId_;
    }

    public static final int ROW_FIELD_NUMBER = 3;
    private com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row row_;
    /**
     * <code>optional .Mysqlx.Sql.Row row = 3;</code>
     */
    public boolean hasRow() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .Mysqlx.Sql.Row row = 3;</code>
     */
    public com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row getRow() {
      return row_;
    }
    /**
     * <code>optional .Mysqlx.Sql.Row row = 3;</code>
     */
    public com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder getRowOrBuilder() {
      return row_;
    }

    private void initFields() {
      stmtId_ = 0;
      cursorId_ = 0;
      row_ = com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStmtId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCursorId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasRow()) {
        if (!getRow().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, stmtId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, cursorId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, row_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, stmtId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, cursorId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, row_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.PreparedStmtExecute}
     *
     * <pre>
     * execute a prepared statement
     * execute a prepared statement and create cursor on success
     * * ``cursor_id`` has to be unique to the session and not refer to an active cursor
     * * ``stmt_id`` has to refer to an active prepared statement
     * :param stmt_id: id of an active prepared statement
     * :param cursor_id: session unique, not in use id of the to be created cursor
     * :param row: values for the placeholders of the prepared statement ``stmt_id`` refers to
     * :Returns: :protobuf:msg:`Mysqlx.Sql::PreparedStmtExecuteOk` or :protobuf:msg:`Mysqlx::Error`
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.PreparedStmtExecute)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtExecute_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtExecute_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRowFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        stmtId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        cursorId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (rowBuilder_ == null) {
          row_ = com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.getDefaultInstance();
        } else {
          rowBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtExecute_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.stmtId_ = stmtId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.cursorId_ = cursorId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (rowBuilder_ == null) {
          result.row_ = row_;
        } else {
          result.row_ = rowBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute.getDefaultInstance()) return this;
        if (other.hasStmtId()) {
          setStmtId(other.getStmtId());
        }
        if (other.hasCursorId()) {
          setCursorId(other.getCursorId());
        }
        if (other.hasRow()) {
          mergeRow(other.getRow());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasStmtId()) {
          
          return false;
        }
        if (!hasCursorId()) {
          
          return false;
        }
        if (hasRow()) {
          if (!getRow().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecute) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int stmtId_ ;
      /**
       * <code>required uint32 stmt_id = 1;</code>
       */
      public boolean hasStmtId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 stmt_id = 1;</code>
       */
      public int getStmtId() {
        return stmtId_;
      }
      /**
       * <code>required uint32 stmt_id = 1;</code>
       */
      public Builder setStmtId(int value) {
        bitField0_ |= 0x00000001;
        stmtId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 stmt_id = 1;</code>
       */
      public Builder clearStmtId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stmtId_ = 0;
        onChanged();
        return this;
      }

      private int cursorId_ ;
      /**
       * <code>required uint32 cursor_id = 2;</code>
       */
      public boolean hasCursorId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 cursor_id = 2;</code>
       */
      public int getCursorId() {
        return cursorId_;
      }
      /**
       * <code>required uint32 cursor_id = 2;</code>
       */
      public Builder setCursorId(int value) {
        bitField0_ |= 0x00000002;
        cursorId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 cursor_id = 2;</code>
       */
      public Builder clearCursorId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        cursorId_ = 0;
        onChanged();
        return this;
      }

      private com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row row_ = com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row, com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder> rowBuilder_;
      /**
       * <code>optional .Mysqlx.Sql.Row row = 3;</code>
       */
      public boolean hasRow() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .Mysqlx.Sql.Row row = 3;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row getRow() {
        if (rowBuilder_ == null) {
          return row_;
        } else {
          return rowBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Mysqlx.Sql.Row row = 3;</code>
       */
      public Builder setRow(com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row value) {
        if (rowBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          row_ = value;
          onChanged();
        } else {
          rowBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .Mysqlx.Sql.Row row = 3;</code>
       */
      public Builder setRow(
          com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder builderForValue) {
        if (rowBuilder_ == null) {
          row_ = builderForValue.build();
          onChanged();
        } else {
          rowBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .Mysqlx.Sql.Row row = 3;</code>
       */
      public Builder mergeRow(com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row value) {
        if (rowBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              row_ != com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.getDefaultInstance()) {
            row_ =
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.newBuilder(row_).mergeFrom(value).buildPartial();
          } else {
            row_ = value;
          }
          onChanged();
        } else {
          rowBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .Mysqlx.Sql.Row row = 3;</code>
       */
      public Builder clearRow() {
        if (rowBuilder_ == null) {
          row_ = com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.getDefaultInstance();
          onChanged();
        } else {
          rowBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .Mysqlx.Sql.Row row = 3;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder getRowBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getRowFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Mysqlx.Sql.Row row = 3;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder getRowOrBuilder() {
        if (rowBuilder_ != null) {
          return rowBuilder_.getMessageOrBuilder();
        } else {
          return row_;
        }
      }
      /**
       * <code>optional .Mysqlx.Sql.Row row = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row, com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder> 
          getRowFieldBuilder() {
        if (rowBuilder_ == null) {
          rowBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row, com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder>(
                  getRow(),
                  getParentForChildren(),
                  isClean());
          row_ = null;
        }
        return rowBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.PreparedStmtExecute)
    }

    static {
      defaultInstance = new PreparedStmtExecute(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.PreparedStmtExecute)
  }

  public interface PreparedStmtExecuteOkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.PreparedStmtExecuteOk)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint64 rows_affected = 1;</code>
     */
    boolean hasRowsAffected();
    /**
     * <code>optional uint64 rows_affected = 1;</code>
     */
    long getRowsAffected();

    /**
     * <code>optional uint64 last_insert_id = 2;</code>
     */
    boolean hasLastInsertId();
    /**
     * <code>optional uint64 last_insert_id = 2;</code>
     */
    long getLastInsertId();

    /**
     * <code>required bool cursor_created = 3;</code>
     */
    boolean hasCursorCreated();
    /**
     * <code>required bool cursor_created = 3;</code>
     */
    boolean getCursorCreated();
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.PreparedStmtExecuteOk}
   *
   * <pre>
   * prepared statement executed successful
   * :param rows_affected: number of rows that were affected by the operation (such as inserted, deleted, updated etc)
   * :param last_insert_id: if the operation was an insert on a relational table with an AUTO_INCREMENT column, this will contain the value that was used
   * :param cursor_created: ``true`` if a cursor was created by the last operation
   * </pre>
   */
  public static final class PreparedStmtExecuteOk extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.PreparedStmtExecuteOk)
      PreparedStmtExecuteOkOrBuilder {
    // Use PreparedStmtExecuteOk.newBuilder() to construct.
    private PreparedStmtExecuteOk(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PreparedStmtExecuteOk(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PreparedStmtExecuteOk defaultInstance;
    public static PreparedStmtExecuteOk getDefaultInstance() {
      return defaultInstance;
    }

    public PreparedStmtExecuteOk getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PreparedStmtExecuteOk(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              rowsAffected_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              lastInsertId_ = input.readUInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              cursorCreated_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtExecuteOk_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtExecuteOk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk.Builder.class);
    }

    public static com.google.protobuf.Parser<PreparedStmtExecuteOk> PARSER =
        new com.google.protobuf.AbstractParser<PreparedStmtExecuteOk>() {
      public PreparedStmtExecuteOk parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PreparedStmtExecuteOk(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PreparedStmtExecuteOk> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ROWS_AFFECTED_FIELD_NUMBER = 1;
    private long rowsAffected_;
    /**
     * <code>optional uint64 rows_affected = 1;</code>
     */
    public boolean hasRowsAffected() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint64 rows_affected = 1;</code>
     */
    public long getRowsAffected() {
      return rowsAffected_;
    }

    public static final int LAST_INSERT_ID_FIELD_NUMBER = 2;
    private long lastInsertId_;
    /**
     * <code>optional uint64 last_insert_id = 2;</code>
     */
    public boolean hasLastInsertId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint64 last_insert_id = 2;</code>
     */
    public long getLastInsertId() {
      return lastInsertId_;
    }

    public static final int CURSOR_CREATED_FIELD_NUMBER = 3;
    private boolean cursorCreated_;
    /**
     * <code>required bool cursor_created = 3;</code>
     */
    public boolean hasCursorCreated() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bool cursor_created = 3;</code>
     */
    public boolean getCursorCreated() {
      return cursorCreated_;
    }

    private void initFields() {
      rowsAffected_ = 0L;
      lastInsertId_ = 0L;
      cursorCreated_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCursorCreated()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, rowsAffected_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, lastInsertId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, cursorCreated_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, rowsAffected_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, lastInsertId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, cursorCreated_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.PreparedStmtExecuteOk}
     *
     * <pre>
     * prepared statement executed successful
     * :param rows_affected: number of rows that were affected by the operation (such as inserted, deleted, updated etc)
     * :param last_insert_id: if the operation was an insert on a relational table with an AUTO_INCREMENT column, this will contain the value that was used
     * :param cursor_created: ``true`` if a cursor was created by the last operation
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.PreparedStmtExecuteOk)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtExecuteOk_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtExecuteOk_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        rowsAffected_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        lastInsertId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        cursorCreated_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtExecuteOk_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.rowsAffected_ = rowsAffected_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.lastInsertId_ = lastInsertId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.cursorCreated_ = cursorCreated_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk.getDefaultInstance()) return this;
        if (other.hasRowsAffected()) {
          setRowsAffected(other.getRowsAffected());
        }
        if (other.hasLastInsertId()) {
          setLastInsertId(other.getLastInsertId());
        }
        if (other.hasCursorCreated()) {
          setCursorCreated(other.getCursorCreated());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCursorCreated()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtExecuteOk) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long rowsAffected_ ;
      /**
       * <code>optional uint64 rows_affected = 1;</code>
       */
      public boolean hasRowsAffected() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 rows_affected = 1;</code>
       */
      public long getRowsAffected() {
        return rowsAffected_;
      }
      /**
       * <code>optional uint64 rows_affected = 1;</code>
       */
      public Builder setRowsAffected(long value) {
        bitField0_ |= 0x00000001;
        rowsAffected_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 rows_affected = 1;</code>
       */
      public Builder clearRowsAffected() {
        bitField0_ = (bitField0_ & ~0x00000001);
        rowsAffected_ = 0L;
        onChanged();
        return this;
      }

      private long lastInsertId_ ;
      /**
       * <code>optional uint64 last_insert_id = 2;</code>
       */
      public boolean hasLastInsertId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint64 last_insert_id = 2;</code>
       */
      public long getLastInsertId() {
        return lastInsertId_;
      }
      /**
       * <code>optional uint64 last_insert_id = 2;</code>
       */
      public Builder setLastInsertId(long value) {
        bitField0_ |= 0x00000002;
        lastInsertId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 last_insert_id = 2;</code>
       */
      public Builder clearLastInsertId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        lastInsertId_ = 0L;
        onChanged();
        return this;
      }

      private boolean cursorCreated_ ;
      /**
       * <code>required bool cursor_created = 3;</code>
       */
      public boolean hasCursorCreated() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bool cursor_created = 3;</code>
       */
      public boolean getCursorCreated() {
        return cursorCreated_;
      }
      /**
       * <code>required bool cursor_created = 3;</code>
       */
      public Builder setCursorCreated(boolean value) {
        bitField0_ |= 0x00000004;
        cursorCreated_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool cursor_created = 3;</code>
       */
      public Builder clearCursorCreated() {
        bitField0_ = (bitField0_ & ~0x00000004);
        cursorCreated_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.PreparedStmtExecuteOk)
    }

    static {
      defaultInstance = new PreparedStmtExecuteOk(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.PreparedStmtExecuteOk)
  }

  public interface CursorsPollInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.CursorsPollInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 cursor_id = 1;</code>
     */
    boolean hasCursorId();
    /**
     * <code>required uint32 cursor_id = 1;</code>
     */
    int getCursorId();

    /**
     * <code>required .Mysqlx.Sql.CursorsPollInfo.Event event = 2;</code>
     */
    boolean hasEvent();
    /**
     * <code>required .Mysqlx.Sql.CursorsPollInfo.Event event = 2;</code>
     */
    com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Event getEvent();
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.CursorsPollInfo}
   *
   * <pre>
   * event to check for on/triggered by a cursor
   * ``cursor_id`` of a currently active cursor
   * </pre>
   */
  public static final class CursorsPollInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.CursorsPollInfo)
      CursorsPollInfoOrBuilder {
    // Use CursorsPollInfo.newBuilder() to construct.
    private CursorsPollInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CursorsPollInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CursorsPollInfo defaultInstance;
    public static CursorsPollInfo getDefaultInstance() {
      return defaultInstance;
    }

    public CursorsPollInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CursorsPollInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cursorId_ = input.readUInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Event value = com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Event.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                event_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorsPollInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorsPollInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<CursorsPollInfo> PARSER =
        new com.google.protobuf.AbstractParser<CursorsPollInfo>() {
      public CursorsPollInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CursorsPollInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CursorsPollInfo> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code Mysqlx.Sql.CursorsPollInfo.Event}
     */
    public enum Event
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>META_READY = 1;</code>
       */
      META_READY(0, 1),
      /**
       * <code>DATA_READY = 2;</code>
       */
      DATA_READY(1, 2),
      ;

      /**
       * <code>META_READY = 1;</code>
       */
      public static final int META_READY_VALUE = 1;
      /**
       * <code>DATA_READY = 2;</code>
       */
      public static final int DATA_READY_VALUE = 2;


      public final int getNumber() { return value; }

      public static Event valueOf(int value) {
        switch (value) {
          case 1: return META_READY;
          case 2: return DATA_READY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Event>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Event>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Event>() {
              public Event findValueByNumber(int number) {
                return Event.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.getDescriptor().getEnumTypes().get(0);
      }

      private static final Event[] VALUES = values();

      public static Event valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Event(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Mysqlx.Sql.CursorsPollInfo.Event)
    }

    private int bitField0_;
    public static final int CURSOR_ID_FIELD_NUMBER = 1;
    private int cursorId_;
    /**
     * <code>required uint32 cursor_id = 1;</code>
     */
    public boolean hasCursorId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 cursor_id = 1;</code>
     */
    public int getCursorId() {
      return cursorId_;
    }

    public static final int EVENT_FIELD_NUMBER = 2;
    private com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Event event_;
    /**
     * <code>required .Mysqlx.Sql.CursorsPollInfo.Event event = 2;</code>
     */
    public boolean hasEvent() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .Mysqlx.Sql.CursorsPollInfo.Event event = 2;</code>
     */
    public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Event getEvent() {
      return event_;
    }

    private void initFields() {
      cursorId_ = 0;
      event_ = com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Event.META_READY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCursorId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEvent()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, cursorId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, event_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, cursorId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, event_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.CursorsPollInfo}
     *
     * <pre>
     * event to check for on/triggered by a cursor
     * ``cursor_id`` of a currently active cursor
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.CursorsPollInfo)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorsPollInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorsPollInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cursorId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        event_ = com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Event.META_READY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorsPollInfo_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cursorId_ = cursorId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.event_ = event_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.getDefaultInstance()) return this;
        if (other.hasCursorId()) {
          setCursorId(other.getCursorId());
        }
        if (other.hasEvent()) {
          setEvent(other.getEvent());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCursorId()) {
          
          return false;
        }
        if (!hasEvent()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int cursorId_ ;
      /**
       * <code>required uint32 cursor_id = 1;</code>
       */
      public boolean hasCursorId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 cursor_id = 1;</code>
       */
      public int getCursorId() {
        return cursorId_;
      }
      /**
       * <code>required uint32 cursor_id = 1;</code>
       */
      public Builder setCursorId(int value) {
        bitField0_ |= 0x00000001;
        cursorId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 cursor_id = 1;</code>
       */
      public Builder clearCursorId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cursorId_ = 0;
        onChanged();
        return this;
      }

      private com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Event event_ = com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Event.META_READY;
      /**
       * <code>required .Mysqlx.Sql.CursorsPollInfo.Event event = 2;</code>
       */
      public boolean hasEvent() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .Mysqlx.Sql.CursorsPollInfo.Event event = 2;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Event getEvent() {
        return event_;
      }
      /**
       * <code>required .Mysqlx.Sql.CursorsPollInfo.Event event = 2;</code>
       */
      public Builder setEvent(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Event value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        event_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .Mysqlx.Sql.CursorsPollInfo.Event event = 2;</code>
       */
      public Builder clearEvent() {
        bitField0_ = (bitField0_ & ~0x00000002);
        event_ = com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Event.META_READY;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.CursorsPollInfo)
    }

    static {
      defaultInstance = new CursorsPollInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.CursorsPollInfo)
  }

  public interface CursorsPollOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.CursorsPoll)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
     */
    java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo> 
        getPollinfoList();
    /**
     * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
     */
    com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo getPollinfo(int index);
    /**
     * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
     */
    int getPollinfoCount();
    /**
     * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
     */
    java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfoOrBuilder> 
        getPollinfoOrBuilderList();
    /**
     * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
     */
    com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfoOrBuilder getPollinfoOrBuilder(
        int index);

    /**
     * <code>required uint32 timeout_ms = 2;</code>
     */
    boolean hasTimeoutMs();
    /**
     * <code>required uint32 timeout_ms = 2;</code>
     */
    int getTimeoutMs();
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.CursorsPoll}
   *
   * <pre>
   * check a set of cursor-ids for readiness
   * :param pollinfo: a set of :protobuf:msg:`Mysqlx.Sql::CursorsPollInfo` to check
   * :param timeout_ms: 0 = infinity, otherwise timeout in milli-seconds
   * :Returns: :protobuf:msg:`Mysqlx.Sql::CursorsPoll` on success, :protobuf:msg:`Mysqlx::Error` on error
   * </pre>
   */
  public static final class CursorsPoll extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.CursorsPoll)
      CursorsPollOrBuilder {
    // Use CursorsPoll.newBuilder() to construct.
    private CursorsPoll(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CursorsPoll(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CursorsPoll defaultInstance;
    public static CursorsPoll getDefaultInstance() {
      return defaultInstance;
    }

    public CursorsPoll getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CursorsPoll(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                pollinfo_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo>();
                mutable_bitField0_ |= 0x00000001;
              }
              pollinfo_.add(input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              timeoutMs_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          pollinfo_ = java.util.Collections.unmodifiableList(pollinfo_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorsPoll_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorsPoll_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll.Builder.class);
    }

    public static com.google.protobuf.Parser<CursorsPoll> PARSER =
        new com.google.protobuf.AbstractParser<CursorsPoll>() {
      public CursorsPoll parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CursorsPoll(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CursorsPoll> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int POLLINFO_FIELD_NUMBER = 1;
    private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo> pollinfo_;
    /**
     * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
     */
    public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo> getPollinfoList() {
      return pollinfo_;
    }
    /**
     * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
     */
    public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfoOrBuilder> 
        getPollinfoOrBuilderList() {
      return pollinfo_;
    }
    /**
     * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
     */
    public int getPollinfoCount() {
      return pollinfo_.size();
    }
    /**
     * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
     */
    public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo getPollinfo(int index) {
      return pollinfo_.get(index);
    }
    /**
     * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
     */
    public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfoOrBuilder getPollinfoOrBuilder(
        int index) {
      return pollinfo_.get(index);
    }

    public static final int TIMEOUT_MS_FIELD_NUMBER = 2;
    private int timeoutMs_;
    /**
     * <code>required uint32 timeout_ms = 2;</code>
     */
    public boolean hasTimeoutMs() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 timeout_ms = 2;</code>
     */
    public int getTimeoutMs() {
      return timeoutMs_;
    }

    private void initFields() {
      pollinfo_ = java.util.Collections.emptyList();
      timeoutMs_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTimeoutMs()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getPollinfoCount(); i++) {
        if (!getPollinfo(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < pollinfo_.size(); i++) {
        output.writeMessage(1, pollinfo_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(2, timeoutMs_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < pollinfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, pollinfo_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, timeoutMs_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.CursorsPoll}
     *
     * <pre>
     * check a set of cursor-ids for readiness
     * :param pollinfo: a set of :protobuf:msg:`Mysqlx.Sql::CursorsPollInfo` to check
     * :param timeout_ms: 0 = infinity, otherwise timeout in milli-seconds
     * :Returns: :protobuf:msg:`Mysqlx.Sql::CursorsPoll` on success, :protobuf:msg:`Mysqlx::Error` on error
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.CursorsPoll)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorsPoll_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorsPoll_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPollinfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (pollinfoBuilder_ == null) {
          pollinfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          pollinfoBuilder_.clear();
        }
        timeoutMs_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorsPoll_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (pollinfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            pollinfo_ = java.util.Collections.unmodifiableList(pollinfo_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.pollinfo_ = pollinfo_;
        } else {
          result.pollinfo_ = pollinfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.timeoutMs_ = timeoutMs_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll.getDefaultInstance()) return this;
        if (pollinfoBuilder_ == null) {
          if (!other.pollinfo_.isEmpty()) {
            if (pollinfo_.isEmpty()) {
              pollinfo_ = other.pollinfo_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePollinfoIsMutable();
              pollinfo_.addAll(other.pollinfo_);
            }
            onChanged();
          }
        } else {
          if (!other.pollinfo_.isEmpty()) {
            if (pollinfoBuilder_.isEmpty()) {
              pollinfoBuilder_.dispose();
              pollinfoBuilder_ = null;
              pollinfo_ = other.pollinfo_;
              bitField0_ = (bitField0_ & ~0x00000001);
              pollinfoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPollinfoFieldBuilder() : null;
            } else {
              pollinfoBuilder_.addAllMessages(other.pollinfo_);
            }
          }
        }
        if (other.hasTimeoutMs()) {
          setTimeoutMs(other.getTimeoutMs());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTimeoutMs()) {
          
          return false;
        }
        for (int i = 0; i < getPollinfoCount(); i++) {
          if (!getPollinfo(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPoll) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo> pollinfo_ =
        java.util.Collections.emptyList();
      private void ensurePollinfoIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          pollinfo_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo>(pollinfo_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfoOrBuilder> pollinfoBuilder_;

      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo> getPollinfoList() {
        if (pollinfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(pollinfo_);
        } else {
          return pollinfoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public int getPollinfoCount() {
        if (pollinfoBuilder_ == null) {
          return pollinfo_.size();
        } else {
          return pollinfoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo getPollinfo(int index) {
        if (pollinfoBuilder_ == null) {
          return pollinfo_.get(index);
        } else {
          return pollinfoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public Builder setPollinfo(
          int index, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo value) {
        if (pollinfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePollinfoIsMutable();
          pollinfo_.set(index, value);
          onChanged();
        } else {
          pollinfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public Builder setPollinfo(
          int index, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Builder builderForValue) {
        if (pollinfoBuilder_ == null) {
          ensurePollinfoIsMutable();
          pollinfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          pollinfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public Builder addPollinfo(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo value) {
        if (pollinfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePollinfoIsMutable();
          pollinfo_.add(value);
          onChanged();
        } else {
          pollinfoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public Builder addPollinfo(
          int index, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo value) {
        if (pollinfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePollinfoIsMutable();
          pollinfo_.add(index, value);
          onChanged();
        } else {
          pollinfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public Builder addPollinfo(
          com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Builder builderForValue) {
        if (pollinfoBuilder_ == null) {
          ensurePollinfoIsMutable();
          pollinfo_.add(builderForValue.build());
          onChanged();
        } else {
          pollinfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public Builder addPollinfo(
          int index, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Builder builderForValue) {
        if (pollinfoBuilder_ == null) {
          ensurePollinfoIsMutable();
          pollinfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          pollinfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public Builder addAllPollinfo(
          java.lang.Iterable<? extends com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo> values) {
        if (pollinfoBuilder_ == null) {
          ensurePollinfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, pollinfo_);
          onChanged();
        } else {
          pollinfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public Builder clearPollinfo() {
        if (pollinfoBuilder_ == null) {
          pollinfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          pollinfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public Builder removePollinfo(int index) {
        if (pollinfoBuilder_ == null) {
          ensurePollinfoIsMutable();
          pollinfo_.remove(index);
          onChanged();
        } else {
          pollinfoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Builder getPollinfoBuilder(
          int index) {
        return getPollinfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfoOrBuilder getPollinfoOrBuilder(
          int index) {
        if (pollinfoBuilder_ == null) {
          return pollinfo_.get(index);  } else {
          return pollinfoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfoOrBuilder> 
           getPollinfoOrBuilderList() {
        if (pollinfoBuilder_ != null) {
          return pollinfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(pollinfo_);
        }
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Builder addPollinfoBuilder() {
        return getPollinfoFieldBuilder().addBuilder(
            com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Builder addPollinfoBuilder(
          int index) {
        return getPollinfoFieldBuilder().addBuilder(
            index, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .Mysqlx.Sql.CursorsPollInfo pollinfo = 1;</code>
       */
      public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Builder> 
           getPollinfoBuilderList() {
        return getPollinfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfoOrBuilder> 
          getPollinfoFieldBuilder() {
        if (pollinfoBuilder_ == null) {
          pollinfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfo.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorsPollInfoOrBuilder>(
                  pollinfo_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          pollinfo_ = null;
        }
        return pollinfoBuilder_;
      }

      private int timeoutMs_ ;
      /**
       * <code>required uint32 timeout_ms = 2;</code>
       */
      public boolean hasTimeoutMs() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 timeout_ms = 2;</code>
       */
      public int getTimeoutMs() {
        return timeoutMs_;
      }
      /**
       * <code>required uint32 timeout_ms = 2;</code>
       */
      public Builder setTimeoutMs(int value) {
        bitField0_ |= 0x00000002;
        timeoutMs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 timeout_ms = 2;</code>
       */
      public Builder clearTimeoutMs() {
        bitField0_ = (bitField0_ & ~0x00000002);
        timeoutMs_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.CursorsPoll)
    }

    static {
      defaultInstance = new CursorsPoll(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.CursorsPoll)
  }

  public interface CursorFetchRowsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.CursorFetchRows)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 cursor_id = 1;</code>
     */
    boolean hasCursorId();
    /**
     * <code>required uint32 cursor_id = 1;</code>
     */
    int getCursorId();

    /**
     * <code>optional uint32 fetch_limit = 2;</code>
     */
    boolean hasFetchLimit();
    /**
     * <code>optional uint32 fetch_limit = 2;</code>
     */
    int getFetchLimit();

    /**
     * <code>optional bool compact_metadata = 3;</code>
     */
    boolean hasCompactMetadata();
    /**
     * <code>optional bool compact_metadata = 3;</code>
     */
    boolean getCompactMetadata();
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.CursorFetchRows}
   *
   * <pre>
   * fetch data from a cursor
   * .. uml::
   *   client -&gt; server: CursorFetchRows
   *   loop has more resultsets
   *   loop has more rows
   *   server --&gt; client: Row
   *   end
   *   alt has error
   *   server --&gt; client: Error
   *   else row limit reached
   *   server --&gt; client: CursorFetchSuspended
   *   else has more resultsets
   *   server --&gt; client: CursorFetchDoneMoreResultsets
   *   else
   *   server --&gt; client: CursorFetchDone
   *   end
   * :param cursor_id: cursor-id of an active cursor
   * :param fetch_limit: 0 = no limit
   * :Returns: a zero or more :protobuf:msg:`Mysqlx.Sql::Row` followed by
   *           * :protobuf:msg:`Mysqlx.Sql::CursorFetchDone` and cursor is inactive or
   *           * :protobuf:msg:`Mysqlx.Sql::CursorFetchSuspended` and cursor stays active or
   *           * :protobuf:msg:`Mysqlx.Sql::CursorFetchDoneMoreResultsets` and cursor stays active or
   *           * :protobuf:msg:`Mysqlx::Error` on error and cursor is inactive
   * </pre>
   */
  public static final class CursorFetchRows extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.CursorFetchRows)
      CursorFetchRowsOrBuilder {
    // Use CursorFetchRows.newBuilder() to construct.
    private CursorFetchRows(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CursorFetchRows(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CursorFetchRows defaultInstance;
    public static CursorFetchRows getDefaultInstance() {
      return defaultInstance;
    }

    public CursorFetchRows getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CursorFetchRows(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cursorId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              fetchLimit_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              compactMetadata_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchRows_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchRows_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows.Builder.class);
    }

    public static com.google.protobuf.Parser<CursorFetchRows> PARSER =
        new com.google.protobuf.AbstractParser<CursorFetchRows>() {
      public CursorFetchRows parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CursorFetchRows(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CursorFetchRows> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CURSOR_ID_FIELD_NUMBER = 1;
    private int cursorId_;
    /**
     * <code>required uint32 cursor_id = 1;</code>
     */
    public boolean hasCursorId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 cursor_id = 1;</code>
     */
    public int getCursorId() {
      return cursorId_;
    }

    public static final int FETCH_LIMIT_FIELD_NUMBER = 2;
    private int fetchLimit_;
    /**
     * <code>optional uint32 fetch_limit = 2;</code>
     */
    public boolean hasFetchLimit() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 fetch_limit = 2;</code>
     */
    public int getFetchLimit() {
      return fetchLimit_;
    }

    public static final int COMPACT_METADATA_FIELD_NUMBER = 3;
    private boolean compactMetadata_;
    /**
     * <code>optional bool compact_metadata = 3;</code>
     */
    public boolean hasCompactMetadata() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool compact_metadata = 3;</code>
     */
    public boolean getCompactMetadata() {
      return compactMetadata_;
    }

    private void initFields() {
      cursorId_ = 0;
      fetchLimit_ = 0;
      compactMetadata_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCursorId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, cursorId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, fetchLimit_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, compactMetadata_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, cursorId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, fetchLimit_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, compactMetadata_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.CursorFetchRows}
     *
     * <pre>
     * fetch data from a cursor
     * .. uml::
     *   client -&gt; server: CursorFetchRows
     *   loop has more resultsets
     *   loop has more rows
     *   server --&gt; client: Row
     *   end
     *   alt has error
     *   server --&gt; client: Error
     *   else row limit reached
     *   server --&gt; client: CursorFetchSuspended
     *   else has more resultsets
     *   server --&gt; client: CursorFetchDoneMoreResultsets
     *   else
     *   server --&gt; client: CursorFetchDone
     *   end
     * :param cursor_id: cursor-id of an active cursor
     * :param fetch_limit: 0 = no limit
     * :Returns: a zero or more :protobuf:msg:`Mysqlx.Sql::Row` followed by
     *           * :protobuf:msg:`Mysqlx.Sql::CursorFetchDone` and cursor is inactive or
     *           * :protobuf:msg:`Mysqlx.Sql::CursorFetchSuspended` and cursor stays active or
     *           * :protobuf:msg:`Mysqlx.Sql::CursorFetchDoneMoreResultsets` and cursor stays active or
     *           * :protobuf:msg:`Mysqlx::Error` on error and cursor is inactive
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.CursorFetchRows)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRowsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchRows_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchRows_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cursorId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        fetchLimit_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        compactMetadata_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchRows_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cursorId_ = cursorId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.fetchLimit_ = fetchLimit_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.compactMetadata_ = compactMetadata_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows.getDefaultInstance()) return this;
        if (other.hasCursorId()) {
          setCursorId(other.getCursorId());
        }
        if (other.hasFetchLimit()) {
          setFetchLimit(other.getFetchLimit());
        }
        if (other.hasCompactMetadata()) {
          setCompactMetadata(other.getCompactMetadata());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCursorId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchRows) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int cursorId_ ;
      /**
       * <code>required uint32 cursor_id = 1;</code>
       */
      public boolean hasCursorId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 cursor_id = 1;</code>
       */
      public int getCursorId() {
        return cursorId_;
      }
      /**
       * <code>required uint32 cursor_id = 1;</code>
       */
      public Builder setCursorId(int value) {
        bitField0_ |= 0x00000001;
        cursorId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 cursor_id = 1;</code>
       */
      public Builder clearCursorId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cursorId_ = 0;
        onChanged();
        return this;
      }

      private int fetchLimit_ ;
      /**
       * <code>optional uint32 fetch_limit = 2;</code>
       */
      public boolean hasFetchLimit() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 fetch_limit = 2;</code>
       */
      public int getFetchLimit() {
        return fetchLimit_;
      }
      /**
       * <code>optional uint32 fetch_limit = 2;</code>
       */
      public Builder setFetchLimit(int value) {
        bitField0_ |= 0x00000002;
        fetchLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 fetch_limit = 2;</code>
       */
      public Builder clearFetchLimit() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fetchLimit_ = 0;
        onChanged();
        return this;
      }

      private boolean compactMetadata_ ;
      /**
       * <code>optional bool compact_metadata = 3;</code>
       */
      public boolean hasCompactMetadata() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool compact_metadata = 3;</code>
       */
      public boolean getCompactMetadata() {
        return compactMetadata_;
      }
      /**
       * <code>optional bool compact_metadata = 3;</code>
       */
      public Builder setCompactMetadata(boolean value) {
        bitField0_ |= 0x00000004;
        compactMetadata_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool compact_metadata = 3;</code>
       */
      public Builder clearCompactMetadata() {
        bitField0_ = (bitField0_ & ~0x00000004);
        compactMetadata_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.CursorFetchRows)
    }

    static {
      defaultInstance = new CursorFetchRows(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.CursorFetchRows)
  }

  public interface CursorFetchDoneMoreResultsetsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.CursorFetchDoneMoreResultsets)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.CursorFetchDoneMoreResultsets}
   *
   * <pre>
   * resultset is finished, but more resultsets available
   * After ``CursorFetchDoneMoreResultsets`` all following
   * * :protobuf:msg:`Mysqlx.Sql::CursorFetchMetaData` and
   * * :protobuf:msg:`Mysqlx.Sql::CursorFetchRows` calls
   * will access the next resultset
   * client should send a :protobuf:msg:`Mysqlx.Sql::CursorFetchRows` to get the next resultset
   * </pre>
   */
  public static final class CursorFetchDoneMoreResultsets extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.CursorFetchDoneMoreResultsets)
      CursorFetchDoneMoreResultsetsOrBuilder {
    // Use CursorFetchDoneMoreResultsets.newBuilder() to construct.
    private CursorFetchDoneMoreResultsets(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CursorFetchDoneMoreResultsets(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CursorFetchDoneMoreResultsets defaultInstance;
    public static CursorFetchDoneMoreResultsets getDefaultInstance() {
      return defaultInstance;
    }

    public CursorFetchDoneMoreResultsets getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CursorFetchDoneMoreResultsets(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchDoneMoreResultsets_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchDoneMoreResultsets_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets.Builder.class);
    }

    public static com.google.protobuf.Parser<CursorFetchDoneMoreResultsets> PARSER =
        new com.google.protobuf.AbstractParser<CursorFetchDoneMoreResultsets>() {
      public CursorFetchDoneMoreResultsets parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CursorFetchDoneMoreResultsets(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CursorFetchDoneMoreResultsets> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.CursorFetchDoneMoreResultsets}
     *
     * <pre>
     * resultset is finished, but more resultsets available
     * After ``CursorFetchDoneMoreResultsets`` all following
     * * :protobuf:msg:`Mysqlx.Sql::CursorFetchMetaData` and
     * * :protobuf:msg:`Mysqlx.Sql::CursorFetchRows` calls
     * will access the next resultset
     * client should send a :protobuf:msg:`Mysqlx.Sql::CursorFetchRows` to get the next resultset
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.CursorFetchDoneMoreResultsets)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsetsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchDoneMoreResultsets_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchDoneMoreResultsets_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchDoneMoreResultsets_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneMoreResultsets) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.CursorFetchDoneMoreResultsets)
    }

    static {
      defaultInstance = new CursorFetchDoneMoreResultsets(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.CursorFetchDoneMoreResultsets)
  }

  public interface CursorFetchDoneOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.CursorFetchDone)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.CursorFetchDone}
   *
   * <pre>
   * resultset is finished
   * </pre>
   */
  public static final class CursorFetchDone extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.CursorFetchDone)
      CursorFetchDoneOrBuilder {
    // Use CursorFetchDone.newBuilder() to construct.
    private CursorFetchDone(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CursorFetchDone(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CursorFetchDone defaultInstance;
    public static CursorFetchDone getDefaultInstance() {
      return defaultInstance;
    }

    public CursorFetchDone getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CursorFetchDone(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchDone_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchDone_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone.Builder.class);
    }

    public static com.google.protobuf.Parser<CursorFetchDone> PARSER =
        new com.google.protobuf.AbstractParser<CursorFetchDone>() {
      public CursorFetchDone parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CursorFetchDone(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CursorFetchDone> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.CursorFetchDone}
     *
     * <pre>
     * resultset is finished
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.CursorFetchDone)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDoneOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchDone_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchDone_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchDone_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchDone) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.CursorFetchDone)
    }

    static {
      defaultInstance = new CursorFetchDone(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.CursorFetchDone)
  }

  public interface CursorFetchSuspendedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.CursorFetchSuspended)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.CursorFetchSuspended}
   *
   * <pre>
   * fetch limit reached, more rows available
   * client should send a :protobuf:msg:`Mysqlx.Sql::CursorFetchRows` to get more data
   * </pre>
   */
  public static final class CursorFetchSuspended extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.CursorFetchSuspended)
      CursorFetchSuspendedOrBuilder {
    // Use CursorFetchSuspended.newBuilder() to construct.
    private CursorFetchSuspended(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CursorFetchSuspended(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CursorFetchSuspended defaultInstance;
    public static CursorFetchSuspended getDefaultInstance() {
      return defaultInstance;
    }

    public CursorFetchSuspended getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CursorFetchSuspended(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchSuspended_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchSuspended_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended.Builder.class);
    }

    public static com.google.protobuf.Parser<CursorFetchSuspended> PARSER =
        new com.google.protobuf.AbstractParser<CursorFetchSuspended>() {
      public CursorFetchSuspended parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CursorFetchSuspended(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CursorFetchSuspended> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.CursorFetchSuspended}
     *
     * <pre>
     * fetch limit reached, more rows available
     * client should send a :protobuf:msg:`Mysqlx.Sql::CursorFetchRows` to get more data
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.CursorFetchSuspended)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspendedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchSuspended_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchSuspended_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchSuspended_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchSuspended) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.CursorFetchSuspended)
    }

    static {
      defaultInstance = new CursorFetchSuspended(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.CursorFetchSuspended)
  }

  public interface CursorFetchMetaDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.CursorFetchMetaData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 cursor_id = 1;</code>
     */
    boolean hasCursorId();
    /**
     * <code>required uint32 cursor_id = 1;</code>
     */
    int getCursorId();
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.CursorFetchMetaData}
   *
   * <pre>
   * fetch the resultset meta data
   * .. uml::
   *   client -&gt; server: CursorFetchMetaData
   *   loop
   *   server --&gt; client: ColumnMetaData
   *   end
   *   opt
   *   server --&gt; client: CursorFetchDone
   *   else
   *   server --&gt; client: Error
   *   end
   * :param cursor_id: cursor-id of an active cursor
   * :Returns: zero or more :protobuf:msg:`Mysqlx.Sql::ColumnMetaData` followed by
   *           * :protobuf:msg:`Mysqlx.Sql::CursorFetchDone` or
   *           * :protobuf:msg:`Mysqlx::Error`
   * </pre>
   */
  public static final class CursorFetchMetaData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.CursorFetchMetaData)
      CursorFetchMetaDataOrBuilder {
    // Use CursorFetchMetaData.newBuilder() to construct.
    private CursorFetchMetaData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CursorFetchMetaData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CursorFetchMetaData defaultInstance;
    public static CursorFetchMetaData getDefaultInstance() {
      return defaultInstance;
    }

    public CursorFetchMetaData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CursorFetchMetaData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cursorId_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchMetaData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchMetaData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData.Builder.class);
    }

    public static com.google.protobuf.Parser<CursorFetchMetaData> PARSER =
        new com.google.protobuf.AbstractParser<CursorFetchMetaData>() {
      public CursorFetchMetaData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CursorFetchMetaData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CursorFetchMetaData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CURSOR_ID_FIELD_NUMBER = 1;
    private int cursorId_;
    /**
     * <code>required uint32 cursor_id = 1;</code>
     */
    public boolean hasCursorId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 cursor_id = 1;</code>
     */
    public int getCursorId() {
      return cursorId_;
    }

    private void initFields() {
      cursorId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCursorId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, cursorId_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, cursorId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.CursorFetchMetaData}
     *
     * <pre>
     * fetch the resultset meta data
     * .. uml::
     *   client -&gt; server: CursorFetchMetaData
     *   loop
     *   server --&gt; client: ColumnMetaData
     *   end
     *   opt
     *   server --&gt; client: CursorFetchDone
     *   else
     *   server --&gt; client: Error
     *   end
     * :param cursor_id: cursor-id of an active cursor
     * :Returns: zero or more :protobuf:msg:`Mysqlx.Sql::ColumnMetaData` followed by
     *           * :protobuf:msg:`Mysqlx.Sql::CursorFetchDone` or
     *           * :protobuf:msg:`Mysqlx::Error`
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.CursorFetchMetaData)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchMetaData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchMetaData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cursorId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorFetchMetaData_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cursorId_ = cursorId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData.getDefaultInstance()) return this;
        if (other.hasCursorId()) {
          setCursorId(other.getCursorId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCursorId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorFetchMetaData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int cursorId_ ;
      /**
       * <code>required uint32 cursor_id = 1;</code>
       */
      public boolean hasCursorId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 cursor_id = 1;</code>
       */
      public int getCursorId() {
        return cursorId_;
      }
      /**
       * <code>required uint32 cursor_id = 1;</code>
       */
      public Builder setCursorId(int value) {
        bitField0_ |= 0x00000001;
        cursorId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 cursor_id = 1;</code>
       */
      public Builder clearCursorId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cursorId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.CursorFetchMetaData)
    }

    static {
      defaultInstance = new CursorFetchMetaData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.CursorFetchMetaData)
  }

  public interface ColumnMetaDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.ColumnMetaData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .Mysqlx.Sql.ColumnMetaData.FieldType type = 1;</code>
     *
     * <pre>
     * datatype of the field in a row
     * </pre>
     */
    boolean hasType();
    /**
     * <code>required .Mysqlx.Sql.ColumnMetaData.FieldType type = 1;</code>
     *
     * <pre>
     * datatype of the field in a row
     * </pre>
     */
    com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.FieldType getType();

    /**
     * <code>optional bytes name = 2;</code>
     */
    boolean hasName();
    /**
     * <code>optional bytes name = 2;</code>
     */
    com.google.protobuf.ByteString getName();

    /**
     * <code>optional bytes original_name = 3;</code>
     */
    boolean hasOriginalName();
    /**
     * <code>optional bytes original_name = 3;</code>
     */
    com.google.protobuf.ByteString getOriginalName();

    /**
     * <code>optional bytes table = 4;</code>
     */
    boolean hasTable();
    /**
     * <code>optional bytes table = 4;</code>
     */
    com.google.protobuf.ByteString getTable();

    /**
     * <code>optional bytes original_table = 5;</code>
     */
    boolean hasOriginalTable();
    /**
     * <code>optional bytes original_table = 5;</code>
     */
    com.google.protobuf.ByteString getOriginalTable();

    /**
     * <code>optional bytes schema = 6;</code>
     */
    boolean hasSchema();
    /**
     * <code>optional bytes schema = 6;</code>
     */
    com.google.protobuf.ByteString getSchema();

    /**
     * <code>optional bytes catalog = 7;</code>
     */
    boolean hasCatalog();
    /**
     * <code>optional bytes catalog = 7;</code>
     */
    com.google.protobuf.ByteString getCatalog();

    /**
     * <code>optional string charset = 8;</code>
     */
    boolean hasCharset();
    /**
     * <code>optional string charset = 8;</code>
     */
    java.lang.String getCharset();
    /**
     * <code>optional string charset = 8;</code>
     */
    com.google.protobuf.ByteString
        getCharsetBytes();

    /**
     * <code>optional uint32 fractional_digits = 9;</code>
     */
    boolean hasFractionalDigits();
    /**
     * <code>optional uint32 fractional_digits = 9;</code>
     */
    int getFractionalDigits();

    /**
     * <code>optional uint32 length = 10;</code>
     */
    boolean hasLength();
    /**
     * <code>optional uint32 length = 10;</code>
     */
    int getLength();

    /**
     * <code>optional uint32 flags = 11;</code>
     */
    boolean hasFlags();
    /**
     * <code>optional uint32 flags = 11;</code>
     */
    int getFlags();

    /**
     * <code>optional uint32 content_type = 12;</code>
     */
    boolean hasContentType();
    /**
     * <code>optional uint32 content_type = 12;</code>
     */
    int getContentType();
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.ColumnMetaData}
   *
   * <pre>
   * meta data of a Column
   * .. note:: the encoding used for the different ``bytes`` fields in the meta data is externally
   *   controlled.
   *   .. seealso:: https://dev.mysql.com/doc/refman/5.0/en/charset-connection.html
   * :param type:
   *   .. table:: Expected Datatype of Mysqlx.Sql.Row per SQL Type for non NULL values
   *     ================= ============ =============================== ======= ========== ====== ========
   *     SQL Type          .type        Mysqlx.Datatypes.               .length .frac_dig  .flags .charset
   *     ================= ============ =============================== ======= ========== ====== ========
   *     TINY              SINT         Scalar.Type.V_SINT              x
   *     TINY UNSIGNED     UINT         Scalar.Type.V_UINT              x                  x
   *     SHORT             SINT         Scalar.Type.V_SINT              x
   *     SHORT UNSIGNED    UINT         Scalar.Type.V_UINT              x                  x
   *     INT24             SINT         Scalar.Type.V_SINT              x
   *     INT24 UNSIGNED    UINT         Scalar.Type.V_UINT              x                  x
   *     INT               SINT         Scalar.Type.V_SINT              x
   *     INT UNSIGNED      UINT         Scalar.Type.V_UINT              x                  x
   *     LONGLONG          SINT         Scalar.Type.V_SINT              x
   *     LONGLONG UNSIGNED UINT         Scalar.Type.V_UINT              x                  x
   *     DOUBLE            DOUBLE       Scalar.Type.V_DOUBLE            x       x          x
   *     FLOAT             FLOAT        Scalar.Type.V_FLOAT             x       x          x
   *     DECIMAL           DECIMAL      Scalar.Type.V_OCTETS            x       x          x
   *     VARCHAR,CHAR,...  BYTES        Scalar.Type.V_OCTETS            x                  x      x
   *     GEOMETRY          BYTES        Scalar.Type.V_OCTETS
   *     TIME              TIME         Scalar.Type.V_OCTETS            x
   *     DATE              DATETIME     Scalar.Type.V_OCTETS            x
   *     DATETIME          DATETIME     Scalar.Type.V_OCTETS            x
   *     YEAR              UINT         Scalar.Type.V_UINT              x                  x
   *     TIMESTAMP         DATETIME     Scalar.Type.V_OCTETS            x
   *     SET               SET          Scalar.Type.V_OCTETS                                      x
   *     ENUM              ENUM         Scalar.Type.V_OCTETS                                      x
   *     NULL              BYTES        Scalar.Type.V_OCTETS
   *     BIT               BIT          Scalar.Type.V_UINT              x
   *     ================= ============ =============================== ======= ========== ====== ========
   *   .. note:: the SQL "NULL" value is sent as Scalar.Type.V_NULL in the Mysqlx.Sql.Row
   *   SINT
   *     uses the variable integer encoding from protobuf via :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_signed_int``
   *     ``.length``
   *       maximum number of displayable decimal digits (including minus sign) of the type
   *       .. note::
   *         valid range is 0-255, but usually you'll see 1-20
   *         =============== ==
   *         SQL Type        max digits per type
   *         =============== ==
   *         TINY SIGNED      4
   *         SHORT SIGNED     6
   *         INT24 SIGNED     8
   *         INT SIGNED      11
   *         LONGLONG SIGNED 20
   *         =============== ==
   *       .. seealso:: definition of ``M`` in https://dev.mysql.com/doc/refman/5.5/en/numeric-type-overview.html
   *   UINT
   *     uses the variable integer encoding from protobuf via :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_unsigned_int``
   *     ``.flags &amp; 1`` (zerofill)
   *       the client has to left pad with 0's up to .length
   *     ``.length``
   *       maximum number of displayable decimal digits of the type
   *       .. note::
   *         valid range is 0-255, but usually you'll see 1-20
   *         ================= ==
   *         SQL Type          max digits per type
   *         ================= ==
   *         TINY UNSIGNED      3
   *         SHORT UNSIGNED     5
   *         INT24 UNSIGNED     8
   *         INT UNSIGNED      10
   *         LONGLONG UNSIGNED 20
   *         ================= ==
   *       .. seealso:: definition of ``M`` in https://dev.mysql.com/doc/refman/5.5/en/numeric-type-overview.html
   *   BIT
   *     uses the variable integer encoding from protobuf via :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_unsigned_int``
   *     ``.length``
   *       maximum number of displayable binary digits
   *     .. note:: valid range for M of the ``BIT`` type is 1 - 64
   *     .. seealso:: https://dev.mysql.com/doc/refman/5.5/en/numeric-type-overview.html
   *   DOUBLE
   *     uses protobufs native type for "double" (:protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_double``)
   *     ``.length``
   *       maximum number of displayable decimal digits (including the decimal point and ``.fractional_digits``)
   *     ``.fractional_digits``
   *       maximum number of displayable decimal digits following the decimal point
   *   FLOAT
   *     uses protobufs native type for "float" (:protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_float``)
   *     ``.length``
   *       maximum number of displayable decimal digits (including the decimal point and ``.fractional_digits``)
   *     ``.fractional_digits``
   *       maximum number of displayable decimal digits following the decimal point
   *   DECIMAL
   *     uses :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_opaque`` which contains two varints:
   *     * the integral part
   *     * the fractional part
   *     The fractional part is scaled by ``.fractional_digits``::
   *       integral_part     = 123
   *       fractional_part   =   3
   *       fractional_digits =   6
   *       decimal = 126.000003
   *     ``.length``
   *       maximum number of displayable decimal digits (*excluding* the decimal point and sign, but including ``.fractional_digits``)
   *       .. note:: should be in the range of 1 - 65
   *     ``.fractional_digits``
   *       is the decimal digits to display out of length
   *       .. note:: should be in the range of 0 - 30
   *   BYTES, ENUM
   *     uses :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_opaque`` for the data and sets ``.charset``
   *     ``.length``
   *       the maximum length of characters of the underlying type
   *     ``.flags &amp; 1`` (rightpad)
   *       if the length of the field is less than ``.length``, the receiver is
   *       supposed to add padding characters to the right end of the string.
   *       If the ``.charset`` is "binary", the padding character is ``0x00``,
   *       otherwise it is a space character as defined by that character set.
   *     ============= ======= ======== =======
   *     SQL Type      .length .charset .flags
   *     ============= ======= ======== =======
   *     TINYBLOB      256     binary
   *     BLOB          65535   binary
   *     VARCHAR(32)   32      utf8
   *     VARBINARY(32) 32      utf8_bin
   *     BINARY(32)    32      binary   rightpad
   *     CHAR(32)      32      utf8     rightpad
   *     ============= ======= ======== =======
   *     BYTES is used for all opaque byte strings that may have a charset
   *     * TINYBLOB, BLOB, MEDIUMBLOB, LONGBLOB
   *     * TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT
   *     * VARCHAR, VARBINARY
   *     * CHAR, BINARY
   *     * ENUM
   *     The SQL Type "NULL" is send as empty string if "not-NULL".
   *   DATETIME
   *     uses :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_opaque`` which contains a series of unsigned varints:
   *     ======== ==============================================================
   *     count    positions
   *     ======== ==============================================================
   *     3        year, month, day-of-month
   *     6        year, month, day-of-month, hours, minutes, seconds
   *     7        year, month, day-of-month, hours, minutes, seconds, subseconds
   *     ======== ==============================================================
   *   TIME
   *     uses :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_opaque`` which contains a series of unsigned varints:
   *     ======== ==============================================================
   *     count    positions
   *     ======== ==============================================================
   *     5        is_negative, days, hours, minutes, seconds
   *     6        is_negative, days, hours, minutes, seconds, subseconds
   *     ======== ==============================================================
   *   SET
   *     uses :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_opaque`` and contains a series of protobuf "bytes"::
   *       length $octets
   *       ^^       ^^-- string
   *       |
   *       +-- length of the following $octets
   *     If there is more data in the :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_opaque``, it is again a "length $octets"
   *     for the next string.
   * :param name: name of the column
   * :param original_name: name of the column before an alias was applied
   * :param table: name of the table the column orginates from
   * :param original_table: name of the table the column orginates from before an alias was applied
   * :param schema: schema the column originates from
   * :param catalog:
   *   catalog the schema originates from
   *   .. note::
   *     as there is current no support for catalogs in MySQL, don't expect this field to be set.
   *     In the MySQL C/S protocol the field had the value ``def`` all the time.
   * :param fractional_digits: displayed factional decimal digits for floating point and fixed point numbers
   * :param length: maximum count of displayable characters of .type
   * :param flags:
   *   ``.type`` specific flags
   *   ======= ====== ===========
   *   type    value  description
   *   ======= ====== ===========
   *   UINT    0x0001 zerofill
   *   DOUBLE  0x0001 unsigned
   *   FLOAT   0x0001 unsigned
   *   DECIMAL 0x0001 unsigned
   *   BYTES   0x0001 rightpad
   *   ======= ====== ===========
   *   default: 0
   * :param content_type:
   *   a hint about the higher-level encoding of a BYTES field
   *   ====== ====== ===========
   *   type   value  description
   *   ====== ====== ===========
   *   BYTES  0x0001 GEOMETRY (WKB encoding)
   *   BYTES  0x0002 JSON (text encoding)
   *   BYTES  0x0003 XML (text encoding)
   *   ====== ====== ===========
   *   .. note::
   *     this list isn't comprehensive. As guideline: the field's value is expected
   *     to pass a validator check on client and server if this field is set.
   *     If the server adds more internal datatypes that rely on BLOB storage
   *     like image manipulation, seeking into complex types in BLOBs, ... more
   *     types will be added.
   * </pre>
   */
  public static final class ColumnMetaData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.ColumnMetaData)
      ColumnMetaDataOrBuilder {
    // Use ColumnMetaData.newBuilder() to construct.
    private ColumnMetaData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ColumnMetaData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ColumnMetaData defaultInstance;
    public static ColumnMetaData getDefaultInstance() {
      return defaultInstance;
    }

    public ColumnMetaData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ColumnMetaData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.FieldType value = com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.FieldType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              name_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              originalName_ = input.readBytes();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              table_ = input.readBytes();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              originalTable_ = input.readBytes();
              break;
            }
            case 50: {
              bitField0_ |= 0x00000020;
              schema_ = input.readBytes();
              break;
            }
            case 58: {
              bitField0_ |= 0x00000040;
              catalog_ = input.readBytes();
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000080;
              charset_ = bs;
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              fractionalDigits_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              length_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              flags_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              contentType_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_ColumnMetaData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_ColumnMetaData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.Builder.class);
    }

    public static com.google.protobuf.Parser<ColumnMetaData> PARSER =
        new com.google.protobuf.AbstractParser<ColumnMetaData>() {
      public ColumnMetaData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ColumnMetaData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ColumnMetaData> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code Mysqlx.Sql.ColumnMetaData.FieldType}
     */
    public enum FieldType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SINT = 1;</code>
       */
      SINT(0, 1),
      /**
       * <code>UINT = 2;</code>
       */
      UINT(1, 2),
      /**
       * <code>DOUBLE = 5;</code>
       */
      DOUBLE(2, 5),
      /**
       * <code>FLOAT = 6;</code>
       */
      FLOAT(3, 6),
      /**
       * <code>BYTES = 7;</code>
       */
      BYTES(4, 7),
      /**
       * <code>TIME = 10;</code>
       */
      TIME(5, 10),
      /**
       * <code>DATETIME = 12;</code>
       */
      DATETIME(6, 12),
      /**
       * <code>SET = 15;</code>
       */
      SET(7, 15),
      /**
       * <code>ENUM = 16;</code>
       */
      ENUM(8, 16),
      /**
       * <code>BIT = 17;</code>
       */
      BIT(9, 17),
      /**
       * <code>DECIMAL = 18;</code>
       */
      DECIMAL(10, 18),
      ;

      /**
       * <code>SINT = 1;</code>
       */
      public static final int SINT_VALUE = 1;
      /**
       * <code>UINT = 2;</code>
       */
      public static final int UINT_VALUE = 2;
      /**
       * <code>DOUBLE = 5;</code>
       */
      public static final int DOUBLE_VALUE = 5;
      /**
       * <code>FLOAT = 6;</code>
       */
      public static final int FLOAT_VALUE = 6;
      /**
       * <code>BYTES = 7;</code>
       */
      public static final int BYTES_VALUE = 7;
      /**
       * <code>TIME = 10;</code>
       */
      public static final int TIME_VALUE = 10;
      /**
       * <code>DATETIME = 12;</code>
       */
      public static final int DATETIME_VALUE = 12;
      /**
       * <code>SET = 15;</code>
       */
      public static final int SET_VALUE = 15;
      /**
       * <code>ENUM = 16;</code>
       */
      public static final int ENUM_VALUE = 16;
      /**
       * <code>BIT = 17;</code>
       */
      public static final int BIT_VALUE = 17;
      /**
       * <code>DECIMAL = 18;</code>
       */
      public static final int DECIMAL_VALUE = 18;


      public final int getNumber() { return value; }

      public static FieldType valueOf(int value) {
        switch (value) {
          case 1: return SINT;
          case 2: return UINT;
          case 5: return DOUBLE;
          case 6: return FLOAT;
          case 7: return BYTES;
          case 10: return TIME;
          case 12: return DATETIME;
          case 15: return SET;
          case 16: return ENUM;
          case 17: return BIT;
          case 18: return DECIMAL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FieldType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<FieldType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FieldType>() {
              public FieldType findValueByNumber(int number) {
                return FieldType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.getDescriptor().getEnumTypes().get(0);
      }

      private static final FieldType[] VALUES = values();

      public static FieldType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private FieldType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Mysqlx.Sql.ColumnMetaData.FieldType)
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.FieldType type_;
    /**
     * <code>required .Mysqlx.Sql.ColumnMetaData.FieldType type = 1;</code>
     *
     * <pre>
     * datatype of the field in a row
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .Mysqlx.Sql.ColumnMetaData.FieldType type = 1;</code>
     *
     * <pre>
     * datatype of the field in a row
     * </pre>
     */
    public com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.FieldType getType() {
      return type_;
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString name_;
    /**
     * <code>optional bytes name = 2;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bytes name = 2;</code>
     */
    public com.google.protobuf.ByteString getName() {
      return name_;
    }

    public static final int ORIGINAL_NAME_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString originalName_;
    /**
     * <code>optional bytes original_name = 3;</code>
     */
    public boolean hasOriginalName() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bytes original_name = 3;</code>
     */
    public com.google.protobuf.ByteString getOriginalName() {
      return originalName_;
    }

    public static final int TABLE_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString table_;
    /**
     * <code>optional bytes table = 4;</code>
     */
    public boolean hasTable() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes table = 4;</code>
     */
    public com.google.protobuf.ByteString getTable() {
      return table_;
    }

    public static final int ORIGINAL_TABLE_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString originalTable_;
    /**
     * <code>optional bytes original_table = 5;</code>
     */
    public boolean hasOriginalTable() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bytes original_table = 5;</code>
     */
    public com.google.protobuf.ByteString getOriginalTable() {
      return originalTable_;
    }

    public static final int SCHEMA_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString schema_;
    /**
     * <code>optional bytes schema = 6;</code>
     */
    public boolean hasSchema() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bytes schema = 6;</code>
     */
    public com.google.protobuf.ByteString getSchema() {
      return schema_;
    }

    public static final int CATALOG_FIELD_NUMBER = 7;
    private com.google.protobuf.ByteString catalog_;
    /**
     * <code>optional bytes catalog = 7;</code>
     */
    public boolean hasCatalog() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bytes catalog = 7;</code>
     */
    public com.google.protobuf.ByteString getCatalog() {
      return catalog_;
    }

    public static final int CHARSET_FIELD_NUMBER = 8;
    private java.lang.Object charset_;
    /**
     * <code>optional string charset = 8;</code>
     */
    public boolean hasCharset() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional string charset = 8;</code>
     */
    public java.lang.String getCharset() {
      java.lang.Object ref = charset_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          charset_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string charset = 8;</code>
     */
    public com.google.protobuf.ByteString
        getCharsetBytes() {
      java.lang.Object ref = charset_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        charset_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FRACTIONAL_DIGITS_FIELD_NUMBER = 9;
    private int fractionalDigits_;
    /**
     * <code>optional uint32 fractional_digits = 9;</code>
     */
    public boolean hasFractionalDigits() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 fractional_digits = 9;</code>
     */
    public int getFractionalDigits() {
      return fractionalDigits_;
    }

    public static final int LENGTH_FIELD_NUMBER = 10;
    private int length_;
    /**
     * <code>optional uint32 length = 10;</code>
     */
    public boolean hasLength() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 length = 10;</code>
     */
    public int getLength() {
      return length_;
    }

    public static final int FLAGS_FIELD_NUMBER = 11;
    private int flags_;
    /**
     * <code>optional uint32 flags = 11;</code>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 flags = 11;</code>
     */
    public int getFlags() {
      return flags_;
    }

    public static final int CONTENT_TYPE_FIELD_NUMBER = 12;
    private int contentType_;
    /**
     * <code>optional uint32 content_type = 12;</code>
     */
    public boolean hasContentType() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 content_type = 12;</code>
     */
    public int getContentType() {
      return contentType_;
    }

    private void initFields() {
      type_ = com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.FieldType.SINT;
      name_ = com.google.protobuf.ByteString.EMPTY;
      originalName_ = com.google.protobuf.ByteString.EMPTY;
      table_ = com.google.protobuf.ByteString.EMPTY;
      originalTable_ = com.google.protobuf.ByteString.EMPTY;
      schema_ = com.google.protobuf.ByteString.EMPTY;
      catalog_ = com.google.protobuf.ByteString.EMPTY;
      charset_ = "";
      fractionalDigits_ = 0;
      length_ = 0;
      flags_ = 0;
      contentType_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, name_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, originalName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, table_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, originalTable_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, schema_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(7, catalog_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(8, getCharsetBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, fractionalDigits_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, length_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, flags_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, contentType_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, name_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, originalName_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, table_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, originalTable_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, schema_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, catalog_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getCharsetBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, fractionalDigits_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, length_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, flags_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, contentType_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.ColumnMetaData}
     *
     * <pre>
     * meta data of a Column
     * .. note:: the encoding used for the different ``bytes`` fields in the meta data is externally
     *   controlled.
     *   .. seealso:: https://dev.mysql.com/doc/refman/5.0/en/charset-connection.html
     * :param type:
     *   .. table:: Expected Datatype of Mysqlx.Sql.Row per SQL Type for non NULL values
     *     ================= ============ =============================== ======= ========== ====== ========
     *     SQL Type          .type        Mysqlx.Datatypes.               .length .frac_dig  .flags .charset
     *     ================= ============ =============================== ======= ========== ====== ========
     *     TINY              SINT         Scalar.Type.V_SINT              x
     *     TINY UNSIGNED     UINT         Scalar.Type.V_UINT              x                  x
     *     SHORT             SINT         Scalar.Type.V_SINT              x
     *     SHORT UNSIGNED    UINT         Scalar.Type.V_UINT              x                  x
     *     INT24             SINT         Scalar.Type.V_SINT              x
     *     INT24 UNSIGNED    UINT         Scalar.Type.V_UINT              x                  x
     *     INT               SINT         Scalar.Type.V_SINT              x
     *     INT UNSIGNED      UINT         Scalar.Type.V_UINT              x                  x
     *     LONGLONG          SINT         Scalar.Type.V_SINT              x
     *     LONGLONG UNSIGNED UINT         Scalar.Type.V_UINT              x                  x
     *     DOUBLE            DOUBLE       Scalar.Type.V_DOUBLE            x       x          x
     *     FLOAT             FLOAT        Scalar.Type.V_FLOAT             x       x          x
     *     DECIMAL           DECIMAL      Scalar.Type.V_OCTETS            x       x          x
     *     VARCHAR,CHAR,...  BYTES        Scalar.Type.V_OCTETS            x                  x      x
     *     GEOMETRY          BYTES        Scalar.Type.V_OCTETS
     *     TIME              TIME         Scalar.Type.V_OCTETS            x
     *     DATE              DATETIME     Scalar.Type.V_OCTETS            x
     *     DATETIME          DATETIME     Scalar.Type.V_OCTETS            x
     *     YEAR              UINT         Scalar.Type.V_UINT              x                  x
     *     TIMESTAMP         DATETIME     Scalar.Type.V_OCTETS            x
     *     SET               SET          Scalar.Type.V_OCTETS                                      x
     *     ENUM              ENUM         Scalar.Type.V_OCTETS                                      x
     *     NULL              BYTES        Scalar.Type.V_OCTETS
     *     BIT               BIT          Scalar.Type.V_UINT              x
     *     ================= ============ =============================== ======= ========== ====== ========
     *   .. note:: the SQL "NULL" value is sent as Scalar.Type.V_NULL in the Mysqlx.Sql.Row
     *   SINT
     *     uses the variable integer encoding from protobuf via :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_signed_int``
     *     ``.length``
     *       maximum number of displayable decimal digits (including minus sign) of the type
     *       .. note::
     *         valid range is 0-255, but usually you'll see 1-20
     *         =============== ==
     *         SQL Type        max digits per type
     *         =============== ==
     *         TINY SIGNED      4
     *         SHORT SIGNED     6
     *         INT24 SIGNED     8
     *         INT SIGNED      11
     *         LONGLONG SIGNED 20
     *         =============== ==
     *       .. seealso:: definition of ``M`` in https://dev.mysql.com/doc/refman/5.5/en/numeric-type-overview.html
     *   UINT
     *     uses the variable integer encoding from protobuf via :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_unsigned_int``
     *     ``.flags &amp; 1`` (zerofill)
     *       the client has to left pad with 0's up to .length
     *     ``.length``
     *       maximum number of displayable decimal digits of the type
     *       .. note::
     *         valid range is 0-255, but usually you'll see 1-20
     *         ================= ==
     *         SQL Type          max digits per type
     *         ================= ==
     *         TINY UNSIGNED      3
     *         SHORT UNSIGNED     5
     *         INT24 UNSIGNED     8
     *         INT UNSIGNED      10
     *         LONGLONG UNSIGNED 20
     *         ================= ==
     *       .. seealso:: definition of ``M`` in https://dev.mysql.com/doc/refman/5.5/en/numeric-type-overview.html
     *   BIT
     *     uses the variable integer encoding from protobuf via :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_unsigned_int``
     *     ``.length``
     *       maximum number of displayable binary digits
     *     .. note:: valid range for M of the ``BIT`` type is 1 - 64
     *     .. seealso:: https://dev.mysql.com/doc/refman/5.5/en/numeric-type-overview.html
     *   DOUBLE
     *     uses protobufs native type for "double" (:protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_double``)
     *     ``.length``
     *       maximum number of displayable decimal digits (including the decimal point and ``.fractional_digits``)
     *     ``.fractional_digits``
     *       maximum number of displayable decimal digits following the decimal point
     *   FLOAT
     *     uses protobufs native type for "float" (:protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_float``)
     *     ``.length``
     *       maximum number of displayable decimal digits (including the decimal point and ``.fractional_digits``)
     *     ``.fractional_digits``
     *       maximum number of displayable decimal digits following the decimal point
     *   DECIMAL
     *     uses :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_opaque`` which contains two varints:
     *     * the integral part
     *     * the fractional part
     *     The fractional part is scaled by ``.fractional_digits``::
     *       integral_part     = 123
     *       fractional_part   =   3
     *       fractional_digits =   6
     *       decimal = 126.000003
     *     ``.length``
     *       maximum number of displayable decimal digits (*excluding* the decimal point and sign, but including ``.fractional_digits``)
     *       .. note:: should be in the range of 1 - 65
     *     ``.fractional_digits``
     *       is the decimal digits to display out of length
     *       .. note:: should be in the range of 0 - 30
     *   BYTES, ENUM
     *     uses :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_opaque`` for the data and sets ``.charset``
     *     ``.length``
     *       the maximum length of characters of the underlying type
     *     ``.flags &amp; 1`` (rightpad)
     *       if the length of the field is less than ``.length``, the receiver is
     *       supposed to add padding characters to the right end of the string.
     *       If the ``.charset`` is "binary", the padding character is ``0x00``,
     *       otherwise it is a space character as defined by that character set.
     *     ============= ======= ======== =======
     *     SQL Type      .length .charset .flags
     *     ============= ======= ======== =======
     *     TINYBLOB      256     binary
     *     BLOB          65535   binary
     *     VARCHAR(32)   32      utf8
     *     VARBINARY(32) 32      utf8_bin
     *     BINARY(32)    32      binary   rightpad
     *     CHAR(32)      32      utf8     rightpad
     *     ============= ======= ======== =======
     *     BYTES is used for all opaque byte strings that may have a charset
     *     * TINYBLOB, BLOB, MEDIUMBLOB, LONGBLOB
     *     * TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT
     *     * VARCHAR, VARBINARY
     *     * CHAR, BINARY
     *     * ENUM
     *     The SQL Type "NULL" is send as empty string if "not-NULL".
     *   DATETIME
     *     uses :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_opaque`` which contains a series of unsigned varints:
     *     ======== ==============================================================
     *     count    positions
     *     ======== ==============================================================
     *     3        year, month, day-of-month
     *     6        year, month, day-of-month, hours, minutes, seconds
     *     7        year, month, day-of-month, hours, minutes, seconds, subseconds
     *     ======== ==============================================================
     *   TIME
     *     uses :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_opaque`` which contains a series of unsigned varints:
     *     ======== ==============================================================
     *     count    positions
     *     ======== ==============================================================
     *     5        is_negative, days, hours, minutes, seconds
     *     6        is_negative, days, hours, minutes, seconds, subseconds
     *     ======== ==============================================================
     *   SET
     *     uses :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_opaque`` and contains a series of protobuf "bytes"::
     *       length $octets
     *       ^^       ^^-- string
     *       |
     *       +-- length of the following $octets
     *     If there is more data in the :protobuf:msg:`Mysqlx.Datatypes::Scalar` ``.v_opaque``, it is again a "length $octets"
     *     for the next string.
     * :param name: name of the column
     * :param original_name: name of the column before an alias was applied
     * :param table: name of the table the column orginates from
     * :param original_table: name of the table the column orginates from before an alias was applied
     * :param schema: schema the column originates from
     * :param catalog:
     *   catalog the schema originates from
     *   .. note::
     *     as there is current no support for catalogs in MySQL, don't expect this field to be set.
     *     In the MySQL C/S protocol the field had the value ``def`` all the time.
     * :param fractional_digits: displayed factional decimal digits for floating point and fixed point numbers
     * :param length: maximum count of displayable characters of .type
     * :param flags:
     *   ``.type`` specific flags
     *   ======= ====== ===========
     *   type    value  description
     *   ======= ====== ===========
     *   UINT    0x0001 zerofill
     *   DOUBLE  0x0001 unsigned
     *   FLOAT   0x0001 unsigned
     *   DECIMAL 0x0001 unsigned
     *   BYTES   0x0001 rightpad
     *   ======= ====== ===========
     *   default: 0
     * :param content_type:
     *   a hint about the higher-level encoding of a BYTES field
     *   ====== ====== ===========
     *   type   value  description
     *   ====== ====== ===========
     *   BYTES  0x0001 GEOMETRY (WKB encoding)
     *   BYTES  0x0002 JSON (text encoding)
     *   BYTES  0x0003 XML (text encoding)
     *   ====== ====== ===========
     *   .. note::
     *     this list isn't comprehensive. As guideline: the field's value is expected
     *     to pass a validator check on client and server if this field is set.
     *     If the server adds more internal datatypes that rely on BLOB storage
     *     like image manipulation, seeking into complex types in BLOBs, ... more
     *     types will be added.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.ColumnMetaData)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_ColumnMetaData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_ColumnMetaData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.FieldType.SINT;
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        originalName_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        table_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        originalTable_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        schema_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000020);
        catalog_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        charset_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        fractionalDigits_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        length_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        flags_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        contentType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_ColumnMetaData_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.originalName_ = originalName_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.table_ = table_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.originalTable_ = originalTable_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.schema_ = schema_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.catalog_ = catalog_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.charset_ = charset_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.fractionalDigits_ = fractionalDigits_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.length_ = length_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.flags_ = flags_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.contentType_ = contentType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasName()) {
          setName(other.getName());
        }
        if (other.hasOriginalName()) {
          setOriginalName(other.getOriginalName());
        }
        if (other.hasTable()) {
          setTable(other.getTable());
        }
        if (other.hasOriginalTable()) {
          setOriginalTable(other.getOriginalTable());
        }
        if (other.hasSchema()) {
          setSchema(other.getSchema());
        }
        if (other.hasCatalog()) {
          setCatalog(other.getCatalog());
        }
        if (other.hasCharset()) {
          bitField0_ |= 0x00000080;
          charset_ = other.charset_;
          onChanged();
        }
        if (other.hasFractionalDigits()) {
          setFractionalDigits(other.getFractionalDigits());
        }
        if (other.hasLength()) {
          setLength(other.getLength());
        }
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        if (other.hasContentType()) {
          setContentType(other.getContentType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.FieldType type_ = com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.FieldType.SINT;
      /**
       * <code>required .Mysqlx.Sql.ColumnMetaData.FieldType type = 1;</code>
       *
       * <pre>
       * datatype of the field in a row
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .Mysqlx.Sql.ColumnMetaData.FieldType type = 1;</code>
       *
       * <pre>
       * datatype of the field in a row
       * </pre>
       */
      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.FieldType getType() {
        return type_;
      }
      /**
       * <code>required .Mysqlx.Sql.ColumnMetaData.FieldType type = 1;</code>
       *
       * <pre>
       * datatype of the field in a row
       * </pre>
       */
      public Builder setType(com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.FieldType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .Mysqlx.Sql.ColumnMetaData.FieldType type = 1;</code>
       *
       * <pre>
       * datatype of the field in a row
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.mysql.cj.mysqlx.protobuf.MysqlxSql.ColumnMetaData.FieldType.SINT;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString name_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes name = 2;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bytes name = 2;</code>
       */
      public com.google.protobuf.ByteString getName() {
        return name_;
      }
      /**
       * <code>optional bytes name = 2;</code>
       */
      public Builder setName(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes name = 2;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString originalName_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes original_name = 3;</code>
       */
      public boolean hasOriginalName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bytes original_name = 3;</code>
       */
      public com.google.protobuf.ByteString getOriginalName() {
        return originalName_;
      }
      /**
       * <code>optional bytes original_name = 3;</code>
       */
      public Builder setOriginalName(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        originalName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes original_name = 3;</code>
       */
      public Builder clearOriginalName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        originalName_ = getDefaultInstance().getOriginalName();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString table_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes table = 4;</code>
       */
      public boolean hasTable() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes table = 4;</code>
       */
      public com.google.protobuf.ByteString getTable() {
        return table_;
      }
      /**
       * <code>optional bytes table = 4;</code>
       */
      public Builder setTable(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        table_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes table = 4;</code>
       */
      public Builder clearTable() {
        bitField0_ = (bitField0_ & ~0x00000008);
        table_ = getDefaultInstance().getTable();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString originalTable_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes original_table = 5;</code>
       */
      public boolean hasOriginalTable() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bytes original_table = 5;</code>
       */
      public com.google.protobuf.ByteString getOriginalTable() {
        return originalTable_;
      }
      /**
       * <code>optional bytes original_table = 5;</code>
       */
      public Builder setOriginalTable(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        originalTable_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes original_table = 5;</code>
       */
      public Builder clearOriginalTable() {
        bitField0_ = (bitField0_ & ~0x00000010);
        originalTable_ = getDefaultInstance().getOriginalTable();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString schema_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes schema = 6;</code>
       */
      public boolean hasSchema() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bytes schema = 6;</code>
       */
      public com.google.protobuf.ByteString getSchema() {
        return schema_;
      }
      /**
       * <code>optional bytes schema = 6;</code>
       */
      public Builder setSchema(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        schema_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes schema = 6;</code>
       */
      public Builder clearSchema() {
        bitField0_ = (bitField0_ & ~0x00000020);
        schema_ = getDefaultInstance().getSchema();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString catalog_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes catalog = 7;</code>
       */
      public boolean hasCatalog() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bytes catalog = 7;</code>
       */
      public com.google.protobuf.ByteString getCatalog() {
        return catalog_;
      }
      /**
       * <code>optional bytes catalog = 7;</code>
       */
      public Builder setCatalog(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        catalog_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes catalog = 7;</code>
       */
      public Builder clearCatalog() {
        bitField0_ = (bitField0_ & ~0x00000040);
        catalog_ = getDefaultInstance().getCatalog();
        onChanged();
        return this;
      }

      private java.lang.Object charset_ = "";
      /**
       * <code>optional string charset = 8;</code>
       */
      public boolean hasCharset() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string charset = 8;</code>
       */
      public java.lang.String getCharset() {
        java.lang.Object ref = charset_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            charset_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string charset = 8;</code>
       */
      public com.google.protobuf.ByteString
          getCharsetBytes() {
        java.lang.Object ref = charset_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          charset_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string charset = 8;</code>
       */
      public Builder setCharset(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        charset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string charset = 8;</code>
       */
      public Builder clearCharset() {
        bitField0_ = (bitField0_ & ~0x00000080);
        charset_ = getDefaultInstance().getCharset();
        onChanged();
        return this;
      }
      /**
       * <code>optional string charset = 8;</code>
       */
      public Builder setCharsetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        charset_ = value;
        onChanged();
        return this;
      }

      private int fractionalDigits_ ;
      /**
       * <code>optional uint32 fractional_digits = 9;</code>
       */
      public boolean hasFractionalDigits() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 fractional_digits = 9;</code>
       */
      public int getFractionalDigits() {
        return fractionalDigits_;
      }
      /**
       * <code>optional uint32 fractional_digits = 9;</code>
       */
      public Builder setFractionalDigits(int value) {
        bitField0_ |= 0x00000100;
        fractionalDigits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 fractional_digits = 9;</code>
       */
      public Builder clearFractionalDigits() {
        bitField0_ = (bitField0_ & ~0x00000100);
        fractionalDigits_ = 0;
        onChanged();
        return this;
      }

      private int length_ ;
      /**
       * <code>optional uint32 length = 10;</code>
       */
      public boolean hasLength() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 length = 10;</code>
       */
      public int getLength() {
        return length_;
      }
      /**
       * <code>optional uint32 length = 10;</code>
       */
      public Builder setLength(int value) {
        bitField0_ |= 0x00000200;
        length_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 length = 10;</code>
       */
      public Builder clearLength() {
        bitField0_ = (bitField0_ & ~0x00000200);
        length_ = 0;
        onChanged();
        return this;
      }

      private int flags_ ;
      /**
       * <code>optional uint32 flags = 11;</code>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 flags = 11;</code>
       */
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional uint32 flags = 11;</code>
       */
      public Builder setFlags(int value) {
        bitField0_ |= 0x00000400;
        flags_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 flags = 11;</code>
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000400);
        flags_ = 0;
        onChanged();
        return this;
      }

      private int contentType_ ;
      /**
       * <code>optional uint32 content_type = 12;</code>
       */
      public boolean hasContentType() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 content_type = 12;</code>
       */
      public int getContentType() {
        return contentType_;
      }
      /**
       * <code>optional uint32 content_type = 12;</code>
       */
      public Builder setContentType(int value) {
        bitField0_ |= 0x00000800;
        contentType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 content_type = 12;</code>
       */
      public Builder clearContentType() {
        bitField0_ = (bitField0_ & ~0x00000800);
        contentType_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.ColumnMetaData)
    }

    static {
      defaultInstance = new ColumnMetaData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.ColumnMetaData)
  }

  public interface CursorCloseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.CursorClose)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 cursor_id = 2;</code>
     */
    boolean hasCursorId();
    /**
     * <code>required uint32 cursor_id = 2;</code>
     */
    int getCursorId();
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.CursorClose}
   *
   * <pre>
   * close a cursor
   * :param cursor_id: id of an active cursor
   * :Returns: :protobuf:msg:`Mysqlx.Sql::CursorCloseOk` or :protobuf:msg:`Mysqlx::Error`
   * </pre>
   */
  public static final class CursorClose extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.CursorClose)
      CursorCloseOrBuilder {
    // Use CursorClose.newBuilder() to construct.
    private CursorClose(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CursorClose(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CursorClose defaultInstance;
    public static CursorClose getDefaultInstance() {
      return defaultInstance;
    }

    public CursorClose getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CursorClose(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              cursorId_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorClose_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorClose_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose.Builder.class);
    }

    public static com.google.protobuf.Parser<CursorClose> PARSER =
        new com.google.protobuf.AbstractParser<CursorClose>() {
      public CursorClose parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CursorClose(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CursorClose> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CURSOR_ID_FIELD_NUMBER = 2;
    private int cursorId_;
    /**
     * <code>required uint32 cursor_id = 2;</code>
     */
    public boolean hasCursorId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 cursor_id = 2;</code>
     */
    public int getCursorId() {
      return cursorId_;
    }

    private void initFields() {
      cursorId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasCursorId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(2, cursorId_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, cursorId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.CursorClose}
     *
     * <pre>
     * close a cursor
     * :param cursor_id: id of an active cursor
     * :Returns: :protobuf:msg:`Mysqlx.Sql::CursorCloseOk` or :protobuf:msg:`Mysqlx::Error`
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.CursorClose)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorClose_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorClose_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cursorId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorClose_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cursorId_ = cursorId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose.getDefaultInstance()) return this;
        if (other.hasCursorId()) {
          setCursorId(other.getCursorId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasCursorId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorClose) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int cursorId_ ;
      /**
       * <code>required uint32 cursor_id = 2;</code>
       */
      public boolean hasCursorId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 cursor_id = 2;</code>
       */
      public int getCursorId() {
        return cursorId_;
      }
      /**
       * <code>required uint32 cursor_id = 2;</code>
       */
      public Builder setCursorId(int value) {
        bitField0_ |= 0x00000001;
        cursorId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 cursor_id = 2;</code>
       */
      public Builder clearCursorId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cursorId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.CursorClose)
    }

    static {
      defaultInstance = new CursorClose(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.CursorClose)
  }

  public interface CursorCloseOkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.CursorCloseOk)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.CursorCloseOk}
   *
   * <pre>
   * cursor closed successful
   * </pre>
   */
  public static final class CursorCloseOk extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.CursorCloseOk)
      CursorCloseOkOrBuilder {
    // Use CursorCloseOk.newBuilder() to construct.
    private CursorCloseOk(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CursorCloseOk(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CursorCloseOk defaultInstance;
    public static CursorCloseOk getDefaultInstance() {
      return defaultInstance;
    }

    public CursorCloseOk getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CursorCloseOk(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorCloseOk_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorCloseOk_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk.Builder.class);
    }

    public static com.google.protobuf.Parser<CursorCloseOk> PARSER =
        new com.google.protobuf.AbstractParser<CursorCloseOk>() {
      public CursorCloseOk parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CursorCloseOk(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CursorCloseOk> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.CursorCloseOk}
     *
     * <pre>
     * cursor closed successful
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.CursorCloseOk)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOkOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorCloseOk_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorCloseOk_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_CursorCloseOk_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.CursorCloseOk) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.CursorCloseOk)
    }

    static {
      defaultInstance = new CursorCloseOk(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.CursorCloseOk)
  }

  public interface PreparedStmtCloseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Mysqlx.Sql.PreparedStmtClose)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 stmt_id = 1;</code>
     */
    boolean hasStmtId();
    /**
     * <code>required uint32 stmt_id = 1;</code>
     */
    int getStmtId();
  }
  /**
   * Protobuf type {@code Mysqlx.Sql.PreparedStmtClose}
   *
   * <pre>
   * close a prepared statement and all related cursors
   * :param stmt_id: id of an active prepared statement
   * :Returns: :protobuf:msg:`Mysqlx::Ok` or :protobuf:msg:`Mysqlx::Error`
   * </pre>
   */
  public static final class PreparedStmtClose extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Mysqlx.Sql.PreparedStmtClose)
      PreparedStmtCloseOrBuilder {
    // Use PreparedStmtClose.newBuilder() to construct.
    private PreparedStmtClose(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PreparedStmtClose(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PreparedStmtClose defaultInstance;
    public static PreparedStmtClose getDefaultInstance() {
      return defaultInstance;
    }

    public PreparedStmtClose getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PreparedStmtClose(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              stmtId_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtClose_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtClose_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose.Builder.class);
    }

    public static com.google.protobuf.Parser<PreparedStmtClose> PARSER =
        new com.google.protobuf.AbstractParser<PreparedStmtClose>() {
      public PreparedStmtClose parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PreparedStmtClose(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PreparedStmtClose> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int STMT_ID_FIELD_NUMBER = 1;
    private int stmtId_;
    /**
     * <code>required uint32 stmt_id = 1;</code>
     */
    public boolean hasStmtId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 stmt_id = 1;</code>
     */
    public int getStmtId() {
      return stmtId_;
    }

    private void initFields() {
      stmtId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasStmtId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, stmtId_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, stmtId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Mysqlx.Sql.PreparedStmtClose}
     *
     * <pre>
     * close a prepared statement and all related cursors
     * :param stmt_id: id of an active prepared statement
     * :Returns: :protobuf:msg:`Mysqlx::Ok` or :protobuf:msg:`Mysqlx::Error`
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Sql.PreparedStmtClose)
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtCloseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtClose_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtClose_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose.class, com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose.Builder.class);
      }

      // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        stmtId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.internal_static_Mysqlx_Sql_PreparedStmtClose_descriptor;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose getDefaultInstanceForType() {
        return com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose.getDefaultInstance();
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose build() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose buildPartial() {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose result = new com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.stmtId_ = stmtId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose) {
          return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose other) {
        if (other == com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose.getDefaultInstance()) return this;
        if (other.hasStmtId()) {
          setStmtId(other.getStmtId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasStmtId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxSql.PreparedStmtClose) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int stmtId_ ;
      /**
       * <code>required uint32 stmt_id = 1;</code>
       */
      public boolean hasStmtId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 stmt_id = 1;</code>
       */
      public int getStmtId() {
        return stmtId_;
      }
      /**
       * <code>required uint32 stmt_id = 1;</code>
       */
      public Builder setStmtId(int value) {
        bitField0_ |= 0x00000001;
        stmtId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 stmt_id = 1;</code>
       */
      public Builder clearStmtId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stmtId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Mysqlx.Sql.PreparedStmtClose)
    }

    static {
      defaultInstance = new PreparedStmtClose(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Mysqlx.Sql.PreparedStmtClose)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_Row_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_Row_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_StmtExecute_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_StmtExecute_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_StmtExecuteOk_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_StmtExecuteOk_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_PrepareStmt_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_PrepareStmt_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_PrepareStmtOk_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_PrepareStmtOk_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_PreparedStmtExecute_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_PreparedStmtExecute_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_PreparedStmtExecuteOk_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_PreparedStmtExecuteOk_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_CursorsPollInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_CursorsPollInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_CursorsPoll_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_CursorsPoll_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_CursorFetchRows_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_CursorFetchRows_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_CursorFetchDoneMoreResultsets_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_CursorFetchDoneMoreResultsets_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_CursorFetchDone_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_CursorFetchDone_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_CursorFetchSuspended_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_CursorFetchSuspended_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_CursorFetchMetaData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_CursorFetchMetaData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_ColumnMetaData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_ColumnMetaData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_CursorClose_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_CursorClose_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_CursorCloseOk_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_CursorCloseOk_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Mysqlx_Sql_PreparedStmtClose_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Mysqlx_Sql_PreparedStmtClose_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020mysqlx_sql.proto\022\nMysqlx.Sql\032\026mysqlx_d" +
      "atatypes.proto\"+\n\003Row\022$\n\005field\030\001 \003(\0132\025.M" +
      "ysqlx.Datatypes.Any\"r\n\013StmtExecute\022\026\n\tna" +
      "mespace\030\003 \001(\t:\003sql\022\014\n\004stmt\030\001 \002(\t\022#\n\004args" +
      "\030\002 \003(\0132\025.Mysqlx.Datatypes.Any\022\030\n\020compact" +
      "_metadata\030\004 \001(\010\">\n\rStmtExecuteOk\022\025\n\rrows" +
      "_affected\030\001 \001(\004\022\026\n\016last_insert_id\030\002 \001(\004\"" +
      ",\n\013PrepareStmt\022\017\n\007stmt_id\030\001 \002(\r\022\014\n\004stmt\030" +
      "\002 \002(\t\"\017\n\rPrepareStmtOk\"W\n\023PreparedStmtEx" +
      "ecute\022\017\n\007stmt_id\030\001 \002(\r\022\021\n\tcursor_id\030\002 \002(",
      "\r\022\034\n\003row\030\003 \001(\0132\017.Mysqlx.Sql.Row\"^\n\025Prepa" +
      "redStmtExecuteOk\022\025\n\rrows_affected\030\001 \001(\004\022" +
      "\026\n\016last_insert_id\030\002 \001(\004\022\026\n\016cursor_create" +
      "d\030\003 \002(\010\"\177\n\017CursorsPollInfo\022\021\n\tcursor_id\030" +
      "\001 \002(\r\0220\n\005event\030\002 \002(\0162!.Mysqlx.Sql.Cursor" +
      "sPollInfo.Event\"\'\n\005Event\022\016\n\nMETA_READY\020\001" +
      "\022\016\n\nDATA_READY\020\002\"P\n\013CursorsPoll\022-\n\010polli" +
      "nfo\030\001 \003(\0132\033.Mysqlx.Sql.CursorsPollInfo\022\022" +
      "\n\ntimeout_ms\030\002 \002(\r\"S\n\017CursorFetchRows\022\021\n" +
      "\tcursor_id\030\001 \002(\r\022\023\n\013fetch_limit\030\002 \001(\r\022\030\n",
      "\020compact_metadata\030\003 \001(\010\"\037\n\035CursorFetchDo" +
      "neMoreResultsets\"\021\n\017CursorFetchDone\"\026\n\024C" +
      "ursorFetchSuspended\"(\n\023CursorFetchMetaDa" +
      "ta\022\021\n\tcursor_id\030\001 \002(\r\"\227\003\n\016ColumnMetaData" +
      "\0222\n\004type\030\001 \002(\0162$.Mysqlx.Sql.ColumnMetaDa" +
      "ta.FieldType\022\014\n\004name\030\002 \001(\014\022\025\n\roriginal_n" +
      "ame\030\003 \001(\014\022\r\n\005table\030\004 \001(\014\022\026\n\016original_tab" +
      "le\030\005 \001(\014\022\016\n\006schema\030\006 \001(\014\022\017\n\007catalog\030\007 \001(" +
      "\014\022\017\n\007charset\030\010 \001(\t\022\031\n\021fractional_digits\030" +
      "\t \001(\r\022\016\n\006length\030\n \001(\r\022\r\n\005flags\030\013 \001(\r\022\024\n\014",
      "content_type\030\014 \001(\r\"\202\001\n\tFieldType\022\010\n\004SINT" +
      "\020\001\022\010\n\004UINT\020\002\022\n\n\006DOUBLE\020\005\022\t\n\005FLOAT\020\006\022\t\n\005B" +
      "YTES\020\007\022\010\n\004TIME\020\n\022\014\n\010DATETIME\020\014\022\007\n\003SET\020\017\022" +
      "\010\n\004ENUM\020\020\022\007\n\003BIT\020\021\022\013\n\007DECIMAL\020\022\" \n\013Curso" +
      "rClose\022\021\n\tcursor_id\030\002 \002(\r\"\017\n\rCursorClose" +
      "Ok\"$\n\021PreparedStmtClose\022\017\n\007stmt_id\030\001 \002(\r" +
      "B\036\n\034com.mysql.cj.mysqlx.protobuf"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.getDescriptor(),
        }, assigner);
    internal_static_Mysqlx_Sql_Row_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Mysqlx_Sql_Row_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_Row_descriptor,
        new java.lang.String[] { "Field", });
    internal_static_Mysqlx_Sql_StmtExecute_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_Mysqlx_Sql_StmtExecute_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_StmtExecute_descriptor,
        new java.lang.String[] { "Namespace", "Stmt", "Args", "CompactMetadata", });
    internal_static_Mysqlx_Sql_StmtExecuteOk_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_Mysqlx_Sql_StmtExecuteOk_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_StmtExecuteOk_descriptor,
        new java.lang.String[] { "RowsAffected", "LastInsertId", });
    internal_static_Mysqlx_Sql_PrepareStmt_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_Mysqlx_Sql_PrepareStmt_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_PrepareStmt_descriptor,
        new java.lang.String[] { "StmtId", "Stmt", });
    internal_static_Mysqlx_Sql_PrepareStmtOk_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_Mysqlx_Sql_PrepareStmtOk_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_PrepareStmtOk_descriptor,
        new java.lang.String[] { });
    internal_static_Mysqlx_Sql_PreparedStmtExecute_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_Mysqlx_Sql_PreparedStmtExecute_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_PreparedStmtExecute_descriptor,
        new java.lang.String[] { "StmtId", "CursorId", "Row", });
    internal_static_Mysqlx_Sql_PreparedStmtExecuteOk_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_Mysqlx_Sql_PreparedStmtExecuteOk_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_PreparedStmtExecuteOk_descriptor,
        new java.lang.String[] { "RowsAffected", "LastInsertId", "CursorCreated", });
    internal_static_Mysqlx_Sql_CursorsPollInfo_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_Mysqlx_Sql_CursorsPollInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_CursorsPollInfo_descriptor,
        new java.lang.String[] { "CursorId", "Event", });
    internal_static_Mysqlx_Sql_CursorsPoll_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_Mysqlx_Sql_CursorsPoll_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_CursorsPoll_descriptor,
        new java.lang.String[] { "Pollinfo", "TimeoutMs", });
    internal_static_Mysqlx_Sql_CursorFetchRows_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_Mysqlx_Sql_CursorFetchRows_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_CursorFetchRows_descriptor,
        new java.lang.String[] { "CursorId", "FetchLimit", "CompactMetadata", });
    internal_static_Mysqlx_Sql_CursorFetchDoneMoreResultsets_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_Mysqlx_Sql_CursorFetchDoneMoreResultsets_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_CursorFetchDoneMoreResultsets_descriptor,
        new java.lang.String[] { });
    internal_static_Mysqlx_Sql_CursorFetchDone_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_Mysqlx_Sql_CursorFetchDone_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_CursorFetchDone_descriptor,
        new java.lang.String[] { });
    internal_static_Mysqlx_Sql_CursorFetchSuspended_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_Mysqlx_Sql_CursorFetchSuspended_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_CursorFetchSuspended_descriptor,
        new java.lang.String[] { });
    internal_static_Mysqlx_Sql_CursorFetchMetaData_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_Mysqlx_Sql_CursorFetchMetaData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_CursorFetchMetaData_descriptor,
        new java.lang.String[] { "CursorId", });
    internal_static_Mysqlx_Sql_ColumnMetaData_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_Mysqlx_Sql_ColumnMetaData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_ColumnMetaData_descriptor,
        new java.lang.String[] { "Type", "Name", "OriginalName", "Table", "OriginalTable", "Schema", "Catalog", "Charset", "FractionalDigits", "Length", "Flags", "ContentType", });
    internal_static_Mysqlx_Sql_CursorClose_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_Mysqlx_Sql_CursorClose_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_CursorClose_descriptor,
        new java.lang.String[] { "CursorId", });
    internal_static_Mysqlx_Sql_CursorCloseOk_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_Mysqlx_Sql_CursorCloseOk_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_CursorCloseOk_descriptor,
        new java.lang.String[] { });
    internal_static_Mysqlx_Sql_PreparedStmtClose_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_Mysqlx_Sql_PreparedStmtClose_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Mysqlx_Sql_PreparedStmtClose_descriptor,
        new java.lang.String[] { "StmtId", });
    com.mysql.cj.mysqlx.protobuf.MysqlxDatatypes.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}

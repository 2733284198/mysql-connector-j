// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx_crud.proto

package com.mysql.cj.mysqlx.protobuf;

public final class MysqlxCrud {
    private MysqlxCrud() {
    }

    public static void registerAllExtensions(com.google.protobuf.ExtensionRegistry registry) {
    }

    /**
     * Protobuf enum {@code Mysqlx.Crud.DataModel}
     *
     * <pre>
     * DataModel to use for filters, names, ...
     * </pre>
     */
    public enum DataModel implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>DOCUMENT = 1;</code>
         */
        DOCUMENT(0, 1),
        /**
         * <code>TABLE = 2;</code>
         */
        TABLE(1, 2), ;

        /**
         * <code>DOCUMENT = 1;</code>
         */
        public static final int DOCUMENT_VALUE = 1;
        /**
         * <code>TABLE = 2;</code>
         */
        public static final int TABLE_VALUE = 2;

        public final int getNumber() {
            return value;
        }

        public static DataModel valueOf(int value) {
            switch (value) {
                case 1:
                    return DOCUMENT;
                case 2:
                    return TABLE;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<DataModel> internalGetValueMap() {
            return internalValueMap;
        }

        private static com.google.protobuf.Internal.EnumLiteMap<DataModel> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<DataModel>() {
            public DataModel findValueByNumber(int number) {
                return DataModel.valueOf(number);
            }
        };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.getDescriptor().getEnumTypes().get(0);
        }

        private static final DataModel[] VALUES = values();

        public static DataModel valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        private final int index;
        private final int value;

        private DataModel(int index, int value) {
            this.index = index;
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:Mysqlx.Crud.DataModel)
    }

    public interface ColumnOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Mysqlx.Crud.Column)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>optional string name = 1;</code>
         */
        boolean hasName();

        /**
         * <code>optional string name = 1;</code>
         */
        java.lang.String getName();

        /**
         * <code>optional string name = 1;</code>
         */
        com.google.protobuf.ByteString getNameBytes();

        /**
         * <code>optional string alias = 2;</code>
         */
        boolean hasAlias();

        /**
         * <code>optional string alias = 2;</code>
         */
        java.lang.String getAlias();

        /**
         * <code>optional string alias = 2;</code>
         */
        com.google.protobuf.ByteString getAliasBytes();

        /**
         * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
         */
        java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem> getDocumentPathList();

        /**
         * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem getDocumentPath(int index);

        /**
         * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
         */
        int getDocumentPathCount();

        /**
         * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
         */
        java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItemOrBuilder> getDocumentPathOrBuilderList();

        /**
         * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItemOrBuilder getDocumentPathOrBuilder(int index);
    }

    /**
     * Protobuf type {@code Mysqlx.Crud.Column}
     *
     * <pre>
     * column definition
     * </pre>
     */
    public static final class Column extends com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:Mysqlx.Crud.Column)
            ColumnOrBuilder {
        // Use Column.newBuilder() to construct.
        private Column(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Column(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Column defaultInstance;

        public static Column getDefaultInstance() {
            return defaultInstance;
        }

        public Column getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Column(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000001;
                            name_ = bs;
                            break;
                        }
                        case 18: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000002;
                            alias_ = bs;
                            break;
                        }
                        case 26: {
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                documentPath_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            documentPath_.add(input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    documentPath_ = java.util.Collections.unmodifiableList(documentPath_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Column_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Column_fieldAccessorTable.ensureFieldAccessorsInitialized(
                    com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder.class);
        }

        public static com.google.protobuf.Parser<Column> PARSER = new com.google.protobuf.AbstractParser<Column>() {
            public Column parsePartialFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Column(input, extensionRegistry);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<Column> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int NAME_FIELD_NUMBER = 1;
        private java.lang.Object name_;

        /**
         * <code>optional string name = 1;</code>
         */
        public boolean hasName() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional string name = 1;</code>
         */
        public java.lang.String getName() {
            java.lang.Object ref = name_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    name_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string name = 1;</code>
         */
        public com.google.protobuf.ByteString getNameBytes() {
            java.lang.Object ref = name_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
                name_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int ALIAS_FIELD_NUMBER = 2;
        private java.lang.Object alias_;

        /**
         * <code>optional string alias = 2;</code>
         */
        public boolean hasAlias() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional string alias = 2;</code>
         */
        public java.lang.String getAlias() {
            java.lang.Object ref = alias_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    alias_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string alias = 2;</code>
         */
        public com.google.protobuf.ByteString getAliasBytes() {
            java.lang.Object ref = alias_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
                alias_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int DOCUMENT_PATH_FIELD_NUMBER = 3;
        private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem> documentPath_;

        /**
         * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
         */
        public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem> getDocumentPathList() {
            return documentPath_;
        }

        /**
         * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
         */
        public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItemOrBuilder> getDocumentPathOrBuilderList() {
            return documentPath_;
        }

        /**
         * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
         */
        public int getDocumentPathCount() {
            return documentPath_.size();
        }

        /**
         * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem getDocumentPath(int index) {
            return documentPath_.get(index);
        }

        /**
         * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItemOrBuilder getDocumentPathOrBuilder(int index) {
            return documentPath_.get(index);
        }

        private void initFields() {
            name_ = "";
            alias_ = "";
            documentPath_ = java.util.Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            for (int i = 0; i < getDocumentPathCount(); i++) {
                if (!getDocumentPath(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBytes(1, getNameBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeBytes(2, getAliasBytes());
            }
            for (int i = 0; i < documentPath_.size(); i++) {
                output.writeMessage(3, documentPath_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1)
                return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream.computeBytesSize(1, getNameBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream.computeBytesSize(2, getAliasBytes());
            }
            for (int i = 0; i < documentPath_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, documentPath_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column parseFrom(com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column parseFrom(com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column parseFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column parseDelimitedFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column parseFrom(com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Mysqlx.Crud.Column}
         *
         * <pre>
         * column definition
         * </pre>
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Crud.Column)
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Column_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Column_fieldAccessorTable.ensureFieldAccessorsInitialized(
                        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder.class);
            }

            // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getDocumentPathFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                name_ = "";
                bitField0_ = (bitField0_ & ~0x00000001);
                alias_ = "";
                bitField0_ = (bitField0_ & ~0x00000002);
                if (documentPathBuilder_ == null) {
                    documentPath_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                } else {
                    documentPathBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Column_descriptor;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column getDefaultInstanceForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.getDefaultInstance();
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column build() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column buildPartial() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column result = new com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.name_ = name_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.alias_ = alias_;
                if (documentPathBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004)) {
                        documentPath_ = java.util.Collections.unmodifiableList(documentPath_);
                        bitField0_ = (bitField0_ & ~0x00000004);
                    }
                    result.documentPath_ = documentPath_;
                } else {
                    result.documentPath_ = documentPathBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column) {
                    return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column other) {
                if (other == com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.getDefaultInstance())
                    return this;
                if (other.hasName()) {
                    bitField0_ |= 0x00000001;
                    name_ = other.name_;
                    onChanged();
                }
                if (other.hasAlias()) {
                    bitField0_ |= 0x00000002;
                    alias_ = other.alias_;
                    onChanged();
                }
                if (documentPathBuilder_ == null) {
                    if (!other.documentPath_.isEmpty()) {
                        if (documentPath_.isEmpty()) {
                            documentPath_ = other.documentPath_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                        } else {
                            ensureDocumentPathIsMutable();
                            documentPath_.addAll(other.documentPath_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.documentPath_.isEmpty()) {
                        if (documentPathBuilder_.isEmpty()) {
                            documentPathBuilder_.dispose();
                            documentPathBuilder_ = null;
                            documentPath_ = other.documentPath_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                            documentPathBuilder_ = com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getDocumentPathFieldBuilder() : null;
                        } else {
                            documentPathBuilder_.addAllMessages(other.documentPath_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getDocumentPathCount(); i++) {
                    if (!getDocumentPath(i).isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private java.lang.Object name_ = "";

            /**
             * <code>optional string name = 1;</code>
             */
            public boolean hasName() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>optional string name = 1;</code>
             */
            public java.lang.String getName() {
                java.lang.Object ref = name_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        name_ = s;
                    }
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <code>optional string name = 1;</code>
             */
            public com.google.protobuf.ByteString getNameBytes() {
                java.lang.Object ref = name_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
                    name_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string name = 1;</code>
             */
            public Builder setName(java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                name_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string name = 1;</code>
             */
            public Builder clearName() {
                bitField0_ = (bitField0_ & ~0x00000001);
                name_ = getDefaultInstance().getName();
                onChanged();
                return this;
            }

            /**
             * <code>optional string name = 1;</code>
             */
            public Builder setNameBytes(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                name_ = value;
                onChanged();
                return this;
            }

            private java.lang.Object alias_ = "";

            /**
             * <code>optional string alias = 2;</code>
             */
            public boolean hasAlias() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional string alias = 2;</code>
             */
            public java.lang.String getAlias() {
                java.lang.Object ref = alias_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        alias_ = s;
                    }
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <code>optional string alias = 2;</code>
             */
            public com.google.protobuf.ByteString getAliasBytes() {
                java.lang.Object ref = alias_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
                    alias_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string alias = 2;</code>
             */
            public Builder setAlias(java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                alias_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string alias = 2;</code>
             */
            public Builder clearAlias() {
                bitField0_ = (bitField0_ & ~0x00000002);
                alias_ = getDefaultInstance().getAlias();
                onChanged();
                return this;
            }

            /**
             * <code>optional string alias = 2;</code>
             */
            public Builder setAliasBytes(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                alias_ = value;
                onChanged();
                return this;
            }

            private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem> documentPath_ = java.util.Collections.emptyList();

            private void ensureDocumentPathIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    documentPath_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem>(documentPath_);
                    bitField0_ |= 0x00000004;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItemOrBuilder> documentPathBuilder_;

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem> getDocumentPathList() {
                if (documentPathBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(documentPath_);
                } else {
                    return documentPathBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public int getDocumentPathCount() {
                if (documentPathBuilder_ == null) {
                    return documentPath_.size();
                } else {
                    return documentPathBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem getDocumentPath(int index) {
                if (documentPathBuilder_ == null) {
                    return documentPath_.get(index);
                } else {
                    return documentPathBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public Builder setDocumentPath(int index, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem value) {
                if (documentPathBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureDocumentPathIsMutable();
                    documentPath_.set(index, value);
                    onChanged();
                } else {
                    documentPathBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public Builder setDocumentPath(int index, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem.Builder builderForValue) {
                if (documentPathBuilder_ == null) {
                    ensureDocumentPathIsMutable();
                    documentPath_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    documentPathBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public Builder addDocumentPath(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem value) {
                if (documentPathBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureDocumentPathIsMutable();
                    documentPath_.add(value);
                    onChanged();
                } else {
                    documentPathBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public Builder addDocumentPath(int index, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem value) {
                if (documentPathBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureDocumentPathIsMutable();
                    documentPath_.add(index, value);
                    onChanged();
                } else {
                    documentPathBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public Builder addDocumentPath(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem.Builder builderForValue) {
                if (documentPathBuilder_ == null) {
                    ensureDocumentPathIsMutable();
                    documentPath_.add(builderForValue.build());
                    onChanged();
                } else {
                    documentPathBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public Builder addDocumentPath(int index, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem.Builder builderForValue) {
                if (documentPathBuilder_ == null) {
                    ensureDocumentPathIsMutable();
                    documentPath_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    documentPathBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public Builder addAllDocumentPath(java.lang.Iterable<? extends com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem> values) {
                if (documentPathBuilder_ == null) {
                    ensureDocumentPathIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(values, documentPath_);
                    onChanged();
                } else {
                    documentPathBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public Builder clearDocumentPath() {
                if (documentPathBuilder_ == null) {
                    documentPath_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                    onChanged();
                } else {
                    documentPathBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public Builder removeDocumentPath(int index) {
                if (documentPathBuilder_ == null) {
                    ensureDocumentPathIsMutable();
                    documentPath_.remove(index);
                    onChanged();
                } else {
                    documentPathBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem.Builder getDocumentPathBuilder(int index) {
                return getDocumentPathFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItemOrBuilder getDocumentPathOrBuilder(int index) {
                if (documentPathBuilder_ == null) {
                    return documentPath_.get(index);
                } else {
                    return documentPathBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItemOrBuilder> getDocumentPathOrBuilderList() {
                if (documentPathBuilder_ != null) {
                    return documentPathBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(documentPath_);
                }
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem.Builder addDocumentPathBuilder() {
                return getDocumentPathFieldBuilder().addBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem.Builder addDocumentPathBuilder(int index) {
                return getDocumentPathFieldBuilder().addBuilder(index, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Expr.DocumentPathItem document_path = 3;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem.Builder> getDocumentPathBuilderList() {
                return getDocumentPathFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItemOrBuilder> getDocumentPathFieldBuilder() {
                if (documentPathBuilder_ == null) {
                    documentPathBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItem.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.DocumentPathItemOrBuilder>(
                            documentPath_, ((bitField0_ & 0x00000004) == 0x00000004), getParentForChildren(), isClean());
                    documentPath_ = null;
                }
                return documentPathBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:Mysqlx.Crud.Column)
        }

        static {
            defaultInstance = new Column(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Mysqlx.Crud.Column)
    }

    public interface CollectionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Mysqlx.Crud.Collection)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required string name = 1;</code>
         */
        boolean hasName();

        /**
         * <code>required string name = 1;</code>
         */
        java.lang.String getName();

        /**
         * <code>required string name = 1;</code>
         */
        com.google.protobuf.ByteString getNameBytes();

        /**
         * <code>optional string schema = 2;</code>
         */
        boolean hasSchema();

        /**
         * <code>optional string schema = 2;</code>
         */
        java.lang.String getSchema();

        /**
         * <code>optional string schema = 2;</code>
         */
        com.google.protobuf.ByteString getSchemaBytes();
    }

    /**
     * Protobuf type {@code Mysqlx.Crud.Collection}
     *
     * <pre>
     * collection
     * </pre>
     */
    public static final class Collection extends com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:Mysqlx.Crud.Collection)
            CollectionOrBuilder {
        // Use Collection.newBuilder() to construct.
        private Collection(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Collection(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Collection defaultInstance;

        public static Collection getDefaultInstance() {
            return defaultInstance;
        }

        public Collection getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Collection(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000001;
                            name_ = bs;
                            break;
                        }
                        case 18: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000002;
                            schema_ = bs;
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Collection_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Collection_fieldAccessorTable.ensureFieldAccessorsInitialized(
                    com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder.class);
        }

        public static com.google.protobuf.Parser<Collection> PARSER = new com.google.protobuf.AbstractParser<Collection>() {
            public Collection parsePartialFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Collection(input, extensionRegistry);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<Collection> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int NAME_FIELD_NUMBER = 1;
        private java.lang.Object name_;

        /**
         * <code>required string name = 1;</code>
         */
        public boolean hasName() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required string name = 1;</code>
         */
        public java.lang.String getName() {
            java.lang.Object ref = name_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    name_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string name = 1;</code>
         */
        public com.google.protobuf.ByteString getNameBytes() {
            java.lang.Object ref = name_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
                name_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int SCHEMA_FIELD_NUMBER = 2;
        private java.lang.Object schema_;

        /**
         * <code>optional string schema = 2;</code>
         */
        public boolean hasSchema() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional string schema = 2;</code>
         */
        public java.lang.String getSchema() {
            java.lang.Object ref = schema_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    schema_ = s;
                }
                return s;
            }
        }

        /**
         * <code>optional string schema = 2;</code>
         */
        public com.google.protobuf.ByteString getSchemaBytes() {
            java.lang.Object ref = schema_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
                schema_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        private void initFields() {
            name_ = "";
            schema_ = "";
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            if (!hasName()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBytes(1, getNameBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeBytes(2, getSchemaBytes());
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1)
                return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream.computeBytesSize(1, getNameBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream.computeBytesSize(2, getSchemaBytes());
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection parseFrom(com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection parseFrom(com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection parseFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection parseDelimitedFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection parseFrom(com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Mysqlx.Crud.Collection}
         *
         * <pre>
         * collection
         * </pre>
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Crud.Collection)
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Collection_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Collection_fieldAccessorTable.ensureFieldAccessorsInitialized(
                        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder.class);
            }

            // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                name_ = "";
                bitField0_ = (bitField0_ & ~0x00000001);
                schema_ = "";
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Collection_descriptor;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getDefaultInstanceForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection build() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection buildPartial() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection result = new com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.name_ = name_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.schema_ = schema_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection) {
                    return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection other) {
                if (other == com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance())
                    return this;
                if (other.hasName()) {
                    bitField0_ |= 0x00000001;
                    name_ = other.name_;
                    onChanged();
                }
                if (other.hasSchema()) {
                    bitField0_ |= 0x00000002;
                    schema_ = other.schema_;
                    onChanged();
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasName()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private java.lang.Object name_ = "";

            /**
             * <code>required string name = 1;</code>
             */
            public boolean hasName() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required string name = 1;</code>
             */
            public java.lang.String getName() {
                java.lang.Object ref = name_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        name_ = s;
                    }
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <code>required string name = 1;</code>
             */
            public com.google.protobuf.ByteString getNameBytes() {
                java.lang.Object ref = name_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
                    name_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>required string name = 1;</code>
             */
            public Builder setName(java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                name_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string name = 1;</code>
             */
            public Builder clearName() {
                bitField0_ = (bitField0_ & ~0x00000001);
                name_ = getDefaultInstance().getName();
                onChanged();
                return this;
            }

            /**
             * <code>required string name = 1;</code>
             */
            public Builder setNameBytes(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                name_ = value;
                onChanged();
                return this;
            }

            private java.lang.Object schema_ = "";

            /**
             * <code>optional string schema = 2;</code>
             */
            public boolean hasSchema() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional string schema = 2;</code>
             */
            public java.lang.String getSchema() {
                java.lang.Object ref = schema_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        schema_ = s;
                    }
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <code>optional string schema = 2;</code>
             */
            public com.google.protobuf.ByteString getSchemaBytes() {
                java.lang.Object ref = schema_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
                    schema_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>optional string schema = 2;</code>
             */
            public Builder setSchema(java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                schema_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional string schema = 2;</code>
             */
            public Builder clearSchema() {
                bitField0_ = (bitField0_ & ~0x00000002);
                schema_ = getDefaultInstance().getSchema();
                onChanged();
                return this;
            }

            /**
             * <code>optional string schema = 2;</code>
             */
            public Builder setSchemaBytes(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                schema_ = value;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:Mysqlx.Crud.Collection)
        }

        static {
            defaultInstance = new Collection(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Mysqlx.Crud.Collection)
    }

    public interface LimitOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Mysqlx.Crud.Limit)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required uint64 skip = 1;</code>
         */
        boolean hasSkip();

        /**
         * <code>required uint64 skip = 1;</code>
         */
        long getSkip();

        /**
         * <code>optional uint64 offset = 2;</code>
         */
        boolean hasOffset();

        /**
         * <code>optional uint64 offset = 2;</code>
         */
        long getOffset();
    }

    /**
     * Protobuf type {@code Mysqlx.Crud.Limit}
     *
     * <pre>
     * limit
     * </pre>
     */
    public static final class Limit extends com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:Mysqlx.Crud.Limit)
            LimitOrBuilder {
        // Use Limit.newBuilder() to construct.
        private Limit(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Limit(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Limit defaultInstance;

        public static Limit getDefaultInstance() {
            return defaultInstance;
        }

        public Limit getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Limit(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            skip_ = input.readUInt64();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            offset_ = input.readUInt64();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Limit_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Limit_fieldAccessorTable.ensureFieldAccessorsInitialized(
                    com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder.class);
        }

        public static com.google.protobuf.Parser<Limit> PARSER = new com.google.protobuf.AbstractParser<Limit>() {
            public Limit parsePartialFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Limit(input, extensionRegistry);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<Limit> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int SKIP_FIELD_NUMBER = 1;
        private long skip_;

        /**
         * <code>required uint64 skip = 1;</code>
         */
        public boolean hasSkip() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required uint64 skip = 1;</code>
         */
        public long getSkip() {
            return skip_;
        }

        public static final int OFFSET_FIELD_NUMBER = 2;
        private long offset_;

        /**
         * <code>optional uint64 offset = 2;</code>
         */
        public boolean hasOffset() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional uint64 offset = 2;</code>
         */
        public long getOffset() {
            return offset_;
        }

        private void initFields() {
            skip_ = 0L;
            offset_ = 0L;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            if (!hasSkip()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt64(1, skip_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeUInt64(2, offset_);
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1)
                return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream.computeUInt64Size(1, skip_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream.computeUInt64Size(2, offset_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit parseFrom(com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit parseFrom(com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit parseFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit parseDelimitedFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit parseFrom(com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Mysqlx.Crud.Limit}
         *
         * <pre>
         * limit
         * </pre>
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Crud.Limit)
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Limit_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Limit_fieldAccessorTable.ensureFieldAccessorsInitialized(
                        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder.class);
            }

            // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                skip_ = 0L;
                bitField0_ = (bitField0_ & ~0x00000001);
                offset_ = 0L;
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Limit_descriptor;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit getDefaultInstanceForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit build() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit buildPartial() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit result = new com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.skip_ = skip_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.offset_ = offset_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit) {
                    return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit other) {
                if (other == com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance())
                    return this;
                if (other.hasSkip()) {
                    setSkip(other.getSkip());
                }
                if (other.hasOffset()) {
                    setOffset(other.getOffset());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasSkip()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private long skip_;

            /**
             * <code>required uint64 skip = 1;</code>
             */
            public boolean hasSkip() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required uint64 skip = 1;</code>
             */
            public long getSkip() {
                return skip_;
            }

            /**
             * <code>required uint64 skip = 1;</code>
             */
            public Builder setSkip(long value) {
                bitField0_ |= 0x00000001;
                skip_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint64 skip = 1;</code>
             */
            public Builder clearSkip() {
                bitField0_ = (bitField0_ & ~0x00000001);
                skip_ = 0L;
                onChanged();
                return this;
            }

            private long offset_;

            /**
             * <code>optional uint64 offset = 2;</code>
             */
            public boolean hasOffset() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional uint64 offset = 2;</code>
             */
            public long getOffset() {
                return offset_;
            }

            /**
             * <code>optional uint64 offset = 2;</code>
             */
            public Builder setOffset(long value) {
                bitField0_ |= 0x00000002;
                offset_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional uint64 offset = 2;</code>
             */
            public Builder clearOffset() {
                bitField0_ = (bitField0_ & ~0x00000002);
                offset_ = 0L;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:Mysqlx.Crud.Limit)
        }

        static {
            defaultInstance = new Limit(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Mysqlx.Crud.Limit)
    }

    public interface OrderOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Mysqlx.Crud.Order)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required string field = 1;</code>
         */
        boolean hasField();

        /**
         * <code>required string field = 1;</code>
         */
        java.lang.String getField();

        /**
         * <code>required string field = 1;</code>
         */
        com.google.protobuf.ByteString getFieldBytes();

        /**
         * <code>optional .Mysqlx.Crud.Order.Direction direction = 2 [default = ASC];</code>
         */
        boolean hasDirection();

        /**
         * <code>optional .Mysqlx.Crud.Order.Direction direction = 2 [default = ASC];</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Direction getDirection();
    }

    /**
     * Protobuf type {@code Mysqlx.Crud.Order}
     *
     * <pre>
     * sort order
     * </pre>
     */
    public static final class Order extends com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:Mysqlx.Crud.Order)
            OrderOrBuilder {
        // Use Order.newBuilder() to construct.
        private Order(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Order(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Order defaultInstance;

        public static Order getDefaultInstance() {
            return defaultInstance;
        }

        public Order getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Order(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            com.google.protobuf.ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000001;
                            field_ = bs;
                            break;
                        }
                        case 16: {
                            int rawValue = input.readEnum();
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Direction value = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Direction
                                    .valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(2, rawValue);
                            } else {
                                bitField0_ |= 0x00000002;
                                direction_ = value;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Order_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Order_fieldAccessorTable.ensureFieldAccessorsInitialized(
                    com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder.class);
        }

        public static com.google.protobuf.Parser<Order> PARSER = new com.google.protobuf.AbstractParser<Order>() {
            public Order parsePartialFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Order(input, extensionRegistry);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<Order> getParserForType() {
            return PARSER;
        }

        /**
         * Protobuf enum {@code Mysqlx.Crud.Order.Direction}
         */
        public enum Direction implements com.google.protobuf.ProtocolMessageEnum {
            /**
             * <code>ASC = 1;</code>
             */
            ASC(0, 1),
            /**
             * <code>DESC = 2;</code>
             */
            DESC(1, 2), ;

            /**
             * <code>ASC = 1;</code>
             */
            public static final int ASC_VALUE = 1;
            /**
             * <code>DESC = 2;</code>
             */
            public static final int DESC_VALUE = 2;

            public final int getNumber() {
                return value;
            }

            public static Direction valueOf(int value) {
                switch (value) {
                    case 1:
                        return ASC;
                    case 2:
                        return DESC;
                    default:
                        return null;
                }
            }

            public static com.google.protobuf.Internal.EnumLiteMap<Direction> internalGetValueMap() {
                return internalValueMap;
            }

            private static com.google.protobuf.Internal.EnumLiteMap<Direction> internalValueMap = new com.google.protobuf.Internal.EnumLiteMap<Direction>() {
                public Direction findValueByNumber(int number) {
                    return Direction.valueOf(number);
                }
            };

            public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
                return getDescriptor().getValues().get(index);
            }

            public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
                return getDescriptor();
            }

            public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.getDescriptor().getEnumTypes().get(0);
            }

            private static final Direction[] VALUES = values();

            public static Direction valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
                if (desc.getType() != getDescriptor()) {
                    throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
                }
                return VALUES[desc.getIndex()];
            }

            private final int index;
            private final int value;

            private Direction(int index, int value) {
                this.index = index;
                this.value = value;
            }

            // @@protoc_insertion_point(enum_scope:Mysqlx.Crud.Order.Direction)
        }

        private int bitField0_;
        public static final int FIELD_FIELD_NUMBER = 1;
        private java.lang.Object field_;

        /**
         * <code>required string field = 1;</code>
         */
        public boolean hasField() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required string field = 1;</code>
         */
        public java.lang.String getField() {
            java.lang.Object ref = field_;
            if (ref instanceof java.lang.String) {
                return (java.lang.String) ref;
            } else {
                com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                java.lang.String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    field_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string field = 1;</code>
         */
        public com.google.protobuf.ByteString getFieldBytes() {
            java.lang.Object ref = field_;
            if (ref instanceof java.lang.String) {
                com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
                field_ = b;
                return b;
            } else {
                return (com.google.protobuf.ByteString) ref;
            }
        }

        public static final int DIRECTION_FIELD_NUMBER = 2;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Direction direction_;

        /**
         * <code>optional .Mysqlx.Crud.Order.Direction direction = 2 [default = ASC];</code>
         */
        public boolean hasDirection() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional .Mysqlx.Crud.Order.Direction direction = 2 [default = ASC];</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Direction getDirection() {
            return direction_;
        }

        private void initFields() {
            field_ = "";
            direction_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Direction.ASC;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            if (!hasField()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBytes(1, getFieldBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeEnum(2, direction_.getNumber());
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1)
                return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream.computeBytesSize(1, getFieldBytes());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream.computeEnumSize(2, direction_.getNumber());
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order parseFrom(com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order parseFrom(com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order parseFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order parseDelimitedFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order parseFrom(com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Mysqlx.Crud.Order}
         *
         * <pre>
         * sort order
         * </pre>
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Crud.Order)
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Order_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Order_fieldAccessorTable.ensureFieldAccessorsInitialized(
                        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder.class);
            }

            // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                field_ = "";
                bitField0_ = (bitField0_ & ~0x00000001);
                direction_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Direction.ASC;
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Order_descriptor;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order getDefaultInstanceForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.getDefaultInstance();
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order build() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order buildPartial() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order result = new com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.field_ = field_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.direction_ = direction_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order) {
                    return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order other) {
                if (other == com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.getDefaultInstance())
                    return this;
                if (other.hasField()) {
                    bitField0_ |= 0x00000001;
                    field_ = other.field_;
                    onChanged();
                }
                if (other.hasDirection()) {
                    setDirection(other.getDirection());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasField()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private java.lang.Object field_ = "";

            /**
             * <code>required string field = 1;</code>
             */
            public boolean hasField() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required string field = 1;</code>
             */
            public java.lang.String getField() {
                java.lang.Object ref = field_;
                if (!(ref instanceof java.lang.String)) {
                    com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
                    java.lang.String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        field_ = s;
                    }
                    return s;
                } else {
                    return (java.lang.String) ref;
                }
            }

            /**
             * <code>required string field = 1;</code>
             */
            public com.google.protobuf.ByteString getFieldBytes() {
                java.lang.Object ref = field_;
                if (ref instanceof String) {
                    com.google.protobuf.ByteString b = com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
                    field_ = b;
                    return b;
                } else {
                    return (com.google.protobuf.ByteString) ref;
                }
            }

            /**
             * <code>required string field = 1;</code>
             */
            public Builder setField(java.lang.String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                field_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string field = 1;</code>
             */
            public Builder clearField() {
                bitField0_ = (bitField0_ & ~0x00000001);
                field_ = getDefaultInstance().getField();
                onChanged();
                return this;
            }

            /**
             * <code>required string field = 1;</code>
             */
            public Builder setFieldBytes(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000001;
                field_ = value;
                onChanged();
                return this;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Direction direction_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Direction.ASC;

            /**
             * <code>optional .Mysqlx.Crud.Order.Direction direction = 2 [default = ASC];</code>
             */
            public boolean hasDirection() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional .Mysqlx.Crud.Order.Direction direction = 2 [default = ASC];</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Direction getDirection() {
                return direction_;
            }

            /**
             * <code>optional .Mysqlx.Crud.Order.Direction direction = 2 [default = ASC];</code>
             */
            public Builder setDirection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Direction value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                direction_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Order.Direction direction = 2 [default = ASC];</code>
             */
            public Builder clearDirection() {
                bitField0_ = (bitField0_ & ~0x00000002);
                direction_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Direction.ASC;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:Mysqlx.Crud.Order)
        }

        static {
            defaultInstance = new Order(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Mysqlx.Crud.Order)
    }

    public interface PrepareFindOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Mysqlx.Crud.PrepareFind)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        boolean hasStmtId();

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        int getStmtId();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        boolean hasCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        boolean hasDataModel();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> getProjectionList();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column getProjection(int index);

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        int getProjectionCount();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionOrBuilderList();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder getProjectionOrBuilder(int index);

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
         */
        boolean hasCriteria();

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr getCriteria();

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder getCriteriaOrBuilder();

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
         */
        boolean hasLimit();

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit getLimit();

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder getLimitOrBuilder();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> getOrderList();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order getOrder(int index);

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        int getOrderCount();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderOrBuilderList();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder getOrderOrBuilder(int index);
    }

    /**
     * Protobuf type {@code Mysqlx.Crud.PrepareFind}
     *
     * <pre>
     * Query a key-value collection
     * ``stmt_id`` has to be unique to the session and not in use yet
     *  :param stmt_id: session unique, not in use statement-id
     *  :Returns: :protobuf:msg:`Mysqlx.Sql::PrepareStmtOk` or :protobuf:msg:`Mysqlx::Error`
     * </pre>
     */
    public static final class PrepareFind extends com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:Mysqlx.Crud.PrepareFind)
            PrepareFindOrBuilder {
        // Use PrepareFind.newBuilder() to construct.
        private PrepareFind(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private PrepareFind(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final PrepareFind defaultInstance;

        public static PrepareFind getDefaultInstance() {
            return defaultInstance;
        }

        public PrepareFind getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private PrepareFind(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            stmtId_ = input.readUInt32();
                            break;
                        }
                        case 18: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                                subBuilder = collection_.toBuilder();
                            }
                            collection_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(collection_);
                                collection_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000002;
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(3, rawValue);
                            } else {
                                bitField0_ |= 0x00000004;
                                dataModel_ = value;
                            }
                            break;
                        }
                        case 34: {
                            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                                projection_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column>();
                                mutable_bitField0_ |= 0x00000008;
                            }
                            projection_.add(input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.PARSER, extensionRegistry));
                            break;
                        }
                        case 42: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                                subBuilder = criteria_.toBuilder();
                            }
                            criteria_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(criteria_);
                                criteria_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000008;
                            break;
                        }
                        case 50: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                                subBuilder = limit_.toBuilder();
                            }
                            limit_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(limit_);
                                limit_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000010;
                            break;
                        }
                        case 58: {
                            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                                order_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order>();
                                mutable_bitField0_ |= 0x00000040;
                            }
                            order_.add(input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                    projection_ = java.util.Collections.unmodifiableList(projection_);
                }
                if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                    order_ = java.util.Collections.unmodifiableList(order_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareFind_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareFind_fieldAccessorTable.ensureFieldAccessorsInitialized(
                    com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind.Builder.class);
        }

        public static com.google.protobuf.Parser<PrepareFind> PARSER = new com.google.protobuf.AbstractParser<PrepareFind>() {
            public PrepareFind parsePartialFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new PrepareFind(input, extensionRegistry);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<PrepareFind> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int STMT_ID_FIELD_NUMBER = 1;
        private int stmtId_;

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        public boolean hasStmtId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        public int getStmtId() {
            return stmtId_;
        }

        public static final int COLLECTION_FIELD_NUMBER = 2;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_;

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public boolean hasCollection() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
            return collection_;
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
            return collection_;
        }

        public static final int DATA_MODEL_FIELD_NUMBER = 3;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_;

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        public boolean hasDataModel() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
            return dataModel_;
        }

        public static final int PROJECTION_FIELD_NUMBER = 4;
        private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> projection_;

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> getProjectionList() {
            return projection_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionOrBuilderList() {
            return projection_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public int getProjectionCount() {
            return projection_.size();
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column getProjection(int index) {
            return projection_.get(index);
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder getProjectionOrBuilder(int index) {
            return projection_.get(index);
        }

        public static final int CRITERIA_FIELD_NUMBER = 5;
        private com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr criteria_;

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
         */
        public boolean hasCriteria() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr getCriteria() {
            return criteria_;
        }

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder getCriteriaOrBuilder() {
            return criteria_;
        }

        public static final int LIMIT_FIELD_NUMBER = 6;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit limit_;

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
         */
        public boolean hasLimit() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit getLimit() {
            return limit_;
        }

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder getLimitOrBuilder() {
            return limit_;
        }

        public static final int ORDER_FIELD_NUMBER = 7;
        private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> order_;

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> getOrderList() {
            return order_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderOrBuilderList() {
            return order_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        public int getOrderCount() {
            return order_.size();
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order getOrder(int index) {
            return order_.get(index);
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder getOrderOrBuilder(int index) {
            return order_.get(index);
        }

        private void initFields() {
            stmtId_ = 0;
            collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
            projection_ = java.util.Collections.emptyList();
            criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
            limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
            order_ = java.util.Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            if (!hasStmtId()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasCollection()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getCollection().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getProjectionCount(); i++) {
                if (!getProjection(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            if (hasCriteria()) {
                if (!getCriteria().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            if (hasLimit()) {
                if (!getLimit().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            for (int i = 0; i < getOrderCount(); i++) {
                if (!getOrder(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, stmtId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeMessage(2, collection_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeEnum(3, dataModel_.getNumber());
            }
            for (int i = 0; i < projection_.size(); i++) {
                output.writeMessage(4, projection_.get(i));
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeMessage(5, criteria_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeMessage(6, limit_);
            }
            for (int i = 0; i < order_.size(); i++) {
                output.writeMessage(7, order_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1)
                return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream.computeUInt32Size(1, stmtId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, collection_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream.computeEnumSize(3, dataModel_.getNumber());
            }
            for (int i = 0; i < projection_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, projection_.get(i));
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, criteria_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, limit_);
            }
            for (int i = 0; i < order_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(7, order_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind parseFrom(com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind parseFrom(com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind parseFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind parseDelimitedFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind parseFrom(com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Mysqlx.Crud.PrepareFind}
         *
         * <pre>
         * Query a key-value collection
         * ``stmt_id`` has to be unique to the session and not in use yet
         *  :param stmt_id: session unique, not in use statement-id
         *  :Returns: :protobuf:msg:`Mysqlx.Sql::PrepareStmtOk` or :protobuf:msg:`Mysqlx::Error`
         * </pre>
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Crud.PrepareFind)
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFindOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareFind_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareFind_fieldAccessorTable.ensureFieldAccessorsInitialized(
                        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind.Builder.class);
            }

            // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getCollectionFieldBuilder();
                    getProjectionFieldBuilder();
                    getCriteriaFieldBuilder();
                    getLimitFieldBuilder();
                    getOrderFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                stmtId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                bitField0_ = (bitField0_ & ~0x00000004);
                if (projectionBuilder_ == null) {
                    projection_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                } else {
                    projectionBuilder_.clear();
                }
                if (criteriaBuilder_ == null) {
                    criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
                } else {
                    criteriaBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000010);
                if (limitBuilder_ == null) {
                    limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
                } else {
                    limitBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000020);
                if (orderBuilder_ == null) {
                    order_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000040);
                } else {
                    orderBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareFind_descriptor;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind getDefaultInstanceForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind.getDefaultInstance();
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind build() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind buildPartial() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind result = new com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.stmtId_ = stmtId_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                if (collectionBuilder_ == null) {
                    result.collection_ = collection_;
                } else {
                    result.collection_ = collectionBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.dataModel_ = dataModel_;
                if (projectionBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008)) {
                        projection_ = java.util.Collections.unmodifiableList(projection_);
                        bitField0_ = (bitField0_ & ~0x00000008);
                    }
                    result.projection_ = projection_;
                } else {
                    result.projection_ = projectionBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000008;
                }
                if (criteriaBuilder_ == null) {
                    result.criteria_ = criteria_;
                } else {
                    result.criteria_ = criteriaBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                    to_bitField0_ |= 0x00000010;
                }
                if (limitBuilder_ == null) {
                    result.limit_ = limit_;
                } else {
                    result.limit_ = limitBuilder_.build();
                }
                if (orderBuilder_ == null) {
                    if (((bitField0_ & 0x00000040) == 0x00000040)) {
                        order_ = java.util.Collections.unmodifiableList(order_);
                        bitField0_ = (bitField0_ & ~0x00000040);
                    }
                    result.order_ = order_;
                } else {
                    result.order_ = orderBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind) {
                    return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind other) {
                if (other == com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind.getDefaultInstance())
                    return this;
                if (other.hasStmtId()) {
                    setStmtId(other.getStmtId());
                }
                if (other.hasCollection()) {
                    mergeCollection(other.getCollection());
                }
                if (other.hasDataModel()) {
                    setDataModel(other.getDataModel());
                }
                if (projectionBuilder_ == null) {
                    if (!other.projection_.isEmpty()) {
                        if (projection_.isEmpty()) {
                            projection_ = other.projection_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                        } else {
                            ensureProjectionIsMutable();
                            projection_.addAll(other.projection_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.projection_.isEmpty()) {
                        if (projectionBuilder_.isEmpty()) {
                            projectionBuilder_.dispose();
                            projectionBuilder_ = null;
                            projection_ = other.projection_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                            projectionBuilder_ = com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getProjectionFieldBuilder() : null;
                        } else {
                            projectionBuilder_.addAllMessages(other.projection_);
                        }
                    }
                }
                if (other.hasCriteria()) {
                    mergeCriteria(other.getCriteria());
                }
                if (other.hasLimit()) {
                    mergeLimit(other.getLimit());
                }
                if (orderBuilder_ == null) {
                    if (!other.order_.isEmpty()) {
                        if (order_.isEmpty()) {
                            order_ = other.order_;
                            bitField0_ = (bitField0_ & ~0x00000040);
                        } else {
                            ensureOrderIsMutable();
                            order_.addAll(other.order_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.order_.isEmpty()) {
                        if (orderBuilder_.isEmpty()) {
                            orderBuilder_.dispose();
                            orderBuilder_ = null;
                            order_ = other.order_;
                            bitField0_ = (bitField0_ & ~0x00000040);
                            orderBuilder_ = com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getOrderFieldBuilder() : null;
                        } else {
                            orderBuilder_.addAllMessages(other.order_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasStmtId()) {

                    return false;
                }
                if (!hasCollection()) {

                    return false;
                }
                if (!getCollection().isInitialized()) {

                    return false;
                }
                for (int i = 0; i < getProjectionCount(); i++) {
                    if (!getProjection(i).isInitialized()) {

                        return false;
                    }
                }
                if (hasCriteria()) {
                    if (!getCriteria().isInitialized()) {

                        return false;
                    }
                }
                if (hasLimit()) {
                    if (!getLimit().isInitialized()) {

                        return false;
                    }
                }
                for (int i = 0; i < getOrderCount(); i++) {
                    if (!getOrder(i).isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareFind) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private int stmtId_;

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public boolean hasStmtId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public int getStmtId() {
                return stmtId_;
            }

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public Builder setStmtId(int value) {
                bitField0_ |= 0x00000001;
                stmtId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public Builder clearStmtId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                stmtId_ = 0;
                onChanged();
                return this;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> collectionBuilder_;

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public boolean hasCollection() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
                if (collectionBuilder_ == null) {
                    return collection_;
                } else {
                    return collectionBuilder_.getMessage();
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    collection_ = value;
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder builderForValue) {
                if (collectionBuilder_ == null) {
                    collection_ = builderForValue.build();
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder mergeCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002) && collection_ != com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance()) {
                        collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.newBuilder(collection_).mergeFrom(value).buildPartial();
                    } else {
                        collection_ = value;
                    }
                    onChanged();
                } else {
                    collectionBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder clearCollection() {
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                    onChanged();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder getCollectionBuilder() {
                bitField0_ |= 0x00000002;
                onChanged();
                return getCollectionFieldBuilder().getBuilder();
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
                if (collectionBuilder_ != null) {
                    return collectionBuilder_.getMessageOrBuilder();
                } else {
                    return collection_;
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> getCollectionFieldBuilder() {
                if (collectionBuilder_ == null) {
                    collectionBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder>(
                            getCollection(), getParentForChildren(), isClean());
                    collection_ = null;
                }
                return collectionBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public boolean hasDataModel() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
                return dataModel_;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public Builder setDataModel(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                dataModel_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public Builder clearDataModel() {
                bitField0_ = (bitField0_ & ~0x00000004);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                onChanged();
                return this;
            }

            private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> projection_ = java.util.Collections.emptyList();

            private void ensureProjectionIsMutable() {
                if (!((bitField0_ & 0x00000008) == 0x00000008)) {
                    projection_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column>(projection_);
                    bitField0_ |= 0x00000008;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> projectionBuilder_;

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> getProjectionList() {
                if (projectionBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(projection_);
                } else {
                    return projectionBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public int getProjectionCount() {
                if (projectionBuilder_ == null) {
                    return projection_.size();
                } else {
                    return projectionBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column getProjection(int index) {
                if (projectionBuilder_ == null) {
                    return projection_.get(index);
                } else {
                    return projectionBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder setProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column value) {
                if (projectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureProjectionIsMutable();
                    projection_.set(index, value);
                    onChanged();
                } else {
                    projectionBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder setProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder builderForValue) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    projectionBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addProjection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column value) {
                if (projectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureProjectionIsMutable();
                    projection_.add(value);
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column value) {
                if (projectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureProjectionIsMutable();
                    projection_.add(index, value);
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addProjection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder builderForValue) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.add(builderForValue.build());
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder builderForValue) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addAllProjection(java.lang.Iterable<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> values) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(values, projection_);
                    onChanged();
                } else {
                    projectionBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder clearProjection() {
                if (projectionBuilder_ == null) {
                    projection_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                    onChanged();
                } else {
                    projectionBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder removeProjection(int index) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.remove(index);
                    onChanged();
                } else {
                    projectionBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder getProjectionBuilder(int index) {
                return getProjectionFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder getProjectionOrBuilder(int index) {
                if (projectionBuilder_ == null) {
                    return projection_.get(index);
                } else {
                    return projectionBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionOrBuilderList() {
                if (projectionBuilder_ != null) {
                    return projectionBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(projection_);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder addProjectionBuilder() {
                return getProjectionFieldBuilder().addBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder addProjectionBuilder(int index) {
                return getProjectionFieldBuilder().addBuilder(index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder> getProjectionBuilderList() {
                return getProjectionFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionFieldBuilder() {
                if (projectionBuilder_ == null) {
                    projectionBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder>(
                            projection_, ((bitField0_ & 0x00000008) == 0x00000008), getParentForChildren(), isClean());
                    projection_ = null;
                }
                return projectionBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder> criteriaBuilder_;

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public boolean hasCriteria() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr getCriteria() {
                if (criteriaBuilder_ == null) {
                    return criteria_;
                } else {
                    return criteriaBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public Builder setCriteria(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr value) {
                if (criteriaBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    criteria_ = value;
                    onChanged();
                } else {
                    criteriaBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000010;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public Builder setCriteria(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder builderForValue) {
                if (criteriaBuilder_ == null) {
                    criteria_ = builderForValue.build();
                    onChanged();
                } else {
                    criteriaBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000010;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public Builder mergeCriteria(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr value) {
                if (criteriaBuilder_ == null) {
                    if (((bitField0_ & 0x00000010) == 0x00000010) && criteria_ != com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance()) {
                        criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.newBuilder(criteria_).mergeFrom(value).buildPartial();
                    } else {
                        criteria_ = value;
                    }
                    onChanged();
                } else {
                    criteriaBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000010;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public Builder clearCriteria() {
                if (criteriaBuilder_ == null) {
                    criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
                    onChanged();
                } else {
                    criteriaBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000010);
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder getCriteriaBuilder() {
                bitField0_ |= 0x00000010;
                onChanged();
                return getCriteriaFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder getCriteriaOrBuilder() {
                if (criteriaBuilder_ != null) {
                    return criteriaBuilder_.getMessageOrBuilder();
                } else {
                    return criteria_;
                }
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder> getCriteriaFieldBuilder() {
                if (criteriaBuilder_ == null) {
                    criteriaBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder>(
                            getCriteria(), getParentForChildren(), isClean());
                    criteria_ = null;
                }
                return criteriaBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder> limitBuilder_;

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public boolean hasLimit() {
                return ((bitField0_ & 0x00000020) == 0x00000020);
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit getLimit() {
                if (limitBuilder_ == null) {
                    return limit_;
                } else {
                    return limitBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public Builder setLimit(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit value) {
                if (limitBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    limit_ = value;
                    onChanged();
                } else {
                    limitBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000020;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public Builder setLimit(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder builderForValue) {
                if (limitBuilder_ == null) {
                    limit_ = builderForValue.build();
                    onChanged();
                } else {
                    limitBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000020;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public Builder mergeLimit(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit value) {
                if (limitBuilder_ == null) {
                    if (((bitField0_ & 0x00000020) == 0x00000020) && limit_ != com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance()) {
                        limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.newBuilder(limit_).mergeFrom(value).buildPartial();
                    } else {
                        limit_ = value;
                    }
                    onChanged();
                } else {
                    limitBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000020;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public Builder clearLimit() {
                if (limitBuilder_ == null) {
                    limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
                    onChanged();
                } else {
                    limitBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000020);
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder getLimitBuilder() {
                bitField0_ |= 0x00000020;
                onChanged();
                return getLimitFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder getLimitOrBuilder() {
                if (limitBuilder_ != null) {
                    return limitBuilder_.getMessageOrBuilder();
                } else {
                    return limit_;
                }
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder> getLimitFieldBuilder() {
                if (limitBuilder_ == null) {
                    limitBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder>(
                            getLimit(), getParentForChildren(), isClean());
                    limit_ = null;
                }
                return limitBuilder_;
            }

            private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> order_ = java.util.Collections.emptyList();

            private void ensureOrderIsMutable() {
                if (!((bitField0_ & 0x00000040) == 0x00000040)) {
                    order_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order>(order_);
                    bitField0_ |= 0x00000040;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> orderBuilder_;

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> getOrderList() {
                if (orderBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(order_);
                } else {
                    return orderBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public int getOrderCount() {
                if (orderBuilder_ == null) {
                    return order_.size();
                } else {
                    return orderBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order getOrder(int index) {
                if (orderBuilder_ == null) {
                    return order_.get(index);
                } else {
                    return orderBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder setOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order value) {
                if (orderBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOrderIsMutable();
                    order_.set(index, value);
                    onChanged();
                } else {
                    orderBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder setOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder builderForValue) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    orderBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder addOrder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order value) {
                if (orderBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOrderIsMutable();
                    order_.add(value);
                    onChanged();
                } else {
                    orderBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder addOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order value) {
                if (orderBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOrderIsMutable();
                    order_.add(index, value);
                    onChanged();
                } else {
                    orderBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder addOrder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder builderForValue) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.add(builderForValue.build());
                    onChanged();
                } else {
                    orderBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder addOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder builderForValue) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    orderBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder addAllOrder(java.lang.Iterable<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> values) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(values, order_);
                    onChanged();
                } else {
                    orderBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder clearOrder() {
                if (orderBuilder_ == null) {
                    order_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000040);
                    onChanged();
                } else {
                    orderBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder removeOrder(int index) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.remove(index);
                    onChanged();
                } else {
                    orderBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder getOrderBuilder(int index) {
                return getOrderFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder getOrderOrBuilder(int index) {
                if (orderBuilder_ == null) {
                    return order_.get(index);
                } else {
                    return orderBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderOrBuilderList() {
                if (orderBuilder_ != null) {
                    return orderBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(order_);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder addOrderBuilder() {
                return getOrderFieldBuilder().addBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder addOrderBuilder(int index) {
                return getOrderFieldBuilder().addBuilder(index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder> getOrderBuilderList() {
                return getOrderFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderFieldBuilder() {
                if (orderBuilder_ == null) {
                    orderBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder>(
                            order_, ((bitField0_ & 0x00000040) == 0x00000040), getParentForChildren(), isClean());
                    order_ = null;
                }
                return orderBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:Mysqlx.Crud.PrepareFind)
        }

        static {
            defaultInstance = new PrepareFind(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Mysqlx.Crud.PrepareFind)
    }

    public interface PrepareInsertOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Mysqlx.Crud.PrepareInsert)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        boolean hasStmtId();

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        int getStmtId();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        boolean hasCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        boolean hasDataModel();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> getProjectionList();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column getProjection(int index);

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        int getProjectionCount();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionOrBuilderList();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder getProjectionOrBuilder(int index);
    }

    /**
     * Protobuf type {@code Mysqlx.Crud.PrepareInsert}
     *
     * <pre>
     * Prepare a insert into a collection
     * ``stmt_id`` has to be unique to the session and not in use yet
     *  :param stmt_id: session unique, not in use statement-id
     *  :param collection: collection to insert into
     *  :param projection: name of the columns to insert data into
     *  :Returns: :protobuf:msg:`Mysqlx.Sql::PrepareStmtOk` or :protobuf:msg:`Mysqlx::Error`
     * </pre>
     */
    public static final class PrepareInsert extends com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:Mysqlx.Crud.PrepareInsert)
            PrepareInsertOrBuilder {
        // Use PrepareInsert.newBuilder() to construct.
        private PrepareInsert(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private PrepareInsert(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final PrepareInsert defaultInstance;

        public static PrepareInsert getDefaultInstance() {
            return defaultInstance;
        }

        public PrepareInsert getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private PrepareInsert(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            stmtId_ = input.readUInt32();
                            break;
                        }
                        case 18: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                                subBuilder = collection_.toBuilder();
                            }
                            collection_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(collection_);
                                collection_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000002;
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(3, rawValue);
                            } else {
                                bitField0_ |= 0x00000004;
                                dataModel_ = value;
                            }
                            break;
                        }
                        case 34: {
                            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                                projection_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column>();
                                mutable_bitField0_ |= 0x00000008;
                            }
                            projection_.add(input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                    projection_ = java.util.Collections.unmodifiableList(projection_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareInsert_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareInsert_fieldAccessorTable.ensureFieldAccessorsInitialized(
                    com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert.Builder.class);
        }

        public static com.google.protobuf.Parser<PrepareInsert> PARSER = new com.google.protobuf.AbstractParser<PrepareInsert>() {
            public PrepareInsert parsePartialFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new PrepareInsert(input, extensionRegistry);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<PrepareInsert> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int STMT_ID_FIELD_NUMBER = 1;
        private int stmtId_;

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        public boolean hasStmtId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        public int getStmtId() {
            return stmtId_;
        }

        public static final int COLLECTION_FIELD_NUMBER = 2;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_;

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public boolean hasCollection() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
            return collection_;
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
            return collection_;
        }

        public static final int DATA_MODEL_FIELD_NUMBER = 3;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_;

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        public boolean hasDataModel() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
            return dataModel_;
        }

        public static final int PROJECTION_FIELD_NUMBER = 4;
        private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> projection_;

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> getProjectionList() {
            return projection_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionOrBuilderList() {
            return projection_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public int getProjectionCount() {
            return projection_.size();
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column getProjection(int index) {
            return projection_.get(index);
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder getProjectionOrBuilder(int index) {
            return projection_.get(index);
        }

        private void initFields() {
            stmtId_ = 0;
            collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
            projection_ = java.util.Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            if (!hasStmtId()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasCollection()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getCollection().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getProjectionCount(); i++) {
                if (!getProjection(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, stmtId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeMessage(2, collection_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeEnum(3, dataModel_.getNumber());
            }
            for (int i = 0; i < projection_.size(); i++) {
                output.writeMessage(4, projection_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1)
                return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream.computeUInt32Size(1, stmtId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, collection_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream.computeEnumSize(3, dataModel_.getNumber());
            }
            for (int i = 0; i < projection_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, projection_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert parseFrom(com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert parseFrom(com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert parseFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert parseDelimitedFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert parseFrom(com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Mysqlx.Crud.PrepareInsert}
         *
         * <pre>
         * Prepare a insert into a collection
         * ``stmt_id`` has to be unique to the session and not in use yet
         *  :param stmt_id: session unique, not in use statement-id
         *  :param collection: collection to insert into
         *  :param projection: name of the columns to insert data into
         *  :Returns: :protobuf:msg:`Mysqlx.Sql::PrepareStmtOk` or :protobuf:msg:`Mysqlx::Error`
         * </pre>
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Crud.PrepareInsert)
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsertOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareInsert_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareInsert_fieldAccessorTable.ensureFieldAccessorsInitialized(
                        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert.Builder.class);
            }

            // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getCollectionFieldBuilder();
                    getProjectionFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                stmtId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                bitField0_ = (bitField0_ & ~0x00000004);
                if (projectionBuilder_ == null) {
                    projection_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                } else {
                    projectionBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareInsert_descriptor;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert getDefaultInstanceForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert.getDefaultInstance();
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert build() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert buildPartial() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert result = new com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.stmtId_ = stmtId_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                if (collectionBuilder_ == null) {
                    result.collection_ = collection_;
                } else {
                    result.collection_ = collectionBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.dataModel_ = dataModel_;
                if (projectionBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008)) {
                        projection_ = java.util.Collections.unmodifiableList(projection_);
                        bitField0_ = (bitField0_ & ~0x00000008);
                    }
                    result.projection_ = projection_;
                } else {
                    result.projection_ = projectionBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert) {
                    return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert other) {
                if (other == com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert.getDefaultInstance())
                    return this;
                if (other.hasStmtId()) {
                    setStmtId(other.getStmtId());
                }
                if (other.hasCollection()) {
                    mergeCollection(other.getCollection());
                }
                if (other.hasDataModel()) {
                    setDataModel(other.getDataModel());
                }
                if (projectionBuilder_ == null) {
                    if (!other.projection_.isEmpty()) {
                        if (projection_.isEmpty()) {
                            projection_ = other.projection_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                        } else {
                            ensureProjectionIsMutable();
                            projection_.addAll(other.projection_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.projection_.isEmpty()) {
                        if (projectionBuilder_.isEmpty()) {
                            projectionBuilder_.dispose();
                            projectionBuilder_ = null;
                            projection_ = other.projection_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                            projectionBuilder_ = com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getProjectionFieldBuilder() : null;
                        } else {
                            projectionBuilder_.addAllMessages(other.projection_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasStmtId()) {

                    return false;
                }
                if (!hasCollection()) {

                    return false;
                }
                if (!getCollection().isInitialized()) {

                    return false;
                }
                for (int i = 0; i < getProjectionCount(); i++) {
                    if (!getProjection(i).isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareInsert) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private int stmtId_;

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public boolean hasStmtId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public int getStmtId() {
                return stmtId_;
            }

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public Builder setStmtId(int value) {
                bitField0_ |= 0x00000001;
                stmtId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public Builder clearStmtId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                stmtId_ = 0;
                onChanged();
                return this;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> collectionBuilder_;

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public boolean hasCollection() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
                if (collectionBuilder_ == null) {
                    return collection_;
                } else {
                    return collectionBuilder_.getMessage();
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    collection_ = value;
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder builderForValue) {
                if (collectionBuilder_ == null) {
                    collection_ = builderForValue.build();
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder mergeCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002) && collection_ != com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance()) {
                        collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.newBuilder(collection_).mergeFrom(value).buildPartial();
                    } else {
                        collection_ = value;
                    }
                    onChanged();
                } else {
                    collectionBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder clearCollection() {
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                    onChanged();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder getCollectionBuilder() {
                bitField0_ |= 0x00000002;
                onChanged();
                return getCollectionFieldBuilder().getBuilder();
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
                if (collectionBuilder_ != null) {
                    return collectionBuilder_.getMessageOrBuilder();
                } else {
                    return collection_;
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> getCollectionFieldBuilder() {
                if (collectionBuilder_ == null) {
                    collectionBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder>(
                            getCollection(), getParentForChildren(), isClean());
                    collection_ = null;
                }
                return collectionBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public boolean hasDataModel() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
                return dataModel_;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public Builder setDataModel(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                dataModel_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public Builder clearDataModel() {
                bitField0_ = (bitField0_ & ~0x00000004);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                onChanged();
                return this;
            }

            private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> projection_ = java.util.Collections.emptyList();

            private void ensureProjectionIsMutable() {
                if (!((bitField0_ & 0x00000008) == 0x00000008)) {
                    projection_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column>(projection_);
                    bitField0_ |= 0x00000008;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> projectionBuilder_;

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> getProjectionList() {
                if (projectionBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(projection_);
                } else {
                    return projectionBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public int getProjectionCount() {
                if (projectionBuilder_ == null) {
                    return projection_.size();
                } else {
                    return projectionBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column getProjection(int index) {
                if (projectionBuilder_ == null) {
                    return projection_.get(index);
                } else {
                    return projectionBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder setProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column value) {
                if (projectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureProjectionIsMutable();
                    projection_.set(index, value);
                    onChanged();
                } else {
                    projectionBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder setProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder builderForValue) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    projectionBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addProjection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column value) {
                if (projectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureProjectionIsMutable();
                    projection_.add(value);
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column value) {
                if (projectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureProjectionIsMutable();
                    projection_.add(index, value);
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addProjection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder builderForValue) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.add(builderForValue.build());
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder builderForValue) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addAllProjection(java.lang.Iterable<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> values) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(values, projection_);
                    onChanged();
                } else {
                    projectionBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder clearProjection() {
                if (projectionBuilder_ == null) {
                    projection_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                    onChanged();
                } else {
                    projectionBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder removeProjection(int index) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.remove(index);
                    onChanged();
                } else {
                    projectionBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder getProjectionBuilder(int index) {
                return getProjectionFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder getProjectionOrBuilder(int index) {
                if (projectionBuilder_ == null) {
                    return projection_.get(index);
                } else {
                    return projectionBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionOrBuilderList() {
                if (projectionBuilder_ != null) {
                    return projectionBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(projection_);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder addProjectionBuilder() {
                return getProjectionFieldBuilder().addBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder addProjectionBuilder(int index) {
                return getProjectionFieldBuilder().addBuilder(index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder> getProjectionBuilderList() {
                return getProjectionFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionFieldBuilder() {
                if (projectionBuilder_ == null) {
                    projectionBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder>(
                            projection_, ((bitField0_ & 0x00000008) == 0x00000008), getParentForChildren(), isClean());
                    projection_ = null;
                }
                return projectionBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:Mysqlx.Crud.PrepareInsert)
        }

        static {
            defaultInstance = new PrepareInsert(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Mysqlx.Crud.PrepareInsert)
    }

    public interface PrepareUpdateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Mysqlx.Crud.PrepareUpdate)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        boolean hasStmtId();

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        int getStmtId();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        boolean hasCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        boolean hasDataModel();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel();
    }

    /**
     * Protobuf type {@code Mysqlx.Crud.PrepareUpdate}
     *
     * <pre>
     * Prepare a update of rows in a collection
     * ``stmt_id`` has to be unique to the session and not in use yet
     *  :param stmt_id: session unique, not in use statement-id
     *  :param collection: collection to change
     * .. todo:: sketch out CrudUpadte
     * </pre>
     */
    public static final class PrepareUpdate extends com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:Mysqlx.Crud.PrepareUpdate)
            PrepareUpdateOrBuilder {
        // Use PrepareUpdate.newBuilder() to construct.
        private PrepareUpdate(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private PrepareUpdate(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final PrepareUpdate defaultInstance;

        public static PrepareUpdate getDefaultInstance() {
            return defaultInstance;
        }

        public PrepareUpdate getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private PrepareUpdate(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            stmtId_ = input.readUInt32();
                            break;
                        }
                        case 18: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                                subBuilder = collection_.toBuilder();
                            }
                            collection_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(collection_);
                                collection_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000002;
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(3, rawValue);
                            } else {
                                bitField0_ |= 0x00000004;
                                dataModel_ = value;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareUpdate_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareUpdate_fieldAccessorTable.ensureFieldAccessorsInitialized(
                    com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate.Builder.class);
        }

        public static com.google.protobuf.Parser<PrepareUpdate> PARSER = new com.google.protobuf.AbstractParser<PrepareUpdate>() {
            public PrepareUpdate parsePartialFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new PrepareUpdate(input, extensionRegistry);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<PrepareUpdate> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int STMT_ID_FIELD_NUMBER = 1;
        private int stmtId_;

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        public boolean hasStmtId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        public int getStmtId() {
            return stmtId_;
        }

        public static final int COLLECTION_FIELD_NUMBER = 2;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_;

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public boolean hasCollection() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
            return collection_;
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
            return collection_;
        }

        public static final int DATA_MODEL_FIELD_NUMBER = 3;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_;

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        public boolean hasDataModel() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
            return dataModel_;
        }

        private void initFields() {
            stmtId_ = 0;
            collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            if (!hasStmtId()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasCollection()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getCollection().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, stmtId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeMessage(2, collection_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeEnum(3, dataModel_.getNumber());
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1)
                return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream.computeUInt32Size(1, stmtId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, collection_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream.computeEnumSize(3, dataModel_.getNumber());
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate parseFrom(com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate parseFrom(com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate parseFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate parseDelimitedFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate parseFrom(com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Mysqlx.Crud.PrepareUpdate}
         *
         * <pre>
         * Prepare a update of rows in a collection
         * ``stmt_id`` has to be unique to the session and not in use yet
         *  :param stmt_id: session unique, not in use statement-id
         *  :param collection: collection to change
         * .. todo:: sketch out CrudUpadte
         * </pre>
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Crud.PrepareUpdate)
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdateOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareUpdate_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareUpdate_fieldAccessorTable.ensureFieldAccessorsInitialized(
                        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate.Builder.class);
            }

            // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getCollectionFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                stmtId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareUpdate_descriptor;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate getDefaultInstanceForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate.getDefaultInstance();
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate build() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate buildPartial() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate result = new com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.stmtId_ = stmtId_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                if (collectionBuilder_ == null) {
                    result.collection_ = collection_;
                } else {
                    result.collection_ = collectionBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.dataModel_ = dataModel_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate) {
                    return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate other) {
                if (other == com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate.getDefaultInstance())
                    return this;
                if (other.hasStmtId()) {
                    setStmtId(other.getStmtId());
                }
                if (other.hasCollection()) {
                    mergeCollection(other.getCollection());
                }
                if (other.hasDataModel()) {
                    setDataModel(other.getDataModel());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasStmtId()) {

                    return false;
                }
                if (!hasCollection()) {

                    return false;
                }
                if (!getCollection().isInitialized()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareUpdate) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private int stmtId_;

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public boolean hasStmtId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public int getStmtId() {
                return stmtId_;
            }

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public Builder setStmtId(int value) {
                bitField0_ |= 0x00000001;
                stmtId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public Builder clearStmtId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                stmtId_ = 0;
                onChanged();
                return this;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> collectionBuilder_;

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public boolean hasCollection() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
                if (collectionBuilder_ == null) {
                    return collection_;
                } else {
                    return collectionBuilder_.getMessage();
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    collection_ = value;
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder builderForValue) {
                if (collectionBuilder_ == null) {
                    collection_ = builderForValue.build();
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder mergeCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002) && collection_ != com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance()) {
                        collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.newBuilder(collection_).mergeFrom(value).buildPartial();
                    } else {
                        collection_ = value;
                    }
                    onChanged();
                } else {
                    collectionBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder clearCollection() {
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                    onChanged();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder getCollectionBuilder() {
                bitField0_ |= 0x00000002;
                onChanged();
                return getCollectionFieldBuilder().getBuilder();
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
                if (collectionBuilder_ != null) {
                    return collectionBuilder_.getMessageOrBuilder();
                } else {
                    return collection_;
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> getCollectionFieldBuilder() {
                if (collectionBuilder_ == null) {
                    collectionBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder>(
                            getCollection(), getParentForChildren(), isClean());
                    collection_ = null;
                }
                return collectionBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public boolean hasDataModel() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
                return dataModel_;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public Builder setDataModel(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                dataModel_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public Builder clearDataModel() {
                bitField0_ = (bitField0_ & ~0x00000004);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:Mysqlx.Crud.PrepareUpdate)
        }

        static {
            defaultInstance = new PrepareUpdate(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Mysqlx.Crud.PrepareUpdate)
    }

    public interface PrepareDeleteOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Mysqlx.Crud.PrepareDelete)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        boolean hasStmtId();

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        int getStmtId();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        boolean hasCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        boolean hasDataModel();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel();

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
         */
        boolean hasCriteria();

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr getCriteria();

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder getCriteriaOrBuilder();

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
         */
        boolean hasLimit();

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit getLimit();

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder getLimitOrBuilder();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
         */
        java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> getOrderList();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order getOrder(int index);

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
         */
        int getOrderCount();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
         */
        java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderOrBuilderList();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder getOrderOrBuilder(int index);
    }

    /**
     * Protobuf type {@code Mysqlx.Crud.PrepareDelete}
     *
     * <pre>
     * Prepare to delete documents from a Collection
     * ``stmt_id`` has to be unique to the session and not in use yet
     *  :param stmt_id: session unique, not in use statement-id
     * </pre>
     */
    public static final class PrepareDelete extends com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:Mysqlx.Crud.PrepareDelete)
            PrepareDeleteOrBuilder {
        // Use PrepareDelete.newBuilder() to construct.
        private PrepareDelete(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private PrepareDelete(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final PrepareDelete defaultInstance;

        public static PrepareDelete getDefaultInstance() {
            return defaultInstance;
        }

        public PrepareDelete getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private PrepareDelete(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            stmtId_ = input.readUInt32();
                            break;
                        }
                        case 18: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                                subBuilder = collection_.toBuilder();
                            }
                            collection_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(collection_);
                                collection_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000002;
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(3, rawValue);
                            } else {
                                bitField0_ |= 0x00000004;
                                dataModel_ = value;
                            }
                            break;
                        }
                        case 34: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                                subBuilder = criteria_.toBuilder();
                            }
                            criteria_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(criteria_);
                                criteria_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000008;
                            break;
                        }
                        case 42: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                                subBuilder = limit_.toBuilder();
                            }
                            limit_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(limit_);
                                limit_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000010;
                            break;
                        }
                        case 50: {
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                                order_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            order_.add(input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                    order_ = java.util.Collections.unmodifiableList(order_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareDelete_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareDelete_fieldAccessorTable.ensureFieldAccessorsInitialized(
                    com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete.Builder.class);
        }

        public static com.google.protobuf.Parser<PrepareDelete> PARSER = new com.google.protobuf.AbstractParser<PrepareDelete>() {
            public PrepareDelete parsePartialFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new PrepareDelete(input, extensionRegistry);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<PrepareDelete> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int STMT_ID_FIELD_NUMBER = 1;
        private int stmtId_;

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        public boolean hasStmtId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required uint32 stmt_id = 1;</code>
         */
        public int getStmtId() {
            return stmtId_;
        }

        public static final int COLLECTION_FIELD_NUMBER = 2;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_;

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public boolean hasCollection() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
            return collection_;
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
            return collection_;
        }

        public static final int DATA_MODEL_FIELD_NUMBER = 3;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_;

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        public boolean hasDataModel() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
            return dataModel_;
        }

        public static final int CRITERIA_FIELD_NUMBER = 4;
        private com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr criteria_;

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
         */
        public boolean hasCriteria() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr getCriteria() {
            return criteria_;
        }

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder getCriteriaOrBuilder() {
            return criteria_;
        }

        public static final int LIMIT_FIELD_NUMBER = 5;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit limit_;

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
         */
        public boolean hasLimit() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit getLimit() {
            return limit_;
        }

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder getLimitOrBuilder() {
            return limit_;
        }

        public static final int ORDER_FIELD_NUMBER = 6;
        private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> order_;

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
         */
        public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> getOrderList() {
            return order_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
         */
        public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderOrBuilderList() {
            return order_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
         */
        public int getOrderCount() {
            return order_.size();
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order getOrder(int index) {
            return order_.get(index);
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder getOrderOrBuilder(int index) {
            return order_.get(index);
        }

        private void initFields() {
            stmtId_ = 0;
            collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
            criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
            limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
            order_ = java.util.Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            if (!hasStmtId()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasCollection()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getCollection().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (hasCriteria()) {
                if (!getCriteria().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            if (hasLimit()) {
                if (!getLimit().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            for (int i = 0; i < getOrderCount(); i++) {
                if (!getOrder(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, stmtId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeMessage(2, collection_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeEnum(3, dataModel_.getNumber());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeMessage(4, criteria_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeMessage(5, limit_);
            }
            for (int i = 0; i < order_.size(); i++) {
                output.writeMessage(6, order_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1)
                return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream.computeUInt32Size(1, stmtId_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, collection_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream.computeEnumSize(3, dataModel_.getNumber());
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, criteria_);
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, limit_);
            }
            for (int i = 0; i < order_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, order_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete parseFrom(com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete parseFrom(com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete parseFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete parseDelimitedFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete parseFrom(com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Mysqlx.Crud.PrepareDelete}
         *
         * <pre>
         * Prepare to delete documents from a Collection
         * ``stmt_id`` has to be unique to the session and not in use yet
         *  :param stmt_id: session unique, not in use statement-id
         * </pre>
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Crud.PrepareDelete)
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDeleteOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareDelete_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareDelete_fieldAccessorTable.ensureFieldAccessorsInitialized(
                        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete.Builder.class);
            }

            // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getCollectionFieldBuilder();
                    getCriteriaFieldBuilder();
                    getLimitFieldBuilder();
                    getOrderFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                stmtId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                bitField0_ = (bitField0_ & ~0x00000004);
                if (criteriaBuilder_ == null) {
                    criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
                } else {
                    criteriaBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                if (limitBuilder_ == null) {
                    limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
                } else {
                    limitBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000010);
                if (orderBuilder_ == null) {
                    order_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000020);
                } else {
                    orderBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_PrepareDelete_descriptor;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete getDefaultInstanceForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete.getDefaultInstance();
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete build() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete buildPartial() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete result = new com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.stmtId_ = stmtId_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                if (collectionBuilder_ == null) {
                    result.collection_ = collection_;
                } else {
                    result.collection_ = collectionBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.dataModel_ = dataModel_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                if (criteriaBuilder_ == null) {
                    result.criteria_ = criteria_;
                } else {
                    result.criteria_ = criteriaBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                if (limitBuilder_ == null) {
                    result.limit_ = limit_;
                } else {
                    result.limit_ = limitBuilder_.build();
                }
                if (orderBuilder_ == null) {
                    if (((bitField0_ & 0x00000020) == 0x00000020)) {
                        order_ = java.util.Collections.unmodifiableList(order_);
                        bitField0_ = (bitField0_ & ~0x00000020);
                    }
                    result.order_ = order_;
                } else {
                    result.order_ = orderBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete) {
                    return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete other) {
                if (other == com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete.getDefaultInstance())
                    return this;
                if (other.hasStmtId()) {
                    setStmtId(other.getStmtId());
                }
                if (other.hasCollection()) {
                    mergeCollection(other.getCollection());
                }
                if (other.hasDataModel()) {
                    setDataModel(other.getDataModel());
                }
                if (other.hasCriteria()) {
                    mergeCriteria(other.getCriteria());
                }
                if (other.hasLimit()) {
                    mergeLimit(other.getLimit());
                }
                if (orderBuilder_ == null) {
                    if (!other.order_.isEmpty()) {
                        if (order_.isEmpty()) {
                            order_ = other.order_;
                            bitField0_ = (bitField0_ & ~0x00000020);
                        } else {
                            ensureOrderIsMutable();
                            order_.addAll(other.order_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.order_.isEmpty()) {
                        if (orderBuilder_.isEmpty()) {
                            orderBuilder_.dispose();
                            orderBuilder_ = null;
                            order_ = other.order_;
                            bitField0_ = (bitField0_ & ~0x00000020);
                            orderBuilder_ = com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getOrderFieldBuilder() : null;
                        } else {
                            orderBuilder_.addAllMessages(other.order_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasStmtId()) {

                    return false;
                }
                if (!hasCollection()) {

                    return false;
                }
                if (!getCollection().isInitialized()) {

                    return false;
                }
                if (hasCriteria()) {
                    if (!getCriteria().isInitialized()) {

                        return false;
                    }
                }
                if (hasLimit()) {
                    if (!getLimit().isInitialized()) {

                        return false;
                    }
                }
                for (int i = 0; i < getOrderCount(); i++) {
                    if (!getOrder(i).isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxCrud.PrepareDelete) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private int stmtId_;

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public boolean hasStmtId() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public int getStmtId() {
                return stmtId_;
            }

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public Builder setStmtId(int value) {
                bitField0_ |= 0x00000001;
                stmtId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 stmt_id = 1;</code>
             */
            public Builder clearStmtId() {
                bitField0_ = (bitField0_ & ~0x00000001);
                stmtId_ = 0;
                onChanged();
                return this;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> collectionBuilder_;

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public boolean hasCollection() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
                if (collectionBuilder_ == null) {
                    return collection_;
                } else {
                    return collectionBuilder_.getMessage();
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    collection_ = value;
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder builderForValue) {
                if (collectionBuilder_ == null) {
                    collection_ = builderForValue.build();
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder mergeCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (((bitField0_ & 0x00000002) == 0x00000002) && collection_ != com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance()) {
                        collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.newBuilder(collection_).mergeFrom(value).buildPartial();
                    } else {
                        collection_ = value;
                    }
                    onChanged();
                } else {
                    collectionBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000002;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder clearCollection() {
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                    onChanged();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder getCollectionBuilder() {
                bitField0_ |= 0x00000002;
                onChanged();
                return getCollectionFieldBuilder().getBuilder();
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
                if (collectionBuilder_ != null) {
                    return collectionBuilder_.getMessageOrBuilder();
                } else {
                    return collection_;
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> getCollectionFieldBuilder() {
                if (collectionBuilder_ == null) {
                    collectionBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder>(
                            getCollection(), getParentForChildren(), isClean());
                    collection_ = null;
                }
                return collectionBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public boolean hasDataModel() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
                return dataModel_;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public Builder setDataModel(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                dataModel_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public Builder clearDataModel() {
                bitField0_ = (bitField0_ & ~0x00000004);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                onChanged();
                return this;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder> criteriaBuilder_;

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
             */
            public boolean hasCriteria() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr getCriteria() {
                if (criteriaBuilder_ == null) {
                    return criteria_;
                } else {
                    return criteriaBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
             */
            public Builder setCriteria(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr value) {
                if (criteriaBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    criteria_ = value;
                    onChanged();
                } else {
                    criteriaBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
             */
            public Builder setCriteria(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder builderForValue) {
                if (criteriaBuilder_ == null) {
                    criteria_ = builderForValue.build();
                    onChanged();
                } else {
                    criteriaBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
             */
            public Builder mergeCriteria(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr value) {
                if (criteriaBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008) && criteria_ != com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance()) {
                        criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.newBuilder(criteria_).mergeFrom(value).buildPartial();
                    } else {
                        criteria_ = value;
                    }
                    onChanged();
                } else {
                    criteriaBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
             */
            public Builder clearCriteria() {
                if (criteriaBuilder_ == null) {
                    criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
                    onChanged();
                } else {
                    criteriaBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder getCriteriaBuilder() {
                bitField0_ |= 0x00000008;
                onChanged();
                return getCriteriaFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder getCriteriaOrBuilder() {
                if (criteriaBuilder_ != null) {
                    return criteriaBuilder_.getMessageOrBuilder();
                } else {
                    return criteria_;
                }
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder> getCriteriaFieldBuilder() {
                if (criteriaBuilder_ == null) {
                    criteriaBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder>(
                            getCriteria(), getParentForChildren(), isClean());
                    criteria_ = null;
                }
                return criteriaBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder> limitBuilder_;

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
             */
            public boolean hasLimit() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit getLimit() {
                if (limitBuilder_ == null) {
                    return limit_;
                } else {
                    return limitBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
             */
            public Builder setLimit(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit value) {
                if (limitBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    limit_ = value;
                    onChanged();
                } else {
                    limitBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000010;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
             */
            public Builder setLimit(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder builderForValue) {
                if (limitBuilder_ == null) {
                    limit_ = builderForValue.build();
                    onChanged();
                } else {
                    limitBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000010;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
             */
            public Builder mergeLimit(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit value) {
                if (limitBuilder_ == null) {
                    if (((bitField0_ & 0x00000010) == 0x00000010) && limit_ != com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance()) {
                        limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.newBuilder(limit_).mergeFrom(value).buildPartial();
                    } else {
                        limit_ = value;
                    }
                    onChanged();
                } else {
                    limitBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000010;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
             */
            public Builder clearLimit() {
                if (limitBuilder_ == null) {
                    limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
                    onChanged();
                } else {
                    limitBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000010);
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder getLimitBuilder() {
                bitField0_ |= 0x00000010;
                onChanged();
                return getLimitFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder getLimitOrBuilder() {
                if (limitBuilder_ != null) {
                    return limitBuilder_.getMessageOrBuilder();
                } else {
                    return limit_;
                }
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 5;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder> getLimitFieldBuilder() {
                if (limitBuilder_ == null) {
                    limitBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder>(
                            getLimit(), getParentForChildren(), isClean());
                    limit_ = null;
                }
                return limitBuilder_;
            }

            private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> order_ = java.util.Collections.emptyList();

            private void ensureOrderIsMutable() {
                if (!((bitField0_ & 0x00000020) == 0x00000020)) {
                    order_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order>(order_);
                    bitField0_ |= 0x00000020;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> orderBuilder_;

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> getOrderList() {
                if (orderBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(order_);
                } else {
                    return orderBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public int getOrderCount() {
                if (orderBuilder_ == null) {
                    return order_.size();
                } else {
                    return orderBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order getOrder(int index) {
                if (orderBuilder_ == null) {
                    return order_.get(index);
                } else {
                    return orderBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public Builder setOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order value) {
                if (orderBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOrderIsMutable();
                    order_.set(index, value);
                    onChanged();
                } else {
                    orderBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public Builder setOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder builderForValue) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    orderBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public Builder addOrder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order value) {
                if (orderBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOrderIsMutable();
                    order_.add(value);
                    onChanged();
                } else {
                    orderBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public Builder addOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order value) {
                if (orderBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOrderIsMutable();
                    order_.add(index, value);
                    onChanged();
                } else {
                    orderBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public Builder addOrder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder builderForValue) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.add(builderForValue.build());
                    onChanged();
                } else {
                    orderBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public Builder addOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder builderForValue) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    orderBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public Builder addAllOrder(java.lang.Iterable<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> values) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(values, order_);
                    onChanged();
                } else {
                    orderBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public Builder clearOrder() {
                if (orderBuilder_ == null) {
                    order_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000020);
                    onChanged();
                } else {
                    orderBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public Builder removeOrder(int index) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.remove(index);
                    onChanged();
                } else {
                    orderBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder getOrderBuilder(int index) {
                return getOrderFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder getOrderOrBuilder(int index) {
                if (orderBuilder_ == null) {
                    return order_.get(index);
                } else {
                    return orderBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderOrBuilderList() {
                if (orderBuilder_ != null) {
                    return orderBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(order_);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder addOrderBuilder() {
                return getOrderFieldBuilder().addBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder addOrderBuilder(int index) {
                return getOrderFieldBuilder().addBuilder(index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 6;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder> getOrderBuilderList() {
                return getOrderFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderFieldBuilder() {
                if (orderBuilder_ == null) {
                    orderBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder>(
                            order_, ((bitField0_ & 0x00000020) == 0x00000020), getParentForChildren(), isClean());
                    order_ = null;
                }
                return orderBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:Mysqlx.Crud.PrepareDelete)
        }

        static {
            defaultInstance = new PrepareDelete(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Mysqlx.Crud.PrepareDelete)
    }

    public interface FindOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Mysqlx.Crud.Find)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        boolean hasCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        boolean hasDataModel();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> getProjectionList();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column getProjection(int index);

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        int getProjectionCount();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionOrBuilderList();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder getProjectionOrBuilder(int index);

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
         */
        boolean hasCriteria();

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr getCriteria();

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder getCriteriaOrBuilder();

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
         */
        boolean hasLimit();

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit getLimit();

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder getLimitOrBuilder();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> getOrderList();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order getOrder(int index);

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        int getOrderCount();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderOrBuilderList();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder getOrderOrBuilder(int index);
    }

    /**
     * Protobuf type {@code Mysqlx.Crud.Find}
     *
     * <pre>
     * Find Documents/Rows in a Collection/Table
     * .. uml::
     *   client -&gt; server: Find
     *   loop has more columns
     *   server --&gt; client: ColumnMetaData
     *   end
     *   loop has more rows
     *   server --&gt; client: Row
     *   end
     *   server --&gt; client: CursorFetchDone
     *   end
     *  :param collection: collection to insert into
     *  :param data_model: datamodel that the operations refer to
     *  :param projection: list of column names that shall be returned
     *  :param criteria: filter criteria
     *  :param limit: numbers of rows that shall be skipped and returned
     *  :param order: sort-order in which the rows/document shall be returned in
     *  :Returns: :protobuf:msg:`Mysqlx.Sql::ColumnData` and further packets or :protobuf:msg:`Mysqlx::Error`
     * </pre>
     */
    public static final class Find extends com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:Mysqlx.Crud.Find)
            FindOrBuilder {
        // Use Find.newBuilder() to construct.
        private Find(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Find(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Find defaultInstance;

        public static Find getDefaultInstance() {
            return defaultInstance;
        }

        public Find getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Find(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 18: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                                subBuilder = collection_.toBuilder();
                            }
                            collection_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(collection_);
                                collection_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000001;
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(3, rawValue);
                            } else {
                                bitField0_ |= 0x00000002;
                                dataModel_ = value;
                            }
                            break;
                        }
                        case 34: {
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                projection_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            projection_.add(input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.PARSER, extensionRegistry));
                            break;
                        }
                        case 42: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                                subBuilder = criteria_.toBuilder();
                            }
                            criteria_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(criteria_);
                                criteria_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000004;
                            break;
                        }
                        case 50: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                                subBuilder = limit_.toBuilder();
                            }
                            limit_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(limit_);
                                limit_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000008;
                            break;
                        }
                        case 58: {
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                                order_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order>();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            order_.add(input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    projection_ = java.util.Collections.unmodifiableList(projection_);
                }
                if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                    order_ = java.util.Collections.unmodifiableList(order_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Find_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Find_fieldAccessorTable.ensureFieldAccessorsInitialized(
                    com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find.Builder.class);
        }

        public static com.google.protobuf.Parser<Find> PARSER = new com.google.protobuf.AbstractParser<Find>() {
            public Find parsePartialFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Find(input, extensionRegistry);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<Find> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int COLLECTION_FIELD_NUMBER = 2;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_;

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public boolean hasCollection() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
            return collection_;
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
            return collection_;
        }

        public static final int DATA_MODEL_FIELD_NUMBER = 3;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_;

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        public boolean hasDataModel() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
            return dataModel_;
        }

        public static final int PROJECTION_FIELD_NUMBER = 4;
        private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> projection_;

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> getProjectionList() {
            return projection_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionOrBuilderList() {
            return projection_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public int getProjectionCount() {
            return projection_.size();
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column getProjection(int index) {
            return projection_.get(index);
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder getProjectionOrBuilder(int index) {
            return projection_.get(index);
        }

        public static final int CRITERIA_FIELD_NUMBER = 5;
        private com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr criteria_;

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
         */
        public boolean hasCriteria() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr getCriteria() {
            return criteria_;
        }

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder getCriteriaOrBuilder() {
            return criteria_;
        }

        public static final int LIMIT_FIELD_NUMBER = 6;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit limit_;

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
         */
        public boolean hasLimit() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit getLimit() {
            return limit_;
        }

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder getLimitOrBuilder() {
            return limit_;
        }

        public static final int ORDER_FIELD_NUMBER = 7;
        private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> order_;

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> getOrderList() {
            return order_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderOrBuilderList() {
            return order_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        public int getOrderCount() {
            return order_.size();
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order getOrder(int index) {
            return order_.get(index);
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder getOrderOrBuilder(int index) {
            return order_.get(index);
        }

        private void initFields() {
            collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
            projection_ = java.util.Collections.emptyList();
            criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
            limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
            order_ = java.util.Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            if (!hasCollection()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getCollection().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getProjectionCount(); i++) {
                if (!getProjection(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            if (hasCriteria()) {
                if (!getCriteria().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            if (hasLimit()) {
                if (!getLimit().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            for (int i = 0; i < getOrderCount(); i++) {
                if (!getOrder(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeMessage(2, collection_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeEnum(3, dataModel_.getNumber());
            }
            for (int i = 0; i < projection_.size(); i++) {
                output.writeMessage(4, projection_.get(i));
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeMessage(5, criteria_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeMessage(6, limit_);
            }
            for (int i = 0; i < order_.size(); i++) {
                output.writeMessage(7, order_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1)
                return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, collection_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream.computeEnumSize(3, dataModel_.getNumber());
            }
            for (int i = 0; i < projection_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, projection_.get(i));
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, criteria_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(6, limit_);
            }
            for (int i = 0; i < order_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(7, order_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find parseFrom(com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find parseFrom(com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find parseFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find parseDelimitedFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find parseFrom(com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Mysqlx.Crud.Find}
         *
         * <pre>
         * Find Documents/Rows in a Collection/Table
         * .. uml::
         *   client -&gt; server: Find
         *   loop has more columns
         *   server --&gt; client: ColumnMetaData
         *   end
         *   loop has more rows
         *   server --&gt; client: Row
         *   end
         *   server --&gt; client: CursorFetchDone
         *   end
         *  :param collection: collection to insert into
         *  :param data_model: datamodel that the operations refer to
         *  :param projection: list of column names that shall be returned
         *  :param criteria: filter criteria
         *  :param limit: numbers of rows that shall be skipped and returned
         *  :param order: sort-order in which the rows/document shall be returned in
         *  :Returns: :protobuf:msg:`Mysqlx.Sql::ColumnData` and further packets or :protobuf:msg:`Mysqlx::Error`
         * </pre>
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Crud.Find)
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.FindOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Find_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Find_fieldAccessorTable.ensureFieldAccessorsInitialized(
                        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find.Builder.class);
            }

            // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getCollectionFieldBuilder();
                    getProjectionFieldBuilder();
                    getCriteriaFieldBuilder();
                    getLimitFieldBuilder();
                    getOrderFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000001);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                bitField0_ = (bitField0_ & ~0x00000002);
                if (projectionBuilder_ == null) {
                    projection_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                } else {
                    projectionBuilder_.clear();
                }
                if (criteriaBuilder_ == null) {
                    criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
                } else {
                    criteriaBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                if (limitBuilder_ == null) {
                    limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
                } else {
                    limitBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000010);
                if (orderBuilder_ == null) {
                    order_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000020);
                } else {
                    orderBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Find_descriptor;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find getDefaultInstanceForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find.getDefaultInstance();
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find build() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find buildPartial() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find result = new com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                if (collectionBuilder_ == null) {
                    result.collection_ = collection_;
                } else {
                    result.collection_ = collectionBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.dataModel_ = dataModel_;
                if (projectionBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004)) {
                        projection_ = java.util.Collections.unmodifiableList(projection_);
                        bitField0_ = (bitField0_ & ~0x00000004);
                    }
                    result.projection_ = projection_;
                } else {
                    result.projection_ = projectionBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000004;
                }
                if (criteriaBuilder_ == null) {
                    result.criteria_ = criteria_;
                } else {
                    result.criteria_ = criteriaBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000008;
                }
                if (limitBuilder_ == null) {
                    result.limit_ = limit_;
                } else {
                    result.limit_ = limitBuilder_.build();
                }
                if (orderBuilder_ == null) {
                    if (((bitField0_ & 0x00000020) == 0x00000020)) {
                        order_ = java.util.Collections.unmodifiableList(order_);
                        bitField0_ = (bitField0_ & ~0x00000020);
                    }
                    result.order_ = order_;
                } else {
                    result.order_ = orderBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find) {
                    return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find other) {
                if (other == com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find.getDefaultInstance())
                    return this;
                if (other.hasCollection()) {
                    mergeCollection(other.getCollection());
                }
                if (other.hasDataModel()) {
                    setDataModel(other.getDataModel());
                }
                if (projectionBuilder_ == null) {
                    if (!other.projection_.isEmpty()) {
                        if (projection_.isEmpty()) {
                            projection_ = other.projection_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                        } else {
                            ensureProjectionIsMutable();
                            projection_.addAll(other.projection_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.projection_.isEmpty()) {
                        if (projectionBuilder_.isEmpty()) {
                            projectionBuilder_.dispose();
                            projectionBuilder_ = null;
                            projection_ = other.projection_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                            projectionBuilder_ = com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getProjectionFieldBuilder() : null;
                        } else {
                            projectionBuilder_.addAllMessages(other.projection_);
                        }
                    }
                }
                if (other.hasCriteria()) {
                    mergeCriteria(other.getCriteria());
                }
                if (other.hasLimit()) {
                    mergeLimit(other.getLimit());
                }
                if (orderBuilder_ == null) {
                    if (!other.order_.isEmpty()) {
                        if (order_.isEmpty()) {
                            order_ = other.order_;
                            bitField0_ = (bitField0_ & ~0x00000020);
                        } else {
                            ensureOrderIsMutable();
                            order_.addAll(other.order_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.order_.isEmpty()) {
                        if (orderBuilder_.isEmpty()) {
                            orderBuilder_.dispose();
                            orderBuilder_ = null;
                            order_ = other.order_;
                            bitField0_ = (bitField0_ & ~0x00000020);
                            orderBuilder_ = com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getOrderFieldBuilder() : null;
                        } else {
                            orderBuilder_.addAllMessages(other.order_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasCollection()) {

                    return false;
                }
                if (!getCollection().isInitialized()) {

                    return false;
                }
                for (int i = 0; i < getProjectionCount(); i++) {
                    if (!getProjection(i).isInitialized()) {

                        return false;
                    }
                }
                if (hasCriteria()) {
                    if (!getCriteria().isInitialized()) {

                        return false;
                    }
                }
                if (hasLimit()) {
                    if (!getLimit().isInitialized()) {

                        return false;
                    }
                }
                for (int i = 0; i < getOrderCount(); i++) {
                    if (!getOrder(i).isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Find) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> collectionBuilder_;

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public boolean hasCollection() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
                if (collectionBuilder_ == null) {
                    return collection_;
                } else {
                    return collectionBuilder_.getMessage();
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    collection_ = value;
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder builderForValue) {
                if (collectionBuilder_ == null) {
                    collection_ = builderForValue.build();
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder mergeCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001) && collection_ != com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance()) {
                        collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.newBuilder(collection_).mergeFrom(value).buildPartial();
                    } else {
                        collection_ = value;
                    }
                    onChanged();
                } else {
                    collectionBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder clearCollection() {
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                    onChanged();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000001);
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder getCollectionBuilder() {
                bitField0_ |= 0x00000001;
                onChanged();
                return getCollectionFieldBuilder().getBuilder();
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
                if (collectionBuilder_ != null) {
                    return collectionBuilder_.getMessageOrBuilder();
                } else {
                    return collection_;
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> getCollectionFieldBuilder() {
                if (collectionBuilder_ == null) {
                    collectionBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder>(
                            getCollection(), getParentForChildren(), isClean());
                    collection_ = null;
                }
                return collectionBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public boolean hasDataModel() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
                return dataModel_;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public Builder setDataModel(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                dataModel_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public Builder clearDataModel() {
                bitField0_ = (bitField0_ & ~0x00000002);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                onChanged();
                return this;
            }

            private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> projection_ = java.util.Collections.emptyList();

            private void ensureProjectionIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    projection_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column>(projection_);
                    bitField0_ |= 0x00000004;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> projectionBuilder_;

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> getProjectionList() {
                if (projectionBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(projection_);
                } else {
                    return projectionBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public int getProjectionCount() {
                if (projectionBuilder_ == null) {
                    return projection_.size();
                } else {
                    return projectionBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column getProjection(int index) {
                if (projectionBuilder_ == null) {
                    return projection_.get(index);
                } else {
                    return projectionBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder setProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column value) {
                if (projectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureProjectionIsMutable();
                    projection_.set(index, value);
                    onChanged();
                } else {
                    projectionBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder setProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder builderForValue) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    projectionBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addProjection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column value) {
                if (projectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureProjectionIsMutable();
                    projection_.add(value);
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column value) {
                if (projectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureProjectionIsMutable();
                    projection_.add(index, value);
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addProjection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder builderForValue) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.add(builderForValue.build());
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder builderForValue) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder addAllProjection(java.lang.Iterable<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> values) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(values, projection_);
                    onChanged();
                } else {
                    projectionBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder clearProjection() {
                if (projectionBuilder_ == null) {
                    projection_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                    onChanged();
                } else {
                    projectionBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public Builder removeProjection(int index) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.remove(index);
                    onChanged();
                } else {
                    projectionBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder getProjectionBuilder(int index) {
                return getProjectionFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder getProjectionOrBuilder(int index) {
                if (projectionBuilder_ == null) {
                    return projection_.get(index);
                } else {
                    return projectionBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionOrBuilderList() {
                if (projectionBuilder_ != null) {
                    return projectionBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(projection_);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder addProjectionBuilder() {
                return getProjectionFieldBuilder().addBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder addProjectionBuilder(int index) {
                return getProjectionFieldBuilder().addBuilder(index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 4;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder> getProjectionBuilderList() {
                return getProjectionFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionFieldBuilder() {
                if (projectionBuilder_ == null) {
                    projectionBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder>(
                            projection_, ((bitField0_ & 0x00000004) == 0x00000004), getParentForChildren(), isClean());
                    projection_ = null;
                }
                return projectionBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder> criteriaBuilder_;

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public boolean hasCriteria() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr getCriteria() {
                if (criteriaBuilder_ == null) {
                    return criteria_;
                } else {
                    return criteriaBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public Builder setCriteria(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr value) {
                if (criteriaBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    criteria_ = value;
                    onChanged();
                } else {
                    criteriaBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public Builder setCriteria(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder builderForValue) {
                if (criteriaBuilder_ == null) {
                    criteria_ = builderForValue.build();
                    onChanged();
                } else {
                    criteriaBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public Builder mergeCriteria(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr value) {
                if (criteriaBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008) && criteria_ != com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance()) {
                        criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.newBuilder(criteria_).mergeFrom(value).buildPartial();
                    } else {
                        criteria_ = value;
                    }
                    onChanged();
                } else {
                    criteriaBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public Builder clearCriteria() {
                if (criteriaBuilder_ == null) {
                    criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
                    onChanged();
                } else {
                    criteriaBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder getCriteriaBuilder() {
                bitField0_ |= 0x00000008;
                onChanged();
                return getCriteriaFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder getCriteriaOrBuilder() {
                if (criteriaBuilder_ != null) {
                    return criteriaBuilder_.getMessageOrBuilder();
                } else {
                    return criteria_;
                }
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 5;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder> getCriteriaFieldBuilder() {
                if (criteriaBuilder_ == null) {
                    criteriaBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder>(
                            getCriteria(), getParentForChildren(), isClean());
                    criteria_ = null;
                }
                return criteriaBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder> limitBuilder_;

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public boolean hasLimit() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit getLimit() {
                if (limitBuilder_ == null) {
                    return limit_;
                } else {
                    return limitBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public Builder setLimit(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit value) {
                if (limitBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    limit_ = value;
                    onChanged();
                } else {
                    limitBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000010;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public Builder setLimit(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder builderForValue) {
                if (limitBuilder_ == null) {
                    limit_ = builderForValue.build();
                    onChanged();
                } else {
                    limitBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000010;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public Builder mergeLimit(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit value) {
                if (limitBuilder_ == null) {
                    if (((bitField0_ & 0x00000010) == 0x00000010) && limit_ != com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance()) {
                        limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.newBuilder(limit_).mergeFrom(value).buildPartial();
                    } else {
                        limit_ = value;
                    }
                    onChanged();
                } else {
                    limitBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000010;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public Builder clearLimit() {
                if (limitBuilder_ == null) {
                    limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
                    onChanged();
                } else {
                    limitBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000010);
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder getLimitBuilder() {
                bitField0_ |= 0x00000010;
                onChanged();
                return getLimitFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder getLimitOrBuilder() {
                if (limitBuilder_ != null) {
                    return limitBuilder_.getMessageOrBuilder();
                } else {
                    return limit_;
                }
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 6;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder> getLimitFieldBuilder() {
                if (limitBuilder_ == null) {
                    limitBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder>(
                            getLimit(), getParentForChildren(), isClean());
                    limit_ = null;
                }
                return limitBuilder_;
            }

            private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> order_ = java.util.Collections.emptyList();

            private void ensureOrderIsMutable() {
                if (!((bitField0_ & 0x00000020) == 0x00000020)) {
                    order_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order>(order_);
                    bitField0_ |= 0x00000020;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> orderBuilder_;

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> getOrderList() {
                if (orderBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(order_);
                } else {
                    return orderBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public int getOrderCount() {
                if (orderBuilder_ == null) {
                    return order_.size();
                } else {
                    return orderBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order getOrder(int index) {
                if (orderBuilder_ == null) {
                    return order_.get(index);
                } else {
                    return orderBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder setOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order value) {
                if (orderBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOrderIsMutable();
                    order_.set(index, value);
                    onChanged();
                } else {
                    orderBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder setOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder builderForValue) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    orderBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder addOrder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order value) {
                if (orderBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOrderIsMutable();
                    order_.add(value);
                    onChanged();
                } else {
                    orderBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder addOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order value) {
                if (orderBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOrderIsMutable();
                    order_.add(index, value);
                    onChanged();
                } else {
                    orderBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder addOrder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder builderForValue) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.add(builderForValue.build());
                    onChanged();
                } else {
                    orderBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder addOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder builderForValue) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    orderBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder addAllOrder(java.lang.Iterable<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> values) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(values, order_);
                    onChanged();
                } else {
                    orderBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder clearOrder() {
                if (orderBuilder_ == null) {
                    order_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000020);
                    onChanged();
                } else {
                    orderBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public Builder removeOrder(int index) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.remove(index);
                    onChanged();
                } else {
                    orderBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder getOrderBuilder(int index) {
                return getOrderFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder getOrderOrBuilder(int index) {
                if (orderBuilder_ == null) {
                    return order_.get(index);
                } else {
                    return orderBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderOrBuilderList() {
                if (orderBuilder_ != null) {
                    return orderBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(order_);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder addOrderBuilder() {
                return getOrderFieldBuilder().addBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder addOrderBuilder(int index) {
                return getOrderFieldBuilder().addBuilder(index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 7;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder> getOrderBuilderList() {
                return getOrderFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderFieldBuilder() {
                if (orderBuilder_ == null) {
                    orderBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder>(
                            order_, ((bitField0_ & 0x00000020) == 0x00000020), getParentForChildren(), isClean());
                    order_ = null;
                }
                return orderBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:Mysqlx.Crud.Find)
        }

        static {
            defaultInstance = new Find(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Mysqlx.Crud.Find)
    }

    public interface InsertOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Mysqlx.Crud.Insert)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
         */
        boolean hasCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
         */
        boolean hasDataModel();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
         */
        java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> getProjectionList();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column getProjection(int index);

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
         */
        int getProjectionCount();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
         */
        java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionOrBuilderList();

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder getProjectionOrBuilder(int index);

        /**
         * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
         */
        java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row> getRowList();

        /**
         * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row getRow(int index);

        /**
         * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
         */
        int getRowCount();

        /**
         * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
         */
        java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder> getRowOrBuilderList();

        /**
         * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder getRowOrBuilder(int index);
    }

    /**
     * Protobuf type {@code Mysqlx.Crud.Insert}
     *
     * <pre>
     * Insert documents/rows into a collection/table
     *  :param collection: collection to insert into
     *  :param data_model: datamodel that the operations refer to
     *  :param projection: name of the columns to insert data into
     *  :param row: set of rows to insert into the collection/table
     *  :Returns: :protobuf:msg:`Mysqlx.Sql::ExecuteStmtOk` or :protobuf:msg:`Mysqlx::Error`
     * </pre>
     */
    public static final class Insert extends com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:Mysqlx.Crud.Insert)
            InsertOrBuilder {
        // Use Insert.newBuilder() to construct.
        private Insert(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Insert(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Insert defaultInstance;

        public static Insert getDefaultInstance() {
            return defaultInstance;
        }

        public Insert getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Insert(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                                subBuilder = collection_.toBuilder();
                            }
                            collection_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(collection_);
                                collection_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000001;
                            break;
                        }
                        case 16: {
                            int rawValue = input.readEnum();
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(2, rawValue);
                            } else {
                                bitField0_ |= 0x00000002;
                                dataModel_ = value;
                            }
                            break;
                        }
                        case 26: {
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                projection_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            projection_.add(input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.PARSER, extensionRegistry));
                            break;
                        }
                        case 34: {
                            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                                row_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row>();
                                mutable_bitField0_ |= 0x00000008;
                            }
                            row_.add(input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    projection_ = java.util.Collections.unmodifiableList(projection_);
                }
                if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                    row_ = java.util.Collections.unmodifiableList(row_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Insert_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Insert_fieldAccessorTable.ensureFieldAccessorsInitialized(
                    com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert.Builder.class);
        }

        public static com.google.protobuf.Parser<Insert> PARSER = new com.google.protobuf.AbstractParser<Insert>() {
            public Insert parsePartialFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Insert(input, extensionRegistry);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<Insert> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int COLLECTION_FIELD_NUMBER = 1;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_;

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
         */
        public boolean hasCollection() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
            return collection_;
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
            return collection_;
        }

        public static final int DATA_MODEL_FIELD_NUMBER = 2;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_;

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
         */
        public boolean hasDataModel() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
            return dataModel_;
        }

        public static final int PROJECTION_FIELD_NUMBER = 3;
        private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> projection_;

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
         */
        public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> getProjectionList() {
            return projection_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
         */
        public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionOrBuilderList() {
            return projection_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
         */
        public int getProjectionCount() {
            return projection_.size();
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column getProjection(int index) {
            return projection_.get(index);
        }

        /**
         * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder getProjectionOrBuilder(int index) {
            return projection_.get(index);
        }

        public static final int ROW_FIELD_NUMBER = 4;
        private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row> row_;

        /**
         * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
         */
        public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row> getRowList() {
            return row_;
        }

        /**
         * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
         */
        public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder> getRowOrBuilderList() {
            return row_;
        }

        /**
         * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
         */
        public int getRowCount() {
            return row_.size();
        }

        /**
         * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row getRow(int index) {
            return row_.get(index);
        }

        /**
         * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder getRowOrBuilder(int index) {
            return row_.get(index);
        }

        private void initFields() {
            collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
            projection_ = java.util.Collections.emptyList();
            row_ = java.util.Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            if (!hasCollection()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getCollection().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getProjectionCount(); i++) {
                if (!getProjection(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            for (int i = 0; i < getRowCount(); i++) {
                if (!getRow(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeMessage(1, collection_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeEnum(2, dataModel_.getNumber());
            }
            for (int i = 0; i < projection_.size(); i++) {
                output.writeMessage(3, projection_.get(i));
            }
            for (int i = 0; i < row_.size(); i++) {
                output.writeMessage(4, row_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1)
                return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, collection_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream.computeEnumSize(2, dataModel_.getNumber());
            }
            for (int i = 0; i < projection_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, projection_.get(i));
            }
            for (int i = 0; i < row_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, row_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert parseFrom(com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert parseFrom(com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert parseFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert parseDelimitedFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert parseFrom(com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Mysqlx.Crud.Insert}
         *
         * <pre>
         * Insert documents/rows into a collection/table
         *  :param collection: collection to insert into
         *  :param data_model: datamodel that the operations refer to
         *  :param projection: name of the columns to insert data into
         *  :param row: set of rows to insert into the collection/table
         *  :Returns: :protobuf:msg:`Mysqlx.Sql::ExecuteStmtOk` or :protobuf:msg:`Mysqlx::Error`
         * </pre>
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Crud.Insert)
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.InsertOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Insert_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Insert_fieldAccessorTable.ensureFieldAccessorsInitialized(
                        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert.Builder.class);
            }

            // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getCollectionFieldBuilder();
                    getProjectionFieldBuilder();
                    getRowFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000001);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                bitField0_ = (bitField0_ & ~0x00000002);
                if (projectionBuilder_ == null) {
                    projection_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                } else {
                    projectionBuilder_.clear();
                }
                if (rowBuilder_ == null) {
                    row_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                } else {
                    rowBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Insert_descriptor;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert getDefaultInstanceForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert.getDefaultInstance();
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert build() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert buildPartial() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert result = new com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                if (collectionBuilder_ == null) {
                    result.collection_ = collection_;
                } else {
                    result.collection_ = collectionBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.dataModel_ = dataModel_;
                if (projectionBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004)) {
                        projection_ = java.util.Collections.unmodifiableList(projection_);
                        bitField0_ = (bitField0_ & ~0x00000004);
                    }
                    result.projection_ = projection_;
                } else {
                    result.projection_ = projectionBuilder_.build();
                }
                if (rowBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008)) {
                        row_ = java.util.Collections.unmodifiableList(row_);
                        bitField0_ = (bitField0_ & ~0x00000008);
                    }
                    result.row_ = row_;
                } else {
                    result.row_ = rowBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert) {
                    return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert other) {
                if (other == com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert.getDefaultInstance())
                    return this;
                if (other.hasCollection()) {
                    mergeCollection(other.getCollection());
                }
                if (other.hasDataModel()) {
                    setDataModel(other.getDataModel());
                }
                if (projectionBuilder_ == null) {
                    if (!other.projection_.isEmpty()) {
                        if (projection_.isEmpty()) {
                            projection_ = other.projection_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                        } else {
                            ensureProjectionIsMutable();
                            projection_.addAll(other.projection_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.projection_.isEmpty()) {
                        if (projectionBuilder_.isEmpty()) {
                            projectionBuilder_.dispose();
                            projectionBuilder_ = null;
                            projection_ = other.projection_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                            projectionBuilder_ = com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getProjectionFieldBuilder() : null;
                        } else {
                            projectionBuilder_.addAllMessages(other.projection_);
                        }
                    }
                }
                if (rowBuilder_ == null) {
                    if (!other.row_.isEmpty()) {
                        if (row_.isEmpty()) {
                            row_ = other.row_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                        } else {
                            ensureRowIsMutable();
                            row_.addAll(other.row_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.row_.isEmpty()) {
                        if (rowBuilder_.isEmpty()) {
                            rowBuilder_.dispose();
                            rowBuilder_ = null;
                            row_ = other.row_;
                            bitField0_ = (bitField0_ & ~0x00000008);
                            rowBuilder_ = com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getRowFieldBuilder() : null;
                        } else {
                            rowBuilder_.addAllMessages(other.row_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasCollection()) {

                    return false;
                }
                if (!getCollection().isInitialized()) {

                    return false;
                }
                for (int i = 0; i < getProjectionCount(); i++) {
                    if (!getProjection(i).isInitialized()) {

                        return false;
                    }
                }
                for (int i = 0; i < getRowCount(); i++) {
                    if (!getRow(i).isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Insert) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> collectionBuilder_;

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public boolean hasCollection() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
                if (collectionBuilder_ == null) {
                    return collection_;
                } else {
                    return collectionBuilder_.getMessage();
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    collection_ = value;
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder builderForValue) {
                if (collectionBuilder_ == null) {
                    collection_ = builderForValue.build();
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public Builder mergeCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001) && collection_ != com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance()) {
                        collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.newBuilder(collection_).mergeFrom(value).buildPartial();
                    } else {
                        collection_ = value;
                    }
                    onChanged();
                } else {
                    collectionBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public Builder clearCollection() {
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                    onChanged();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000001);
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder getCollectionBuilder() {
                bitField0_ |= 0x00000001;
                onChanged();
                return getCollectionFieldBuilder().getBuilder();
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
                if (collectionBuilder_ != null) {
                    return collectionBuilder_.getMessageOrBuilder();
                } else {
                    return collection_;
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> getCollectionFieldBuilder() {
                if (collectionBuilder_ == null) {
                    collectionBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder>(
                            getCollection(), getParentForChildren(), isClean());
                    collection_ = null;
                }
                return collectionBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
             */
            public boolean hasDataModel() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
                return dataModel_;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
             */
            public Builder setDataModel(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                dataModel_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
             */
            public Builder clearDataModel() {
                bitField0_ = (bitField0_ & ~0x00000002);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                onChanged();
                return this;
            }

            private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> projection_ = java.util.Collections.emptyList();

            private void ensureProjectionIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    projection_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column>(projection_);
                    bitField0_ |= 0x00000004;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> projectionBuilder_;

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> getProjectionList() {
                if (projectionBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(projection_);
                } else {
                    return projectionBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public int getProjectionCount() {
                if (projectionBuilder_ == null) {
                    return projection_.size();
                } else {
                    return projectionBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column getProjection(int index) {
                if (projectionBuilder_ == null) {
                    return projection_.get(index);
                } else {
                    return projectionBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public Builder setProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column value) {
                if (projectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureProjectionIsMutable();
                    projection_.set(index, value);
                    onChanged();
                } else {
                    projectionBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public Builder setProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder builderForValue) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    projectionBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public Builder addProjection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column value) {
                if (projectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureProjectionIsMutable();
                    projection_.add(value);
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public Builder addProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column value) {
                if (projectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureProjectionIsMutable();
                    projection_.add(index, value);
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public Builder addProjection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder builderForValue) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.add(builderForValue.build());
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public Builder addProjection(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder builderForValue) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    projectionBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public Builder addAllProjection(java.lang.Iterable<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column> values) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(values, projection_);
                    onChanged();
                } else {
                    projectionBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public Builder clearProjection() {
                if (projectionBuilder_ == null) {
                    projection_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                    onChanged();
                } else {
                    projectionBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public Builder removeProjection(int index) {
                if (projectionBuilder_ == null) {
                    ensureProjectionIsMutable();
                    projection_.remove(index);
                    onChanged();
                } else {
                    projectionBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder getProjectionBuilder(int index) {
                return getProjectionFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder getProjectionOrBuilder(int index) {
                if (projectionBuilder_ == null) {
                    return projection_.get(index);
                } else {
                    return projectionBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionOrBuilderList() {
                if (projectionBuilder_ != null) {
                    return projectionBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(projection_);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder addProjectionBuilder() {
                return getProjectionFieldBuilder().addBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder addProjectionBuilder(int index) {
                return getProjectionFieldBuilder().addBuilder(index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Column projection = 3;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder> getProjectionBuilderList() {
                return getProjectionFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder> getProjectionFieldBuilder() {
                if (projectionBuilder_ == null) {
                    projectionBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Column.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.ColumnOrBuilder>(
                            projection_, ((bitField0_ & 0x00000004) == 0x00000004), getParentForChildren(), isClean());
                    projection_ = null;
                }
                return projectionBuilder_;
            }

            private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row> row_ = java.util.Collections.emptyList();

            private void ensureRowIsMutable() {
                if (!((bitField0_ & 0x00000008) == 0x00000008)) {
                    row_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row>(row_);
                    bitField0_ |= 0x00000008;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row, com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder> rowBuilder_;

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row> getRowList() {
                if (rowBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(row_);
                } else {
                    return rowBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public int getRowCount() {
                if (rowBuilder_ == null) {
                    return row_.size();
                } else {
                    return rowBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row getRow(int index) {
                if (rowBuilder_ == null) {
                    return row_.get(index);
                } else {
                    return rowBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public Builder setRow(int index, com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row value) {
                if (rowBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureRowIsMutable();
                    row_.set(index, value);
                    onChanged();
                } else {
                    rowBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public Builder setRow(int index, com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder builderForValue) {
                if (rowBuilder_ == null) {
                    ensureRowIsMutable();
                    row_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    rowBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public Builder addRow(com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row value) {
                if (rowBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureRowIsMutable();
                    row_.add(value);
                    onChanged();
                } else {
                    rowBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public Builder addRow(int index, com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row value) {
                if (rowBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureRowIsMutable();
                    row_.add(index, value);
                    onChanged();
                } else {
                    rowBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public Builder addRow(com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder builderForValue) {
                if (rowBuilder_ == null) {
                    ensureRowIsMutable();
                    row_.add(builderForValue.build());
                    onChanged();
                } else {
                    rowBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public Builder addRow(int index, com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder builderForValue) {
                if (rowBuilder_ == null) {
                    ensureRowIsMutable();
                    row_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    rowBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public Builder addAllRow(java.lang.Iterable<? extends com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row> values) {
                if (rowBuilder_ == null) {
                    ensureRowIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(values, row_);
                    onChanged();
                } else {
                    rowBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public Builder clearRow() {
                if (rowBuilder_ == null) {
                    row_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000008);
                    onChanged();
                } else {
                    rowBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public Builder removeRow(int index) {
                if (rowBuilder_ == null) {
                    ensureRowIsMutable();
                    row_.remove(index);
                    onChanged();
                } else {
                    rowBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder getRowBuilder(int index) {
                return getRowFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder getRowOrBuilder(int index) {
                if (rowBuilder_ == null) {
                    return row_.get(index);
                } else {
                    return rowBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder> getRowOrBuilderList() {
                if (rowBuilder_ != null) {
                    return rowBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(row_);
                }
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder addRowBuilder() {
                return getRowFieldBuilder().addBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder addRowBuilder(int index) {
                return getRowFieldBuilder().addBuilder(index, com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Sql.Row row = 4;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder> getRowBuilderList() {
                return getRowFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row, com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder> getRowFieldBuilder() {
                if (rowBuilder_ == null) {
                    rowBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row, com.mysql.cj.mysqlx.protobuf.MysqlxSql.Row.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxSql.RowOrBuilder>(
                            row_, ((bitField0_ & 0x00000008) == 0x00000008), getParentForChildren(), isClean());
                    row_ = null;
                }
                return rowBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:Mysqlx.Crud.Insert)
        }

        static {
            defaultInstance = new Insert(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Mysqlx.Crud.Insert)
    }

    public interface UpdateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Mysqlx.Crud.Update)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        boolean hasCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        boolean hasDataModel();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel();
    }

    /**
     * Protobuf type {@code Mysqlx.Crud.Update}
     *
     * <pre>
     * Update documents/rows in a collection/table
     *  :param collection: collection to change
     *  :param data_model: datamodel that the operations refer to
     *  :Returns: :protobuf:msg:`Mysqlx.Sql::ExecuteStmtOk` or :protobuf:msg:`Mysqlx::Error`
     * .. todo:: sketch out CrudUpdate
     * </pre>
     */
    public static final class Update extends com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:Mysqlx.Crud.Update)
            UpdateOrBuilder {
        // Use Update.newBuilder() to construct.
        private Update(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Update(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Update defaultInstance;

        public static Update getDefaultInstance() {
            return defaultInstance;
        }

        public Update getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Update(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 18: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                                subBuilder = collection_.toBuilder();
                            }
                            collection_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(collection_);
                                collection_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000001;
                            break;
                        }
                        case 24: {
                            int rawValue = input.readEnum();
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(3, rawValue);
                            } else {
                                bitField0_ |= 0x00000002;
                                dataModel_ = value;
                            }
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Update_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Update_fieldAccessorTable.ensureFieldAccessorsInitialized(
                    com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update.Builder.class);
        }

        public static com.google.protobuf.Parser<Update> PARSER = new com.google.protobuf.AbstractParser<Update>() {
            public Update parsePartialFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Update(input, extensionRegistry);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<Update> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int COLLECTION_FIELD_NUMBER = 2;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_;

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public boolean hasCollection() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
            return collection_;
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
            return collection_;
        }

        public static final int DATA_MODEL_FIELD_NUMBER = 3;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_;

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        public boolean hasDataModel() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
            return dataModel_;
        }

        private void initFields() {
            collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            if (!hasCollection()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getCollection().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeMessage(2, collection_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeEnum(3, dataModel_.getNumber());
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1)
                return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(2, collection_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream.computeEnumSize(3, dataModel_.getNumber());
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update parseFrom(com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update parseFrom(com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update parseFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update parseDelimitedFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update parseFrom(com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Mysqlx.Crud.Update}
         *
         * <pre>
         * Update documents/rows in a collection/table
         *  :param collection: collection to change
         *  :param data_model: datamodel that the operations refer to
         *  :Returns: :protobuf:msg:`Mysqlx.Sql::ExecuteStmtOk` or :protobuf:msg:`Mysqlx::Error`
         * .. todo:: sketch out CrudUpdate
         * </pre>
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Crud.Update)
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.UpdateOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Update_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Update_fieldAccessorTable.ensureFieldAccessorsInitialized(
                        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update.Builder.class);
            }

            // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getCollectionFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000001);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Update_descriptor;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update getDefaultInstanceForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update.getDefaultInstance();
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update build() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update buildPartial() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update result = new com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                if (collectionBuilder_ == null) {
                    result.collection_ = collection_;
                } else {
                    result.collection_ = collectionBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.dataModel_ = dataModel_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update) {
                    return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update other) {
                if (other == com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update.getDefaultInstance())
                    return this;
                if (other.hasCollection()) {
                    mergeCollection(other.getCollection());
                }
                if (other.hasDataModel()) {
                    setDataModel(other.getDataModel());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasCollection()) {

                    return false;
                }
                if (!getCollection().isInitialized()) {

                    return false;
                }
                return true;
            }

            public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Update) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> collectionBuilder_;

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public boolean hasCollection() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
                if (collectionBuilder_ == null) {
                    return collection_;
                } else {
                    return collectionBuilder_.getMessage();
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    collection_ = value;
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder builderForValue) {
                if (collectionBuilder_ == null) {
                    collection_ = builderForValue.build();
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder mergeCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001) && collection_ != com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance()) {
                        collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.newBuilder(collection_).mergeFrom(value).buildPartial();
                    } else {
                        collection_ = value;
                    }
                    onChanged();
                } else {
                    collectionBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public Builder clearCollection() {
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                    onChanged();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000001);
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder getCollectionBuilder() {
                bitField0_ |= 0x00000001;
                onChanged();
                return getCollectionFieldBuilder().getBuilder();
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
                if (collectionBuilder_ != null) {
                    return collectionBuilder_.getMessageOrBuilder();
                } else {
                    return collection_;
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 2;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> getCollectionFieldBuilder() {
                if (collectionBuilder_ == null) {
                    collectionBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder>(
                            getCollection(), getParentForChildren(), isClean());
                    collection_ = null;
                }
                return collectionBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public boolean hasDataModel() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
                return dataModel_;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public Builder setDataModel(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                dataModel_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 3;</code>
             */
            public Builder clearDataModel() {
                bitField0_ = (bitField0_ & ~0x00000002);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:Mysqlx.Crud.Update)
        }

        static {
            defaultInstance = new Update(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Mysqlx.Crud.Update)
    }

    public interface DeleteOrBuilder extends
    // @@protoc_insertion_point(interface_extends:Mysqlx.Crud.Delete)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
         */
        boolean hasCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection();

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
         */
        boolean hasDataModel();

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel();

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
         */
        boolean hasCriteria();

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr getCriteria();

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder getCriteriaOrBuilder();

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
         */
        boolean hasLimit();

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit getLimit();

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder getLimitOrBuilder();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
         */
        java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> getOrderList();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order getOrder(int index);

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
         */
        int getOrderCount();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
         */
        java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderOrBuilderList();

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
         */
        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder getOrderOrBuilder(int index);
    }

    /**
     * Protobuf type {@code Mysqlx.Crud.Delete}
     *
     * <pre>
     * Delete documents/rows from a Collection/Table
     *  :param collection: collection to change
     *  :param data_model: datamodel that the operations refer to
     *  :Returns: :protobuf:msg:`Mysqlx.Sql::ExecuteStmtOk` or :protobuf:msg:`Mysqlx::Error`
     * </pre>
     */
    public static final class Delete extends com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:Mysqlx.Crud.Delete)
            DeleteOrBuilder {
        // Use Delete.newBuilder() to construct.
        private Delete(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Delete(boolean noInit) {
            this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance();
        }

        private static final Delete defaultInstance;

        public static Delete getDefaultInstance() {
            return defaultInstance;
        }

        public Delete getDefaultInstanceForType() {
            return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private Delete(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                                subBuilder = collection_.toBuilder();
                            }
                            collection_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(collection_);
                                collection_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000001;
                            break;
                        }
                        case 16: {
                            int rawValue = input.readEnum();
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(2, rawValue);
                            } else {
                                bitField0_ |= 0x00000002;
                                dataModel_ = value;
                            }
                            break;
                        }
                        case 26: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                                subBuilder = criteria_.toBuilder();
                            }
                            criteria_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(criteria_);
                                criteria_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000004;
                            break;
                        }
                        case 34: {
                            com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder subBuilder = null;
                            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                                subBuilder = limit_.toBuilder();
                            }
                            limit_ = input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom(limit_);
                                limit_ = subBuilder.buildPartial();
                            }
                            bitField0_ |= 0x00000008;
                            break;
                        }
                        case 42: {
                            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                                order_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order>();
                                mutable_bitField0_ |= 0x00000010;
                            }
                            order_.add(input.readMessage(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                    order_ = java.util.Collections.unmodifiableList(order_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Delete_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Delete_fieldAccessorTable.ensureFieldAccessorsInitialized(
                    com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete.Builder.class);
        }

        public static com.google.protobuf.Parser<Delete> PARSER = new com.google.protobuf.AbstractParser<Delete>() {
            public Delete parsePartialFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new Delete(input, extensionRegistry);
            }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<Delete> getParserForType() {
            return PARSER;
        }

        private int bitField0_;
        public static final int COLLECTION_FIELD_NUMBER = 1;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_;

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
         */
        public boolean hasCollection() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
            return collection_;
        }

        /**
         * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
            return collection_;
        }

        public static final int DATA_MODEL_FIELD_NUMBER = 2;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_;

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
         */
        public boolean hasDataModel() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
            return dataModel_;
        }

        public static final int CRITERIA_FIELD_NUMBER = 3;
        private com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr criteria_;

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
         */
        public boolean hasCriteria() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr getCriteria() {
            return criteria_;
        }

        /**
         * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder getCriteriaOrBuilder() {
            return criteria_;
        }

        public static final int LIMIT_FIELD_NUMBER = 4;
        private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit limit_;

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
         */
        public boolean hasLimit() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit getLimit() {
            return limit_;
        }

        /**
         * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder getLimitOrBuilder() {
            return limit_;
        }

        public static final int ORDER_FIELD_NUMBER = 5;
        private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> order_;

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
         */
        public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> getOrderList() {
            return order_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
         */
        public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderOrBuilderList() {
            return order_;
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
         */
        public int getOrderCount() {
            return order_.size();
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order getOrder(int index) {
            return order_.get(index);
        }

        /**
         * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
         */
        public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder getOrderOrBuilder(int index) {
            return order_.get(index);
        }

        private void initFields() {
            collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
            criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
            limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
            order_ = java.util.Collections.emptyList();
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1)
                return true;
            if (isInitialized == 0)
                return false;

            if (!hasCollection()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!getCollection().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (hasCriteria()) {
                if (!getCriteria().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            if (hasLimit()) {
                if (!getLimit().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            for (int i = 0; i < getOrderCount(); i++) {
                if (!getOrder(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeMessage(1, collection_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeEnum(2, dataModel_.getNumber());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeMessage(3, criteria_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeMessage(4, limit_);
            }
            for (int i = 0; i < order_.size(); i++) {
                output.writeMessage(5, order_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;

        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1)
                return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(1, collection_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream.computeEnumSize(2, dataModel_.getNumber());
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(3, criteria_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, limit_);
            }
            for (int i = 0; i < order_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, order_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @java.lang.Override
        protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete parseFrom(com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete parseFrom(com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete parseFrom(byte[] data) throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete parseFrom(byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete parseFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete parseDelimitedFrom(java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete parseFrom(com.google.protobuf.CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete parseFrom(com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return newBuilder(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Mysqlx.Crud.Delete}
         *
         * <pre>
         * Delete documents/rows from a Collection/Table
         *  :param collection: collection to change
         *  :param data_model: datamodel that the operations refer to
         *  :Returns: :protobuf:msg:`Mysqlx.Sql::ExecuteStmtOk` or :protobuf:msg:`Mysqlx::Error`
         * </pre>
         */
        public static final class Builder extends com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Mysqlx.Crud.Delete)
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DeleteOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Delete_descriptor;
            }

            protected com.google.protobuf.GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Delete_fieldAccessorTable.ensureFieldAccessorsInitialized(
                        com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete.class, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete.Builder.class);
            }

            // Construct using com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(com.google.protobuf.GeneratedMessage.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
                    getCollectionFieldBuilder();
                    getCriteriaFieldBuilder();
                    getLimitFieldBuilder();
                    getOrderFieldBuilder();
                }
            }

            private static Builder create() {
                return new Builder();
            }

            public Builder clear() {
                super.clear();
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000001);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                bitField0_ = (bitField0_ & ~0x00000002);
                if (criteriaBuilder_ == null) {
                    criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
                } else {
                    criteriaBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000004);
                if (limitBuilder_ == null) {
                    limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
                } else {
                    limitBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                if (orderBuilder_ == null) {
                    order_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000010);
                } else {
                    orderBuilder_.clear();
                }
                return this;
            }

            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.internal_static_Mysqlx_Crud_Delete_descriptor;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete getDefaultInstanceForType() {
                return com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete.getDefaultInstance();
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete build() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete buildPartial() {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete result = new com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                if (collectionBuilder_ == null) {
                    result.collection_ = collection_;
                } else {
                    result.collection_ = collectionBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.dataModel_ = dataModel_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                if (criteriaBuilder_ == null) {
                    result.criteria_ = criteria_;
                } else {
                    result.criteria_ = criteriaBuilder_.build();
                }
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                if (limitBuilder_ == null) {
                    result.limit_ = limit_;
                } else {
                    result.limit_ = limitBuilder_.build();
                }
                if (orderBuilder_ == null) {
                    if (((bitField0_ & 0x00000010) == 0x00000010)) {
                        order_ = java.util.Collections.unmodifiableList(order_);
                        bitField0_ = (bitField0_ & ~0x00000010);
                    }
                    result.order_ = order_;
                } else {
                    result.order_ = orderBuilder_.build();
                }
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete) {
                    return mergeFrom((com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete other) {
                if (other == com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete.getDefaultInstance())
                    return this;
                if (other.hasCollection()) {
                    mergeCollection(other.getCollection());
                }
                if (other.hasDataModel()) {
                    setDataModel(other.getDataModel());
                }
                if (other.hasCriteria()) {
                    mergeCriteria(other.getCriteria());
                }
                if (other.hasLimit()) {
                    mergeLimit(other.getLimit());
                }
                if (orderBuilder_ == null) {
                    if (!other.order_.isEmpty()) {
                        if (order_.isEmpty()) {
                            order_ = other.order_;
                            bitField0_ = (bitField0_ & ~0x00000010);
                        } else {
                            ensureOrderIsMutable();
                            order_.addAll(other.order_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.order_.isEmpty()) {
                        if (orderBuilder_.isEmpty()) {
                            orderBuilder_.dispose();
                            orderBuilder_ = null;
                            order_ = other.order_;
                            bitField0_ = (bitField0_ & ~0x00000010);
                            orderBuilder_ = com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getOrderFieldBuilder() : null;
                        } else {
                            orderBuilder_.addAllMessages(other.order_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasCollection()) {

                    return false;
                }
                if (!getCollection().isInitialized()) {

                    return false;
                }
                if (hasCriteria()) {
                    if (!getCriteria().isInitialized()) {

                        return false;
                    }
                }
                if (hasLimit()) {
                    if (!getLimit().isInitialized()) {

                        return false;
                    }
                }
                for (int i = 0; i < getOrderCount(); i++) {
                    if (!getOrder(i).isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Delete) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> collectionBuilder_;

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public boolean hasCollection() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection getCollection() {
                if (collectionBuilder_ == null) {
                    return collection_;
                } else {
                    return collectionBuilder_.getMessage();
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    collection_ = value;
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public Builder setCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder builderForValue) {
                if (collectionBuilder_ == null) {
                    collection_ = builderForValue.build();
                    onChanged();
                } else {
                    collectionBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public Builder mergeCollection(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection value) {
                if (collectionBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001) && collection_ != com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance()) {
                        collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.newBuilder(collection_).mergeFrom(value).buildPartial();
                    } else {
                        collection_ = value;
                    }
                    onChanged();
                } else {
                    collectionBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000001;
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public Builder clearCollection() {
                if (collectionBuilder_ == null) {
                    collection_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.getDefaultInstance();
                    onChanged();
                } else {
                    collectionBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000001);
                return this;
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder getCollectionBuilder() {
                bitField0_ |= 0x00000001;
                onChanged();
                return getCollectionFieldBuilder().getBuilder();
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder getCollectionOrBuilder() {
                if (collectionBuilder_ != null) {
                    return collectionBuilder_.getMessageOrBuilder();
                } else {
                    return collection_;
                }
            }

            /**
             * <code>required .Mysqlx.Crud.Collection collection = 1;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder> getCollectionFieldBuilder() {
                if (collectionBuilder_ == null) {
                    collectionBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Collection.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.CollectionOrBuilder>(
                            getCollection(), getParentForChildren(), isClean());
                    collection_ = null;
                }
                return collectionBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
             */
            public boolean hasDataModel() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel getDataModel() {
                return dataModel_;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
             */
            public Builder setDataModel(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000002;
                dataModel_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.DataModel data_model = 2;</code>
             */
            public Builder clearDataModel() {
                bitField0_ = (bitField0_ & ~0x00000002);
                dataModel_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.DataModel.DOCUMENT;
                onChanged();
                return this;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder> criteriaBuilder_;

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
             */
            public boolean hasCriteria() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr getCriteria() {
                if (criteriaBuilder_ == null) {
                    return criteria_;
                } else {
                    return criteriaBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
             */
            public Builder setCriteria(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr value) {
                if (criteriaBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    criteria_ = value;
                    onChanged();
                } else {
                    criteriaBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000004;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
             */
            public Builder setCriteria(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder builderForValue) {
                if (criteriaBuilder_ == null) {
                    criteria_ = builderForValue.build();
                    onChanged();
                } else {
                    criteriaBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000004;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
             */
            public Builder mergeCriteria(com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr value) {
                if (criteriaBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004) && criteria_ != com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance()) {
                        criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.newBuilder(criteria_).mergeFrom(value).buildPartial();
                    } else {
                        criteria_ = value;
                    }
                    onChanged();
                } else {
                    criteriaBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000004;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
             */
            public Builder clearCriteria() {
                if (criteriaBuilder_ == null) {
                    criteria_ = com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.getDefaultInstance();
                    onChanged();
                } else {
                    criteriaBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder getCriteriaBuilder() {
                bitField0_ |= 0x00000004;
                onChanged();
                return getCriteriaFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder getCriteriaOrBuilder() {
                if (criteriaBuilder_ != null) {
                    return criteriaBuilder_.getMessageOrBuilder();
                } else {
                    return criteria_;
                }
            }

            /**
             * <code>optional .Mysqlx.Expr.Expr criteria = 3;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder> getCriteriaFieldBuilder() {
                if (criteriaBuilder_ == null) {
                    criteriaBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.Expr.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxExpr.ExprOrBuilder>(
                            getCriteria(), getParentForChildren(), isClean());
                    criteria_ = null;
                }
                return criteriaBuilder_;
            }

            private com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder> limitBuilder_;

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
             */
            public boolean hasLimit() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit getLimit() {
                if (limitBuilder_ == null) {
                    return limit_;
                } else {
                    return limitBuilder_.getMessage();
                }
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
             */
            public Builder setLimit(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit value) {
                if (limitBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    limit_ = value;
                    onChanged();
                } else {
                    limitBuilder_.setMessage(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
             */
            public Builder setLimit(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder builderForValue) {
                if (limitBuilder_ == null) {
                    limit_ = builderForValue.build();
                    onChanged();
                } else {
                    limitBuilder_.setMessage(builderForValue.build());
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
             */
            public Builder mergeLimit(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit value) {
                if (limitBuilder_ == null) {
                    if (((bitField0_ & 0x00000008) == 0x00000008) && limit_ != com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance()) {
                        limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.newBuilder(limit_).mergeFrom(value).buildPartial();
                    } else {
                        limit_ = value;
                    }
                    onChanged();
                } else {
                    limitBuilder_.mergeFrom(value);
                }
                bitField0_ |= 0x00000008;
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
             */
            public Builder clearLimit() {
                if (limitBuilder_ == null) {
                    limit_ = com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.getDefaultInstance();
                    onChanged();
                } else {
                    limitBuilder_.clear();
                }
                bitField0_ = (bitField0_ & ~0x00000008);
                return this;
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder getLimitBuilder() {
                bitField0_ |= 0x00000008;
                onChanged();
                return getLimitFieldBuilder().getBuilder();
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder getLimitOrBuilder() {
                if (limitBuilder_ != null) {
                    return limitBuilder_.getMessageOrBuilder();
                } else {
                    return limit_;
                }
            }

            /**
             * <code>optional .Mysqlx.Crud.Limit limit = 4;</code>
             */
            private com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder> getLimitFieldBuilder() {
                if (limitBuilder_ == null) {
                    limitBuilder_ = new com.google.protobuf.SingleFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Limit.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.LimitOrBuilder>(
                            getLimit(), getParentForChildren(), isClean());
                    limit_ = null;
                }
                return limitBuilder_;
            }

            private java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> order_ = java.util.Collections.emptyList();

            private void ensureOrderIsMutable() {
                if (!((bitField0_ & 0x00000010) == 0x00000010)) {
                    order_ = new java.util.ArrayList<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order>(order_);
                    bitField0_ |= 0x00000010;
                }
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> orderBuilder_;

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> getOrderList() {
                if (orderBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(order_);
                } else {
                    return orderBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public int getOrderCount() {
                if (orderBuilder_ == null) {
                    return order_.size();
                } else {
                    return orderBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order getOrder(int index) {
                if (orderBuilder_ == null) {
                    return order_.get(index);
                } else {
                    return orderBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public Builder setOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order value) {
                if (orderBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOrderIsMutable();
                    order_.set(index, value);
                    onChanged();
                } else {
                    orderBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public Builder setOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder builderForValue) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    orderBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public Builder addOrder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order value) {
                if (orderBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOrderIsMutable();
                    order_.add(value);
                    onChanged();
                } else {
                    orderBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public Builder addOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order value) {
                if (orderBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureOrderIsMutable();
                    order_.add(index, value);
                    onChanged();
                } else {
                    orderBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public Builder addOrder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder builderForValue) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.add(builderForValue.build());
                    onChanged();
                } else {
                    orderBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public Builder addOrder(int index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder builderForValue) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    orderBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public Builder addAllOrder(java.lang.Iterable<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order> values) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(values, order_);
                    onChanged();
                } else {
                    orderBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public Builder clearOrder() {
                if (orderBuilder_ == null) {
                    order_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000010);
                    onChanged();
                } else {
                    orderBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public Builder removeOrder(int index) {
                if (orderBuilder_ == null) {
                    ensureOrderIsMutable();
                    order_.remove(index);
                    onChanged();
                } else {
                    orderBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder getOrderBuilder(int index) {
                return getOrderFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder getOrderOrBuilder(int index) {
                if (orderBuilder_ == null) {
                    return order_.get(index);
                } else {
                    return orderBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public java.util.List<? extends com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderOrBuilderList() {
                if (orderBuilder_ != null) {
                    return orderBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(order_);
                }
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder addOrderBuilder() {
                return getOrderFieldBuilder().addBuilder(com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder addOrderBuilder(int index) {
                return getOrderFieldBuilder().addBuilder(index, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.getDefaultInstance());
            }

            /**
             * <code>repeated .Mysqlx.Crud.Order order = 5;</code>
             */
            public java.util.List<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder> getOrderBuilderList() {
                return getOrderFieldBuilder().getBuilderList();
            }

            private com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder> getOrderFieldBuilder() {
                if (orderBuilder_ == null) {
                    orderBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.Order.Builder, com.mysql.cj.mysqlx.protobuf.MysqlxCrud.OrderOrBuilder>(
                            order_, ((bitField0_ & 0x00000010) == 0x00000010), getParentForChildren(), isClean());
                    order_ = null;
                }
                return orderBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:Mysqlx.Crud.Delete)
        }

        static {
            defaultInstance = new Delete(true);
            defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:Mysqlx.Crud.Delete)
    }

    private static final com.google.protobuf.Descriptors.Descriptor internal_static_Mysqlx_Crud_Column_descriptor;
    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_Mysqlx_Crud_Column_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_Mysqlx_Crud_Collection_descriptor;
    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_Mysqlx_Crud_Collection_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_Mysqlx_Crud_Limit_descriptor;
    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_Mysqlx_Crud_Limit_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_Mysqlx_Crud_Order_descriptor;
    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_Mysqlx_Crud_Order_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_Mysqlx_Crud_PrepareFind_descriptor;
    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_Mysqlx_Crud_PrepareFind_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_Mysqlx_Crud_PrepareInsert_descriptor;
    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_Mysqlx_Crud_PrepareInsert_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_Mysqlx_Crud_PrepareUpdate_descriptor;
    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_Mysqlx_Crud_PrepareUpdate_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_Mysqlx_Crud_PrepareDelete_descriptor;
    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_Mysqlx_Crud_PrepareDelete_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_Mysqlx_Crud_Find_descriptor;
    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_Mysqlx_Crud_Find_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_Mysqlx_Crud_Insert_descriptor;
    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_Mysqlx_Crud_Insert_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_Mysqlx_Crud_Update_descriptor;
    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_Mysqlx_Crud_Update_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor internal_static_Mysqlx_Crud_Delete_descriptor;
    private static com.google.protobuf.GeneratedMessage.FieldAccessorTable internal_static_Mysqlx_Crud_Delete_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor descriptor;
    static {
        java.lang.String[] descriptorData = {
                "\n\021mysqlx_crud.proto\022\013Mysqlx.Crud\032\021mysqlx" + "_expr.proto\032\020mysqlx_sql.proto\"[\n\006Column\022"
                        + "\014\n\004name\030\001 \001(\t\022\r\n\005alias\030\002 \001(\t\0224\n\rdocument"
                        + "_path\030\003 \003(\0132\035.Mysqlx.Expr.DocumentPathIt"
                        + "em\"*\n\nCollection\022\014\n\004name\030\001 \002(\t\022\016\n\006schema"
                        + "\030\002 \001(\t\"%\n\005Limit\022\014\n\004skip\030\001 \002(\004\022\016\n\006offset\030"
                        + "\002 \001(\004\"l\n\005Order\022\r\n\005field\030\001 \002(\t\0224\n\tdirecti"
                        + "on\030\002 \001(\0162\034.Mysqlx.Crud.Order.Direction:\003"
                        + "ASC\"\036\n\tDirection\022\007\n\003ASC\020\001\022\010\n\004DESC\020\002\"\213\002\n\013"
                        + "PrepareFind\022\017\n\007stmt_id\030\001 \002(\r\022+\n\ncollecti",
                "on\030\002 \002(\0132\027.Mysqlx.Crud.Collection\022*\n\ndat" + "a_model\030\003 \001(\0162\026.Mysqlx.Crud.DataModel\022\'\n"
                        + "\nprojection\030\004 \003(\0132\023.Mysqlx.Crud.Column\022#" + "\n\010criteria\030\005 \001(\0132\021.Mysqlx.Expr.Expr\022!\n\005l"
                        + "imit\030\006 \001(\0132\022.Mysqlx.Crud.Limit\022!\n\005order\030" + "\007 \003(\0132\022.Mysqlx.Crud.Order\"\242\001\n\rPrepareIns"
                        + "ert\022\017\n\007stmt_id\030\001 \002(\r\022+\n\ncollection\030\002 \002(\013"
                        + "2\027.Mysqlx.Crud.Collection\022*\n\ndata_model\030" + "\003 \001(\0162\026.Mysqlx.Crud.DataModel\022\'\n\nproject"
                        + "ion\030\004 \003(\0132\023.Mysqlx.Crud.Column\"y\n\rPrepar",
                "eUpdate\022\017\n\007stmt_id\030\001 \002(\r\022+\n\ncollection\030\002" + " \002(\0132\027.Mysqlx.Crud.Collection\022*\n\ndata_mo"
                        + "del\030\003 \001(\0162\026.Mysqlx.Crud.DataModel\"\344\001\n\rPr"
                        + "epareDelete\022\017\n\007stmt_id\030\001 \002(\r\022+\n\ncollecti" + "on\030\002 \002(\0132\027.Mysqlx.Crud.Collection\022*\n\ndat"
                        + "a_model\030\003 \001(\0162\026.Mysqlx.Crud.DataModel\022#\n" + "\010criteria\030\004 \001(\0132\021.Mysqlx.Expr.Expr\022!\n\005li"
                        + "mit\030\005 \001(\0132\022.Mysqlx.Crud.Limit\022!\n\005order\030\006"
                        + " \003(\0132\022.Mysqlx.Crud.Order\"\363\001\n\004Find\022+\n\ncol" + "lection\030\002 \002(\0132\027.Mysqlx.Crud.Collection\022*",
                "\n\ndata_model\030\003 \001(\0162\026.Mysqlx.Crud.DataMod" + "el\022\'\n\nprojection\030\004 \003(\0132\023.Mysqlx.Crud.Col"
                        + "umn\022#\n\010criteria\030\005 \001(\0132\021.Mysqlx.Expr.Expr"
                        + "\022!\n\005limit\030\006 \001(\0132\022.Mysqlx.Crud.Limit\022!\n\005o"
                        + "rder\030\007 \003(\0132\022.Mysqlx.Crud.Order\"\250\001\n\006Inser" + "t\022+\n\ncollection\030\001 \002(\0132\027.Mysqlx.Crud.Coll"
                        + "ection\022*\n\ndata_model\030\002 \001(\0162\026.Mysqlx.Crud" + ".DataModel\022\'\n\nprojection\030\003 \003(\0132\023.Mysqlx."
                        + "Crud.Column\022\034\n\003row\030\004 \003(\0132\017.Mysqlx.Sql.Ro"
                        + "w\"a\n\006Update\022+\n\ncollection\030\002 \002(\0132\027.Mysqlx",
                ".Crud.Collection\022*\n\ndata_model\030\003 \001(\0162\026.M" + "ysqlx.Crud.DataModel\"\314\001\n\006Delete\022+\n\ncolle"
                        + "ction\030\001 \002(\0132\027.Mysqlx.Crud.Collection\022*\n\n" + "data_model\030\002 \001(\0162\026.Mysqlx.Crud.DataModel"
                        + "\022#\n\010criteria\030\003 \001(\0132\021.Mysqlx.Expr.Expr\022!\n"
                        + "\005limit\030\004 \001(\0132\022.Mysqlx.Crud.Limit\022!\n\005orde" + "r\030\005 \003(\0132\022.Mysqlx.Crud.Order*$\n\tDataModel"
                        + "\022\014\n\010DOCUMENT\020\001\022\t\n\005TABLE\020\002B\036\n\034com.mysql.c" + "j.mysqlx.protobuf" };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
            public com.google.protobuf.ExtensionRegistry assignDescriptors(com.google.protobuf.Descriptors.FileDescriptor root) {
                descriptor = root;
                return null;
            }
        };
        com.google.protobuf.Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData, new com.google.protobuf.Descriptors.FileDescriptor[] {
                com.mysql.cj.mysqlx.protobuf.MysqlxExpr.getDescriptor(), com.mysql.cj.mysqlx.protobuf.MysqlxSql.getDescriptor(), }, assigner);
        internal_static_Mysqlx_Crud_Column_descriptor = getDescriptor().getMessageTypes().get(0);
        internal_static_Mysqlx_Crud_Column_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_Mysqlx_Crud_Column_descriptor, new java.lang.String[] { "Name", "Alias", "DocumentPath", });
        internal_static_Mysqlx_Crud_Collection_descriptor = getDescriptor().getMessageTypes().get(1);
        internal_static_Mysqlx_Crud_Collection_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_Mysqlx_Crud_Collection_descriptor, new java.lang.String[] { "Name", "Schema", });
        internal_static_Mysqlx_Crud_Limit_descriptor = getDescriptor().getMessageTypes().get(2);
        internal_static_Mysqlx_Crud_Limit_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_Mysqlx_Crud_Limit_descriptor, new java.lang.String[] { "Skip", "Offset", });
        internal_static_Mysqlx_Crud_Order_descriptor = getDescriptor().getMessageTypes().get(3);
        internal_static_Mysqlx_Crud_Order_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_Mysqlx_Crud_Order_descriptor, new java.lang.String[] { "Field", "Direction", });
        internal_static_Mysqlx_Crud_PrepareFind_descriptor = getDescriptor().getMessageTypes().get(4);
        internal_static_Mysqlx_Crud_PrepareFind_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_Mysqlx_Crud_PrepareFind_descriptor, new java.lang.String[] { "StmtId", "Collection", "DataModel", "Projection", "Criteria",
                        "Limit", "Order", });
        internal_static_Mysqlx_Crud_PrepareInsert_descriptor = getDescriptor().getMessageTypes().get(5);
        internal_static_Mysqlx_Crud_PrepareInsert_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_Mysqlx_Crud_PrepareInsert_descriptor, new java.lang.String[] { "StmtId", "Collection", "DataModel", "Projection", });
        internal_static_Mysqlx_Crud_PrepareUpdate_descriptor = getDescriptor().getMessageTypes().get(6);
        internal_static_Mysqlx_Crud_PrepareUpdate_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_Mysqlx_Crud_PrepareUpdate_descriptor, new java.lang.String[] { "StmtId", "Collection", "DataModel", });
        internal_static_Mysqlx_Crud_PrepareDelete_descriptor = getDescriptor().getMessageTypes().get(7);
        internal_static_Mysqlx_Crud_PrepareDelete_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_Mysqlx_Crud_PrepareDelete_descriptor, new java.lang.String[] { "StmtId", "Collection", "DataModel", "Criteria", "Limit",
                        "Order", });
        internal_static_Mysqlx_Crud_Find_descriptor = getDescriptor().getMessageTypes().get(8);
        internal_static_Mysqlx_Crud_Find_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_Mysqlx_Crud_Find_descriptor, new java.lang.String[] { "Collection", "DataModel", "Projection", "Criteria", "Limit", "Order", });
        internal_static_Mysqlx_Crud_Insert_descriptor = getDescriptor().getMessageTypes().get(9);
        internal_static_Mysqlx_Crud_Insert_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_Mysqlx_Crud_Insert_descriptor, new java.lang.String[] { "Collection", "DataModel", "Projection", "Row", });
        internal_static_Mysqlx_Crud_Update_descriptor = getDescriptor().getMessageTypes().get(10);
        internal_static_Mysqlx_Crud_Update_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_Mysqlx_Crud_Update_descriptor, new java.lang.String[] { "Collection", "DataModel", });
        internal_static_Mysqlx_Crud_Delete_descriptor = getDescriptor().getMessageTypes().get(11);
        internal_static_Mysqlx_Crud_Delete_fieldAccessorTable = new com.google.protobuf.GeneratedMessage.FieldAccessorTable(
                internal_static_Mysqlx_Crud_Delete_descriptor, new java.lang.String[] { "Collection", "DataModel", "Criteria", "Limit", "Order", });
        com.mysql.cj.mysqlx.protobuf.MysqlxExpr.getDescriptor();
        com.mysql.cj.mysqlx.protobuf.MysqlxSql.getDescriptor();
    }

    // @@protoc_insertion_point(outer_class_scope)
}

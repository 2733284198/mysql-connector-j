<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
  <bookinfo>
    <title>MySQL Connector/J Documentation</title>

    <author>
      <firstname>Mark</firstname>

      <surname>Matthews</surname>
    </author>

    <copyright>
      <year>2002</year>

      <holder>MySQL AB</holder>
    </copyright>
  </bookinfo>

  <chapter>
    <title>Introduction</title>

    <para></para>

    <sect1>
      <title>What is MySQL Connector/J?</title>

      <para>MySQL Connector/J is an implemntation of Sun&#39;s JDBC API for
      the MySQL relational database server. It strives to conform as much as
      possible to the JDBC API as specified by JavaSoft. It is known to work
      with many third-party products, including Apache Tomcat, Borland
      JBuilder, IBM Visual Age for Java, SQL/J, JBoss, Weblogic, IBM
      WebSphere, Cocobase, ObjectRelationalBridge, etc.</para>
    </sect1>

    <sect1>
      <title>Release Notes</title>

      <para></para>

      <sect2>
        <title>Known Issues</title>

        <para></para>

        <sect3>
          <title>Implementation Notes (by java.sql and javax.sql
          Interface/Class)</title>

          <para>MySQL Connector/J passes all of the tests in Sun&#39;s JDBC
          compliance testsuite except for tests requiring stored procedures
          (which MySQL does not have at this time). However, in many places
          the JDBC specification is vague about how certain functionality
          should be implemented, or the specification allows leeway in
          implementation.</para>

          <para>This section gives details on a interface-by-interface level
          about how certain implementation decisions may affect how you use
          MySQL Connector/J.</para>

          <itemizedlist>
            <listitem>
              <para>Blob</para>

              <para>The Blob implementation does not allow in-place
              modification (they are &#39;copies&#39;, as reported by the
              DatabaseMetaData.locatorsUpdateCopies() method). Because of
              this, you should use the corresponding
              PreparedStatement.setBlob() or ResultSet.updateBlob() (in the
              case of updatable result sets) methods to save changes back to
              the database.</para>
            </listitem>

            <listitem>
              <para>Clob</para>

              <para>The Clob implementation does not allow in-place
              modification (they are &#39;copies&#39;, as reported by the
              DatabaseMetaData.locatorsUpdateCopies() method). Because of
              this, you should use the PreparedStatement.setClob() method to
              save changes back to the database. The JDBC API does not have a
              ResultSet.updateClob() method.</para>
            </listitem>

            <listitem>
              <para>Connection</para>
            </listitem>

            <listitem>
              <para>DatabaseMetaData</para>

              <para>Foreign Key information (getImported/ExportedKeys() and
              getCrossReference()) is only available from
              &#39;InnoDB&#39;-type tables. However, the driver uses &#39;SHOW
              CREATE TABLE&#39; to retrieve this information, so when other
              table types support foreign keys, the driver will transparently
              support them as well.</para>
            </listitem>

            <listitem>
              <para>Driver</para>
            </listitem>

            <listitem>
              <para>PreparedStatement</para>

              <para>PreparedStatements are implemented by the driver, as MySQL
              does not have a prepared statement feature. Because of this, the
              driver does not implement getParameterMetaData() or
              getMetaData() as it would require the driver to have a complete
              SQL parser in the client.</para>
            </listitem>

            <listitem>
              <para>ResultSet</para>
            </listitem>

            <listitem>
              <para>ResultSetMetaData</para>
            </listitem>

            <listitem>
              <para>Statement</para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3>
          <title>Un-implemented Functionality</title>

          <para>The following methods in the JDBC API have not been
          implemented yet. They rely on functionality that at this time is not
          present in the MySQL server:</para>

          <itemizedlist>
            <listitem>
              <para>Blob.truncate()</para>
            </listitem>
          </itemizedlist>

          <itemizedlist>
            <listitem>
              <para>Connection.setSavePoint()</para>
            </listitem>

            <listitem>
              <para>Connection.setTypeMap(Map)</para>
            </listitem>

            <listitem>
              <para>Connection.getTypeMap()</para>
            </listitem>

            <listitem>
              <para>Connection.prepareCall(String)</para>
            </listitem>

            <listitem>
              <para>Connection.releaseSavepoint(Savepoint)</para>
            </listitem>

            <listitem>
              <para>Connection.rollback(Savepoint)</para>
            </listitem>
          </itemizedlist>

          <itemizedlist>
            <listitem>
              <para>PreparedStatement.setArray(int, Array)</para>
            </listitem>

            <listitem>
              <para>PreparedStatement.getMetaData()</para>
            </listitem>

            <listitem>
              <para>PreparedStatement.setRef()</para>
            </listitem>

            <listitem>
              <para>PreparedStatement.getParameterMetaData()</para>
            </listitem>
          </itemizedlist>

          <itemizedlist>
            <listitem>
              <para>ResultSet.getArray(int)</para>
            </listitem>

            <listitem>
              <para>ResultSet.getArray(colName)</para>
            </listitem>

            <listitem>
              <para>ResultSet.getObject(int, Map)</para>
            </listitem>

            <listitem>
              <para>ResultSet.getObject(String, Map)</para>
            </listitem>

            <listitem>
              <para>ResultSet.getRef(int)</para>
            </listitem>

            <listitem>
              <para>ResultSet.getRef(String)</para>
            </listitem>

            <listitem>
              <para>ResultSet.rowDeleted()</para>
            </listitem>

            <listitem>
              <para>ResultSet.rowInserted()</para>
            </listitem>

            <listitem>
              <para>ResultSet.rowUpdated()</para>
            </listitem>

            <listitem>
              <para>ResultSet.updateArray(int, Array)</para>
            </listitem>

            <listitem>
              <para>ResultSet.updateArray(String, Array)</para>
            </listitem>

            <listitem>
              <para>ResultSet.updateRef(int, Ref)</para>
            </listitem>

            <listitem>
              <para>ResultSet.updateRef(String, Ref)</para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>
    </sect1>
  </chapter>

  <chapter>
    <title>Installation</title>

    <para>This chapter contains instructions for installing the MySQL
    Connector/J drivers on Microsoft Windows and UNIX platforms. If you are on
    another platform that supports Java and the JDBC API then substitute
    commands appropriate for your system.</para>

    <sect1>
      <title>System Requirements</title>

      <sect2>
        <title>Java Versions Supported</title>

        <para>MySQL Connector/J supports Java-2 JVMs, including JDK-1.2.x,
        JDK-1.3.x and JDK-1.4.x. MySQL Connector/J does not support JDK-1.1.x
        or JDK-1.0.x</para>
      </sect2>

      <sect2>
        <title>MySQL Server versions supported</title>

        <para>MySQL Connector/J supports all known MySQL server versions. Some
        features (foreign keys, updatable result sets) require more recent
        versions of MySQL to operate.</para>
      </sect2>

      <sect2>
        <title>Installing MySQL Connector/J</title>

        <para>MySQL Connector/J is distributed as a .zip or .tar.gz archive
        containing the sources and class files as well as a class-file only
        &#34;binary&#34; .jar archive named
        &#34;mysql-connector-java-[version]-bin.jar&#34;. You will need to use
        the appropriate gui or command-line utility to un-archive the
        distribution (for example, WinZip for the .zip archive, and
        &#34;tar&#34; for the .tar.gz archive).</para>

        <sect3>
          <title>Setting the CLASSPATH (for standalone use)</title>

          <para>Once you have un-archived the distribution archive, you can
          install the driver in one of two ways: Either copy the &#34;com&#34;
          and &#34;org&#34; subdirectories and all of their contents to
          anywhere you like, and put the directory holding the &#34;com&#34;
          and &#34;org&#34; subdirectories in your classpath, or put
          mysql-connector-java-[version]-bin.jar in your classpath, either by
          adding the FULL path to it to your CLASSPATH enviornment variable,
          or by copying the .jar file to $JAVA_HOME/jre/lib/ext. If you are
          going to use the driver with the JDBC DriverManager, you would use
          &#34;com.mysql.jdbc.Driver&#34; as the class that implements
          java.sql.Driver. </para>

          <example>
            <title>Setting the CLASSPATH under UNIX</title>

            <para>The following command works for &#39;csh&#39; under UNIX:</para>

            <screen>$ setenv CLASSPATH
            /path/to/mysql-connector-java-[version]-bin.jar:$CLASSPATH</screen>
          </example>

          <para>The above command can be added to the appropriate startup file
          for the login shell to make MySQL Connector/J available to all Java
          applications.</para>

          <example>
            <title>Setting the CLASSPATH under Microsoft Windows 9X</title>

            <para>The following is an example of setting the CLASSPATH under
            Microsoft Windows 95, 98, ME:</para>

            <screen>C:\&#62; set
            CLASSPATH=\path\to\mysql-connector-java-[version]-bin.jar;%CLASSPATH%</screen>
          </example>

          <para>This command can be added as the last line in AUTOEXEC.BAT. If
          this is done the MySQL Connector/J driver will be made available to
          all Java applications that run on the Windows 9x system. This
          setting will require the computer to be rebooted before the changes
          will take effect.</para>
        </sect3>

        <sect3>
          <title>Installing MySQL Connector/J for use with Servlets/JSP/EJB</title>

          <para>If you want to use MySQL Connector/J with a servlet engine or
          application server such as Tomcat or JBoss, you will have to read
          your vendor&#39;s documentation for more information on how to
          configure third-party class libraries, as most application servers
          ignore the CLASSPATH environment variable.</para>

          <itemizedlist>
            <listitem>
              <para>user</para>
            </listitem>

            <listitem>
              <para>password</para>
            </listitem>

            <listitem>
              <para>serverName (see the next section about fail-over hosts)</para>
            </listitem>

            <listitem>
              <para>databaseName</para>
            </listitem>

            <listitem>
              <para>port</para>
            </listitem>
          </itemizedlist>

          <para>If you are developing servlets and/or JSPs, and your
          application server is J2EE-compliant, you should put the
          driver&#39;s .jar file in the WEB-INF/lib subdirectory of your
          webapp, as this is the standard location for third party class
          libraries in J2EE web applications. </para>

          <para>You can also use the MysqlDataSource,
          MysqlConnectionPoolDataSource or MysqlXADataSource classes in the
          com.mysql.jdbc.jdbc2.optional and com.mysql.jdbc.jdbc2.optional.xa
          packages, if your J2EE application server supports or requires them.
          The various MysqlDataSource classes support the following parameters
          (through standard &#34;set&#34; mutators):</para>
        </sect3>
      </sect2>

      <sect2>
        <title>What&#39;s Next?</title>

        <para>Once the driver has been installed into your CLASSPATH or
        application server, the driver is ready for use! Taking a look at the
        next chapter containing programming information might be a good idea,
        however. </para>
      </sect2>
    </sect1>

    <!---->
  </chapter>

  <chapter>
    <title>Developing Applications with MySQL Connector/J</title>

    <para>...</para>

    <sect1>
      <title>Basic Functionality</title>

      <para></para>

      <sect2>
        <title>Importing Interfaces from the java.sql Package</title>

        <para></para>
      </sect2>

      <sect2>
        <title>Registering MySQL Connector/J with the JDBC DriverManager</title>

        <para>When you are using JDBC outside of an application server, the
        DriverManager class manages the establishment of Connections. </para>

        <para>The DriverManager needs to be told which JDBC drivers it should
        try to make Connections with. The easiest way to do this is to use
        Class.forName() on the class that implements the java.sql.Driver
        interface. With MySQL Connector/J, the name of this class is
        com.mysql.jdbc.Driver. With this method, you could use an external
        configuration file to supply the driver class name and driver
        parameters to use when connecting to a database.</para>

        <example>
          <title>Registering the Driver with the DriverManager</title>

          <para>The following section of Java code shows how you might
          register MySQL Connector/J from the main() method of your
          application.<programlisting>import java.sql.Connection; import
          java.sql.DriverManager; import java.sql.SQLException; // Notice, do
          not import com.mysql.jdbc.* // or you will have problems! public
          class LoadDriver { public static void main(String[] args) { try { //
          The newInstance() call is a work around for some // broken Java
          implementations
          Class.forName(&#34;com.mysql.jdbc.Driver&#34;).newInstance(); }
          catch (Exception ex) { // handle the error }</programlisting></para>
        </example>
      </sect2>

      <sect2>
        <title>Opening a Connection to MySQL</title>

        <para>After the driver has been registered with the DriverManager, you
        can obtain a Connection instance that is connected to a particular
        database by calling DriverManager.getConnection():</para>

        <example>
          <title>Obtaining a Connection from the DriverManager</title>

          <para>This example shows how you can obtain a Connection instance
          from the DriverManager. There are a few different signatures for the
          getConnection() method. You should see the API documentation that
          comes with your JDK for more specific information on how to use
          them.<programlisting>import java.sql.Connection; import
          java.sql.DriverManager; import java.sql.SQLException; ... try {
          Connection conn = DriverManager.getConnection(
          &#34;jdbc:mysql://localhost/test?user=monty&#38;password=greatsqldb&#34;);
          // Do something with the Connection .... } catch (SQLException ex) {
          // handle any errors System.out.println(&#34;SQLException: &#34; +
          ex.getMessage()); System.out.println(&#34;SQLState: &#34; +
          ex.getSQLState()); System.out.println(&#34;VendorError: &#34; +
          ex.getErrorCode()); }</programlisting></para>
        </example>

        <para>Once a Connection is established, it can be used to create
        Statements and PreparedStatements, as well as retrieve metadata about
        the database. This is explained in the following sections. </para>
      </sect2>

      <sect2>
        <title>Exception Handling</title>

        <para></para>
      </sect2>

      <sect2>
        <title>Creating a Statement Instance</title>

        <para>Statements allow you to execute basic SQL queries and retrieve
        the results through the ResultSet class which is described later. To
        get a Statement object, you call the createStatement() method on the
        Connection object you have retrieved via the
        DriverManager.getConnection() method. Once you have a Statement
        object, you can execute a SELECT query by calling the
        executeQuery(String SQL) method with the SQL you want to use. To
        update data in the database use the executeUpdate(String SQL) method.
        This method returns the number of rows affected by the update
        statement. If you don&#39;t know ahead of time whether the SQL
        statement will be a SELECT or an UPDATE/INSERT, then you can use the
        execute(String SQL) method. This method will return -1 if the SQL
        statement was a SELECT, or the number of rows affected by the
        UPDATE/INSERT statement. If the statement was a SELECT statement, you
        can retrieve the results by calling the getResultSet() method.</para>
      </sect2>

      <sect2>
        <title>Executing a SELECT Query</title>

        <para></para>
      </sect2>

      <sect2>
        <title>Navigating a ResultSet</title>

        <para></para>
      </sect2>

      <sect2>
        <title>Making Changes to the Database</title>

        <para></para>
      </sect2>

      <sect2>
        <title>Using PreparedStatements</title>

        <para></para>
      </sect2>

      <sect2>
        <title>Closing the ResultSet, Statement and Connection Instances</title>

        <para></para>
      </sect2>
    </sect1>

    <sect1>
      <title>JDBC-2.0 Functionality</title>

      <para></para>
    </sect1>

    <sect1>
      <title>JDBC-3.0 Functionality</title>

      <para></para>
    </sect1>

    <sect1>
      <title>DataSources and Connection Pooling</title>

      <para></para>
    </sect1>
  </chapter>

  <chapter>
    <title>Tips and Troubleshooting</title>

    <para></para>

    <sect1>
      <title>Tips</title>

      <para></para>
    </sect1>

    <sect1>
      <title>Troubleshooting</title>

      <para> There are a few issues that seem to be encountered often by users
      of MySQL Connector/J. This section deals with their symptoms, and their
      resolutions. If you have further issues, see the &#34;SUPPORT&#34;
      section.</para>

      <sect2>
        <title>&#39;Server configuration denies access to data source&#39;</title>

        <qandaset>
          <qandadiv>
            <qandaentry>
              <question>
                <para>When I try to connect to the database with MySQL
                Connector/J, I get the following exception:</para>

                <screen>SQLException: Server configuration denies access to
                data source SQLState: 08001 VendorError: 0</screen>

                <para>What&#39;s going on? I can connect just fine with the
                MySQL command-line client.</para>
              </question>

              <answer>
                <para>MySQL Connector/J must use TCP/IP sockets to connect to
                MySQL, as Java does not support Unix Domain Sockets.
                Therefore, when MySQL Connector/J connects to MySQL, the
                security manager in MySQL server will use the HOSTS table to
                determine whether or not the connection should be allowed.</para>

                <para>You must add grants to allow this to happen. The
                following is an example of how to do this (but not the most
                secure).</para>

                <para>From the mysql command-line client, logged in as a user
                that can grant prvileges, issue the following command:</para>

                <screen>GRANT ALL PRIVILEGES ON [dbname].* to
                &#39;[user]&#39;@&#39;[hostname]&#39; identified by
                &#39;[password]&#39;</screen>

                <para>replacing [dbname] with the name of your database,
                [user] with the username, [hostname] with the host that MySQL
                Connector/J will be connecting from, and [password] with the
                password you want to use. Be aware that RedHat linux is broken
                with respect to the hostname portion for the case when you are
                connecting from localhost. You need to use
                &#34;localhost.localdomain&#34; for the [hostname] value in
                this case. Follow this by issuing the &#34;FLUSH
                PRIVILEGES&#34; command.</para>

                <note>
                  <para>Testing your connectivity with the &#34;mysql&#34;
                  command-line client will not work unless you add the
                  &#34;--host&#34; flag, and use something other than
                  &#34;localhost&#34; for the host. The &#34;mysql&#34;
                  command-line client will use Unix domain sockets if you use
                  the special hostname &#34;localhost&#34;. If you are testing
                  connectivity to &#34;localhost&#34;, use &#34;127.0.0.1&#34;
                  as the hostname instead.</para>
                </note>

                <warning>
                  <para>If you don&#39;t understand what the &#39;GRANT&#39;
                  command does, or how it works, you should read and
                  understand the <ulink
                  url="http://www.mysql.com/doc/en/Privilege_system.html">&#39;General
                  Security Issues and the MySQL Access Privilege System&#39;</ulink>section
                  of the MySQL manual before attempting to change privileges.</para>

                  <para>Changing privileges and permissions improperly in
                  MySQL can potentially cause security problems with your
                  MySQL server.</para>
                </warning>
              </answer>
            </qandaentry>
          </qandadiv>
        </qandaset>

        <para></para>
      </sect2>

      <sect2>
        <title>&#39;No Suitable Driver&#39;</title>

        <qandaset>
          <qandadiv>
            <qandaentry>
              <question>
                <para>My application throws a SQLException &#39;No Suitable
                Driver&#39;. Why is this happening?</para>
              </question>

              <answer>
                <para>One of two things are happening. Either the driver is
                not in your CLASSPATH (see the <link linkend="???"></link>&#34;INSTALLATION&#34;
                section above), or your URL format is incoorect (see
                &#34;Developing Applications with MySQL Connector/J&#34;).</para>
              </answer>
            </qandaentry>
          </qandadiv>
        </qandaset>

        <para></para>
      </sect2>

      <sect2>
        <title>&#39;Cannot connect to MySQL server on host:3306&#39;</title>

        <qandaset>
          <qandadiv>
            <qandaentry>
              <question>
                <para>I&#39;m trying to use MySQL Connector/J in an applet or
                application and I get an exception similar to: </para>

                <screen>SQLException: Cannot connect to MySQL server on
                host:3306. Is there a MySQL server running on the machine/port
                you are trying to connect to?
                (java.security.AccessControlException) SQLState: 08S01
                VendorError: 0 </screen>
              </question>

              <answer>
                <para>Either you&#39;re running an Applet, your MySQL server
                has been installed with the &#34;--skip-networking&#34; option
                set, or your MySQL server has a firewall sitting in front of
                it.</para>

                <para>Applets can only make network connections back to the
                machine that runs the webserver that served the .class files
                for the applet. This means that mysql must run on the same
                machine (or you must have some sort of port re-direction) for
                this to work. This also means that you will not be able to
                test applets from your local filesystem, you must always
                deploy them to a webserver. </para>

                <para>MySQL Connector/J can only communicate with MySQL using
                TCP/IP, as Java does not support Unix domain sockets. TCP/IP
                communication with MySQL might be affected if MySQL was
                started with the &#34;--skip-networking&#34; flag, or if it is
                firewalled.</para>

                <para>If MySQL has been started with the
                &#34;--skip-networking&#34; option set (the Debian Linux
                package of MySQL server does this for example), you need to
                comment it out in the file /etc/mysql/my.cnf or /etc/my.cnf.
                Of course your my.cnf file might also exist in the
                &#34;data&#34; directory of your MySQL server, or anywhere
                else (depending on how MySQL was compiled for your system).
                Binaries created by MySQL AB always look in /etc/my.cnf and
                [datadir]/my.cnf. If your MySQL server has been firewalled,
                you will need to have the firewall configured to allow TCP/IP
                connections from the host where your Java code is running to
                the MySQL server on the port that MySQL is listening (by
                default, 3306).</para>
              </answer>
            </qandaentry>
          </qandadiv>
        </qandaset>

        <para></para>
      </sect2>

      <sect2>
        <title>Application works fine for a day, and then stops working
        overnight</title>

        <qandaset>
          <qandadiv>
            <qandaentry>
              <question>
                <para>I have a servlet/application that works fine for a day,
                and then stops working overnight</para>
              </question>

              <answer>
                <para>MySQL closes connections after 8 hours of inactivity.
                You either need to use a connection pool that handles stale
                connections or use the &#34;autoReconnect&#34; parameter (see
                &#34;Developing Applications with MySQL Connector/J&#34;).
                </para>

                <para>Also, you should be catching SQLExceptions in your
                application and dealing with them, rather than propagating
                them all the way until your application exits, this is just
                good programming practice. MySQL Connector/J will set the
                SQLState (see java.sql.SQLException.getSQLState() in your
                APIDOCS) to &#34;08S01&#34; when it encounters
                network-connectivity issues during the processing of a query.
                Your application code should then attempt to re-connect to
                MySQL at this point.</para>
              </answer>
            </qandaentry>
          </qandadiv>
        </qandaset>

        <para></para>
      </sect2>

      <sect2>
        <title>&#39;ResultSet not Updatable&#39;</title>

        <qandaset>
          <qandadiv>
            <qandaentry>
              <question>
                <para>I&#39;m trying to use JDBC-2.0 updatable result sets,
                and I get an exception saying my result set is not updatable.</para>
              </question>

              <answer>
                <para>Because MySQL does not have row identifiers, MySQL
                Connector/J can only update result sets that have come from
                queries that select the primary key(s) and only span one table
                (i.e. no joins). This is outlined in the JDBC specification.</para>
              </answer>
            </qandaentry>
          </qandadiv>
        </qandaset>

        <para></para>
      </sect2>
    </sect1>

    <sect1>
      <title>Reference</title>

      <para></para>

      <sect2>
        <title>Type Conversions Supported by MySQL Connector/J</title>

        <para>MySQL Connector/J is flexible in the way it handles conversions
        between MySQL data types and Java data types. </para>

        <para>In general, any MySQL data type can be converted to a
        java.lang.String, and any numerical type can be converted to any of
        the Java numerical types, although round-off, overflow, or loss of
        precision may occur.</para>

        <para>The conversions that are always guaranteed to work are listed in
        the following table:</para>

        <table>
          <title>Conversion Table</title>

          <tgroup cols="2">
            <thead>
              <row>
                <entry>These MySQL Data Types</entry>

                <entry>Can always be converted to these Java types</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>CHAR, VARCHAR, BLOB, TEXT, ENUM, and SET</entry>

                <entry>java.lang.String, java.io.InputStream, java.io.Reader,
                java.sql.Blob, java.sql.Clob</entry>
              </row>

              <row>
                <entry>FLOAT, REAL, DOUBLE PRECISION, NUMERIC, DECIMAL,
                TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT</entry>

                <entry>java.lang.String, java.lang.Short, java.lang.Integer,
                java.lang.Long, java.lang.Double, java.math.BigDecimal<note><para>round-off,
                overflow or loss of precision may occur if you choose a Java
                numeric data type that has less precision or capacity than the
                MySQL data type you are converting to/from.</para></note></entry>
              </row>

              <row>
                <entry>DATE, TIME, DATETIME, TIMESTAMP</entry>

                <entry>java.lang.String, java.sql.Date, java.sql.Timestamp</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>
    </sect1>
  </chapter>
</book>